
Digital_Water_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  08008854  08008854  00018854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009038  08009038  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009038  08009038  00019038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009040  08009040  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009040  08009040  00019040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009044  08009044  00019044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  20000078  080090c0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  080090c0  0002070c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001712d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032d0  00000000  00000000  000371d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  0003a4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003b848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f28  00000000  00000000  0003ca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019270  00000000  00000000  000559c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097474  00000000  00000000  0006ec30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001060a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055bc  00000000  00000000  001060f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800883c 	.word	0x0800883c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800883c 	.word	0x0800883c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_DMA_Init+0x4c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <MX_DMA_Init+0x4c>)
 8000594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <MX_DMA_Init+0x4c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 3, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2103      	movs	r1, #3
 80005aa:	203a      	movs	r0, #58	; 0x3a
 80005ac:	f001 fe3f 	bl	800222e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005b0:	203a      	movs	r0, #58	; 0x3a
 80005b2:	f001 fe58 	bl	8002266 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 3, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2103      	movs	r1, #3
 80005ba:	2046      	movs	r0, #70	; 0x46
 80005bc:	f001 fe37 	bl	800222e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80005c0:	2046      	movs	r0, #70	; 0x46
 80005c2:	f001 fe50 	bl	8002266 <HAL_NVIC_EnableIRQ>

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800

080005d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	4b31      	ldr	r3, [pc, #196]	; (80006b4 <MX_GPIO_Init+0xe0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a30      	ldr	r2, [pc, #192]	; (80006b4 <MX_GPIO_Init+0xe0>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b2e      	ldr	r3, [pc, #184]	; (80006b4 <MX_GPIO_Init+0xe0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <MX_GPIO_Init+0xe0>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a29      	ldr	r2, [pc, #164]	; (80006b4 <MX_GPIO_Init+0xe0>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <MX_GPIO_Init+0xe0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <MX_GPIO_Init+0xe0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a22      	ldr	r2, [pc, #136]	; (80006b4 <MX_GPIO_Init+0xe0>)
 800062c:	f043 0302 	orr.w	r3, r3, #2
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <MX_GPIO_Init+0xe0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8000644:	481c      	ldr	r0, [pc, #112]	; (80006b8 <MX_GPIO_Init+0xe4>)
 8000646:	f002 fb4f 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800064a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800064e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	4619      	mov	r1, r3
 8000662:	4815      	ldr	r0, [pc, #84]	; (80006b8 <MX_GPIO_Init+0xe4>)
 8000664:	f002 f9a4 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_EMPTY_Pin;
 8000668:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800066c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000674:	2301      	movs	r3, #1
 8000676:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(T_EMPTY_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4619      	mov	r1, r3
 800067e:	480e      	ldr	r0, [pc, #56]	; (80006b8 <MX_GPIO_Init+0xe4>)
 8000680:	f002 f996 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Level_0_Pin|Level_1_Pin|Level_2_Pin;
 8000684:	230e      	movs	r3, #14
 8000686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800068c:	2302      	movs	r3, #2
 800068e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	4619      	mov	r1, r3
 8000696:	4809      	ldr	r0, [pc, #36]	; (80006bc <MX_GPIO_Init+0xe8>)
 8000698:	f002 f98a 	bl	80029b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	2028      	movs	r0, #40	; 0x28
 80006a2:	f001 fdc4 	bl	800222e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006a6:	2028      	movs	r0, #40	; 0x28
 80006a8:	f001 fddd 	bl	8002266 <HAL_NVIC_EnableIRQ>

}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40020800 	.word	0x40020800
 80006bc:	40020000 	.word	0x40020000

080006c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_I2C1_Init+0x50>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <MX_I2C1_Init+0x54>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_I2C1_Init+0x50>)
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_I2C1_Init+0x58>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_I2C1_Init+0x50>)
 80006de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_I2C1_Init+0x50>)
 80006fe:	f002 fb3f 	bl	8002d80 <HAL_I2C_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000708:	f000 fbde 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000094 	.word	0x20000094
 8000714:	40005400 	.word	0x40005400
 8000718:	00061a80 	.word	0x00061a80

0800071c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <HAL_I2C_MspInit+0xa4>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d13c      	bne.n	80007b8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <HAL_I2C_MspInit+0xa8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a1f      	ldr	r2, [pc, #124]	; (80007c4 <HAL_I2C_MspInit+0xa8>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <HAL_I2C_MspInit+0xa8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800075a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800075e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000760:	2312      	movs	r3, #18
 8000762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800076c:	2304      	movs	r3, #4
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	4814      	ldr	r0, [pc, #80]	; (80007c8 <HAL_I2C_MspInit+0xac>)
 8000778:	f002 f91a 	bl	80029b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <HAL_I2C_MspInit+0xa8>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <HAL_I2C_MspInit+0xa8>)
 8000786:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <HAL_I2C_MspInit+0xa8>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2105      	movs	r1, #5
 800079c:	201f      	movs	r0, #31
 800079e:	f001 fd46 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007a2:	201f      	movs	r0, #31
 80007a4:	f001 fd5f 	bl	8002266 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2105      	movs	r1, #5
 80007ac:	2020      	movs	r0, #32
 80007ae:	f001 fd3e 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80007b2:	2020      	movs	r0, #32
 80007b4:	f001 fd57 	bl	8002266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007b8:	bf00      	nop
 80007ba:	3728      	adds	r7, #40	; 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40005400 	.word	0x40005400
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020400 	.word	0x40020400

080007cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007d0:	f3bf 8f4f 	dsb	sy
}
 80007d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <__NVIC_SystemReset+0x24>)
 80007d8:	68db      	ldr	r3, [r3, #12]
 80007da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80007de:	4904      	ldr	r1, [pc, #16]	; (80007f0 <__NVIC_SystemReset+0x24>)
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <__NVIC_SystemReset+0x28>)
 80007e2:	4313      	orrs	r3, r2
 80007e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80007e6:	f3bf 8f4f 	dsb	sy
}
 80007ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <__NVIC_SystemReset+0x20>
 80007f0:	e000ed00 	.word	0xe000ed00
 80007f4:	05fa0004 	.word	0x05fa0004

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	char Oled_msg_str[6]="0";
 80007fe:	2330      	movs	r3, #48	; 0x30
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	2300      	movs	r3, #0
 8000804:	80bb      	strh	r3, [r7, #4]
	uint8_t Chng_Lvl_state =0x00;
 8000806:	2300      	movs	r3, #0
 8000808:	71bb      	strb	r3, [r7, #6]
	uint8_t tribit_lvl_read=0x00;
 800080a:	2300      	movs	r3, #0
 800080c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080e:	f001 fb9d 	bl	8001f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000812:	f000 f85f 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000816:	f7ff fedd 	bl	80005d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800081a:	f7ff feb3 	bl	8000584 <MX_DMA_Init>
  MX_I2C1_Init();
 800081e:	f7ff ff4f 	bl	80006c0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000822:	f001 fa89 	bl	8001d38 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000826:	f000 fb55 	bl	8000ed4 <MX_RTC_Init>
  MX_TIM1_Init();
 800082a:	f001 fa0b 	bl	8001c44 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_RegisterCallback(&htim1, HAL_TIM_PERIOD_ELAPSED_CB_ID, User_TIMPeriodElapsedCallback);
 800082e:	4a21      	ldr	r2, [pc, #132]	; (80008b4 <main+0xbc>)
 8000830:	210e      	movs	r1, #14
 8000832:	4821      	ldr	r0, [pc, #132]	; (80008b8 <main+0xc0>)
 8000834:	f006 f906 	bl	8006a44 <HAL_TIM_RegisterCallback>
  HAL_TIM_Base_Start_IT(&htim1);
 8000838:	481f      	ldr	r0, [pc, #124]	; (80008b8 <main+0xc0>)
 800083a:	f005 fe4d 	bl	80064d8 <HAL_TIM_Base_Start_IT>
  SSD1306_Init();
 800083e:	f000 fc1b 	bl	8001078 <SSD1306_Init>
  HAL_RTC_Init(&hrtc);
 8000842:	481e      	ldr	r0, [pc, #120]	; (80008bc <main+0xc4>)
 8000844:	f005 fa36 	bl	8005cb4 <HAL_RTC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  dip_startup();
 8000848:	f000 fae0 	bl	8000e0c <dip_startup>
  set_time();
 800084c:	f000 f926 	bl	8000a9c <set_time>

  while (1)
  {
	  PutDT_Oled();
 8000850:	f000 f964 	bl	8000b1c <PutDT_Oled>
	  Register_Motor_oprtn_cllbk(MOTOR_OFF, Tank_full_cllbk);
 8000854:	491a      	ldr	r1, [pc, #104]	; (80008c0 <main+0xc8>)
 8000856:	2000      	movs	r0, #0
 8000858:	f000 f8c2 	bl	80009e0 <Register_Motor_oprtn_cllbk>
	  Register_Motor_oprtn_cllbk(FULL, Tank_Half_cllbk);
 800085c:	4919      	ldr	r1, [pc, #100]	; (80008c4 <main+0xcc>)
 800085e:	2004      	movs	r0, #4
 8000860:	f000 f8be 	bl	80009e0 <Register_Motor_oprtn_cllbk>
	  Register_Motor_oprtn_cllbk(HALF, Tank_Low_cllbk);
 8000864:	4918      	ldr	r1, [pc, #96]	; (80008c8 <main+0xd0>)
 8000866:	2006      	movs	r0, #6
 8000868:	f000 f8ba 	bl	80009e0 <Register_Motor_oprtn_cllbk>
	  Register_Motor_oprtn_cllbk(EMPTY, Tank_Empty_cllbk);
 800086c:	4917      	ldr	r1, [pc, #92]	; (80008cc <main+0xd4>)
 800086e:	2007      	movs	r0, #7
 8000870:	f000 f8b6 	bl	80009e0 <Register_Motor_oprtn_cllbk>
		tribit_lvl_read|=((HAL_GPIO_ReadPin(GPIOA,  Level_0_Pin)<<2)| (HAL_GPIO_ReadPin(GPIOA,  Level_1_Pin)<<1)| HAL_GPIO_ReadPin(GPIOA,  Level_2_Pin)<<0);
 8000874:	2102      	movs	r1, #2
 8000876:	4816      	ldr	r0, [pc, #88]	; (80008d0 <main+0xd8>)
 8000878:	f002 fa1e 	bl	8002cb8 <HAL_GPIO_ReadPin>
 800087c:	4603      	mov	r3, r0
 800087e:	009c      	lsls	r4, r3, #2
 8000880:	2104      	movs	r1, #4
 8000882:	4813      	ldr	r0, [pc, #76]	; (80008d0 <main+0xd8>)
 8000884:	f002 fa18 	bl	8002cb8 <HAL_GPIO_ReadPin>
 8000888:	4603      	mov	r3, r0
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	431c      	orrs	r4, r3
 800088e:	2108      	movs	r1, #8
 8000890:	480f      	ldr	r0, [pc, #60]	; (80008d0 <main+0xd8>)
 8000892:	f002 fa11 	bl	8002cb8 <HAL_GPIO_ReadPin>
 8000896:	4603      	mov	r3, r0
 8000898:	4323      	orrs	r3, r4
 800089a:	b25a      	sxtb	r2, r3
 800089c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	71fb      	strb	r3, [r7, #7]
//		Chng_Lvl_state= MOTOR_OFF | tribit_lvl_read;
		trigger_motor_oprations(tribit_lvl_read);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 f8ad 	bl	8000a08 <trigger_motor_oprations>
		tribit_lvl_read=0x00;
 80008ae:	2300      	movs	r3, #0
 80008b0:	71fb      	strb	r3, [r7, #7]
	  PutDT_Oled();
 80008b2:	e7cd      	b.n	8000850 <main+0x58>
 80008b4:	080009b1 	.word	0x080009b1
 80008b8:	20000540 	.word	0x20000540
 80008bc:	20000114 	.word	0x20000114
 80008c0:	08000a51 	.word	0x08000a51
 80008c4:	08000a69 	.word	0x08000a69
 80008c8:	08000a77 	.word	0x08000a77
 80008cc:	08000a85 	.word	0x08000a85
 80008d0:	40020000 	.word	0x40020000

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	; 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f007 fb34 	bl	8007f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <SystemClock_Config+0xd4>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	4a29      	ldr	r2, [pc, #164]	; (80009a8 <SystemClock_Config+0xd4>)
 8000902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000906:	6413      	str	r3, [r2, #64]	; 0x40
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <SystemClock_Config+0xd4>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	4b24      	ldr	r3, [pc, #144]	; (80009ac <SystemClock_Config+0xd8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000920:	4a22      	ldr	r2, [pc, #136]	; (80009ac <SystemClock_Config+0xd8>)
 8000922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	4b20      	ldr	r3, [pc, #128]	; (80009ac <SystemClock_Config+0xd8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000934:	230a      	movs	r3, #10
 8000936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	2301      	movs	r3, #1
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093c:	2310      	movs	r3, #16
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000944:	2302      	movs	r3, #2
 8000946:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000948:	2300      	movs	r3, #0
 800094a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800094c:	2308      	movs	r3, #8
 800094e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000950:	233c      	movs	r3, #60	; 0x3c
 8000952:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000954:	2302      	movs	r3, #2
 8000956:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000958:	2304      	movs	r3, #4
 800095a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095c:	f107 0320 	add.w	r3, r7, #32
 8000960:	4618      	mov	r0, r3
 8000962:	f004 fc61 	bl	8005228 <HAL_RCC_OscConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800096c:	f000 faac 	bl	8000ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000970:	230f      	movs	r3, #15
 8000972:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000974:	2302      	movs	r3, #2
 8000976:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000980:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000982:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000986:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2101      	movs	r1, #1
 800098e:	4618      	mov	r0, r3
 8000990:	f004 fec2 	bl	8005718 <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800099a:	f000 fa95 	bl	8000ec8 <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3750      	adds	r7, #80	; 0x50
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40007000 	.word	0x40007000

080009b0 <User_TIMPeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/*******************User---Functions************************************************************/

void User_TIMPeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

	//HAL_UART_Transmit_DMA(&huart1,(uint8_t*) Serial_tx, strlen(Serial_tx));
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80009b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <User_TIMPeriodElapsedCallback+0x1c>)
 80009be:	f002 f9ac 	bl	8002d1a <HAL_GPIO_TogglePin>

}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40020800 	.word	0x40020800

080009d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	80fb      	strh	r3, [r7, #6]
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
	NVIC_SystemReset();
 80009da:	f7ff fef7 	bl	80007cc <__NVIC_SystemReset>
	...

080009e0 <Register_Motor_oprtn_cllbk>:

// 4 callbacks  so array to register callbacks



void Register_Motor_oprtn_cllbk(uint8_t Task_function, motor_opreration_callbk callback){
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]

		Tasks_states[Task_function]=callback;
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	4905      	ldr	r1, [pc, #20]	; (8000a04 <Register_Motor_oprtn_cllbk+0x24>)
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	200000e8 	.word	0x200000e8

08000a08 <trigger_motor_oprations>:

void trigger_motor_oprations(uint8_t Water_Level){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	if(Water_Level == MOTOR_OFF){
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d102      	bne.n	8000a1e <trigger_motor_oprations+0x16>
	Tasks_states[MOTOR_OFF]();
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <trigger_motor_oprations+0x44>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4798      	blx	r3
	}
	if(Water_Level == FULL){
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	d102      	bne.n	8000a2a <trigger_motor_oprations+0x22>
	Tasks_states[FULL]();
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <trigger_motor_oprations+0x44>)
 8000a26:	691b      	ldr	r3, [r3, #16]
 8000a28:	4798      	blx	r3
	}
	if(Water_Level == HALF){
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b06      	cmp	r3, #6
 8000a2e:	d102      	bne.n	8000a36 <trigger_motor_oprations+0x2e>
	Tasks_states[HALF]();
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <trigger_motor_oprations+0x44>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4798      	blx	r3
	}
	if(Water_Level == EMPTY){
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b07      	cmp	r3, #7
 8000a3a:	d102      	bne.n	8000a42 <trigger_motor_oprations+0x3a>
	Tasks_states[EMPTY]();
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <trigger_motor_oprations+0x44>)
 8000a3e:	69db      	ldr	r3, [r3, #28]
 8000a40:	4798      	blx	r3
	}

}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000e8 	.word	0x200000e8

08000a50 <Tank_full_cllbk>:

void Tank_full_cllbk(){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	//Motor OFF
	//show Full
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, false);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a5a:	4802      	ldr	r0, [pc, #8]	; (8000a64 <Tank_full_cllbk+0x14>)
 8000a5c:	f002 f944 	bl	8002ce8 <HAL_GPIO_WritePin>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40020800 	.word	0x40020800

08000a68 <Tank_Half_cllbk>:
void Tank_Half_cllbk(){
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
	// Show Half
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <Tank_Low_cllbk>:

void Tank_Low_cllbk(){
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
	//Show Low
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <Tank_Empty_cllbk>:
void Tank_Empty_cllbk(){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	//Motor ON
	//show Empty
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, true);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a8e:	4802      	ldr	r0, [pc, #8]	; (8000a98 <Tank_Empty_cllbk+0x14>)
 8000a90:	f002 f92a 	bl	8002ce8 <HAL_GPIO_WritePin>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40020800 	.word	0x40020800

08000a9c <set_time>:

void set_time (){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0


  sTime.Hours = 0x7; // set hours
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <set_time+0x74>)
 8000aa2:	2207      	movs	r2, #7
 8000aa4:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x00; // set minutes
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <set_time+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x00; // set seconds
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <set_time+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <set_time+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <set_time+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4913      	ldr	r1, [pc, #76]	; (8000b10 <set_time+0x74>)
 8000ac2:	4814      	ldr	r0, [pc, #80]	; (8000b14 <set_time+0x78>)
 8000ac4:	f005 f96c 	bl	8005da0 <HAL_RTC_SetTime>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <set_time+0x36>
  {
    Error_Handler();
 8000ace:	f000 f9fb 	bl	8000ec8 <Error_Handler>
  }
  sDate.WeekDay = RTC_MONTH_DECEMBER; //  day
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <set_time+0x7c>)
 8000ad4:	2212      	movs	r2, #18
 8000ad6:	701a      	strb	r2, [r3, #0]
  sDate.Month = 0x12; //   month
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <set_time+0x7c>)
 8000ada:	2212      	movs	r2, #18
 8000adc:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x25; // date
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <set_time+0x7c>)
 8000ae0:	2225      	movs	r2, #37	; 0x25
 8000ae2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x23; // year
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <set_time+0x7c>)
 8000ae6:	2223      	movs	r2, #35	; 0x23
 8000ae8:	70da      	strb	r2, [r3, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000aea:	2201      	movs	r2, #1
 8000aec:	490a      	ldr	r1, [pc, #40]	; (8000b18 <set_time+0x7c>)
 8000aee:	4809      	ldr	r0, [pc, #36]	; (8000b14 <set_time+0x78>)
 8000af0:	f005 fa4e 	bl	8005f90 <HAL_RTC_SetDate>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <set_time+0x62>
  {
    Error_Handler();
 8000afa:	f000 f9e5 	bl	8000ec8 <Error_Handler>
  }
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8000afe:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000b02:	2101      	movs	r1, #1
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <set_time+0x78>)
 8000b06:	f005 fc70 	bl	80063ea <HAL_RTCEx_BKUPWrite>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000f8 	.word	0x200000f8
 8000b14:	20000114 	.word	0x20000114
 8000b18:	2000010c 	.word	0x2000010c

08000b1c <PutDT_Oled>:


void PutDT_Oled(void){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
	static bool Flag_ap=0;
	static uint8_t Am_pm_flag=0;
	char Strng_dis[20]="0";
 8000b22:	2330      	movs	r3, #48	; 0x30
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b34:	2200      	movs	r2, #0
 8000b36:	49a0      	ldr	r1, [pc, #640]	; (8000db8 <PutDT_Oled+0x29c>)
 8000b38:	48a0      	ldr	r0, [pc, #640]	; (8000dbc <PutDT_Oled+0x2a0>)
 8000b3a:	f005 f9cb 	bl	8005ed4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	499f      	ldr	r1, [pc, #636]	; (8000dc0 <PutDT_Oled+0x2a4>)
 8000b42:	489e      	ldr	r0, [pc, #632]	; (8000dbc <PutDT_Oled+0x2a0>)
 8000b44:	f005 faa8 	bl	8006098 <HAL_RTC_GetDate>

		memset(Strng_dis, 0, sizeof(Strng_dis));
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2214      	movs	r2, #20
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f007 f9fe 	bl	8007f50 <memset>
		intToStringWithAlignment( Strng_dis,sTime.Hours, 2, 1);
 8000b54:	4b98      	ldr	r3, [pc, #608]	; (8000db8 <PutDT_Oled+0x29c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	1d38      	adds	r0, r7, #4
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	2202      	movs	r2, #2
 8000b60:	f000 f992 	bl	8000e88 <intToStringWithAlignment>
		SSD1306_GotoXY (59, 11);
 8000b64:	210b      	movs	r1, #11
 8000b66:	203b      	movs	r0, #59	; 0x3b
 8000b68:	f000 fbf0 	bl	800134c <SSD1306_GotoXY>
		SSD1306_Puts(Strng_dis, &Font_7x10, 1);
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4994      	ldr	r1, [pc, #592]	; (8000dc4 <PutDT_Oled+0x2a8>)
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fc80 	bl	8001478 <SSD1306_Puts>
		SSD1306_DrawFilledCircle(74, 13, 1, 1);
 8000b78:	2301      	movs	r3, #1
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	210d      	movs	r1, #13
 8000b7e:	204a      	movs	r0, #74	; 0x4a
 8000b80:	f000 fe04 	bl	800178c <SSD1306_DrawFilledCircle>
		SSD1306_DrawFilledCircle(74, 17, 1, 1);
 8000b84:	2301      	movs	r3, #1
 8000b86:	2201      	movs	r2, #1
 8000b88:	2111      	movs	r1, #17
 8000b8a:	204a      	movs	r0, #74	; 0x4a
 8000b8c:	f000 fdfe 	bl	800178c <SSD1306_DrawFilledCircle>

		memset(Strng_dis, 0, sizeof(Strng_dis));
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2214      	movs	r2, #20
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f007 f9da 	bl	8007f50 <memset>
		intToStringWithAlignment( Strng_dis,sTime.Minutes, 2, 1);
 8000b9c:	4b86      	ldr	r3, [pc, #536]	; (8000db8 <PutDT_Oled+0x29c>)
 8000b9e:	785b      	ldrb	r3, [r3, #1]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	1d38      	adds	r0, r7, #4
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	f000 f96e 	bl	8000e88 <intToStringWithAlignment>
		SSD1306_GotoXY (78,11);
 8000bac:	210b      	movs	r1, #11
 8000bae:	204e      	movs	r0, #78	; 0x4e
 8000bb0:	f000 fbcc 	bl	800134c <SSD1306_GotoXY>
		SSD1306_Puts(Strng_dis, &Font_7x10, 1);
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4982      	ldr	r1, [pc, #520]	; (8000dc4 <PutDT_Oled+0x2a8>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fc5c 	bl	8001478 <SSD1306_Puts>
		SSD1306_DrawFilledCircle(94, 13, 1, 1);
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	210d      	movs	r1, #13
 8000bc6:	205e      	movs	r0, #94	; 0x5e
 8000bc8:	f000 fde0 	bl	800178c <SSD1306_DrawFilledCircle>
		SSD1306_DrawFilledCircle(94, 17, 1, 1);
 8000bcc:	2301      	movs	r3, #1
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2111      	movs	r1, #17
 8000bd2:	205e      	movs	r0, #94	; 0x5e
 8000bd4:	f000 fdda 	bl	800178c <SSD1306_DrawFilledCircle>

		memset(Strng_dis, 0, sizeof(Strng_dis));
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2214      	movs	r2, #20
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f007 f9b6 	bl	8007f50 <memset>
		intToStringWithAlignment( Strng_dis,sTime.Seconds, 2, 1);
 8000be4:	4b74      	ldr	r3, [pc, #464]	; (8000db8 <PutDT_Oled+0x29c>)
 8000be6:	789b      	ldrb	r3, [r3, #2]
 8000be8:	4619      	mov	r1, r3
 8000bea:	1d38      	adds	r0, r7, #4
 8000bec:	2301      	movs	r3, #1
 8000bee:	2202      	movs	r2, #2
 8000bf0:	f000 f94a 	bl	8000e88 <intToStringWithAlignment>
		SSD1306_GotoXY (97,11);
 8000bf4:	210b      	movs	r1, #11
 8000bf6:	2061      	movs	r0, #97	; 0x61
 8000bf8:	f000 fba8 	bl	800134c <SSD1306_GotoXY>
		SSD1306_Puts(Strng_dis, &Font_7x10, 1);
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4970      	ldr	r1, [pc, #448]	; (8000dc4 <PutDT_Oled+0x2a8>)
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 fc38 	bl	8001478 <SSD1306_Puts>
		SSD1306_GotoXY (112,11);
 8000c08:	210b      	movs	r1, #11
 8000c0a:	2070      	movs	r0, #112	; 0x70
 8000c0c:	f000 fb9e 	bl	800134c <SSD1306_GotoXY>
		  if((sTime.Hours == 12)&&(sTime.Seconds == 59)){
 8000c10:	4b69      	ldr	r3, [pc, #420]	; (8000db8 <PutDT_Oled+0x29c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b0c      	cmp	r3, #12
 8000c16:	d114      	bne.n	8000c42 <PutDT_Oled+0x126>
 8000c18:	4b67      	ldr	r3, [pc, #412]	; (8000db8 <PutDT_Oled+0x29c>)
 8000c1a:	789b      	ldrb	r3, [r3, #2]
 8000c1c:	2b3b      	cmp	r3, #59	; 0x3b
 8000c1e:	d110      	bne.n	8000c42 <PutDT_Oled+0x126>
//			    Flag_ap=0;
			  if(Flag_ap==0){
 8000c20:	4b69      	ldr	r3, [pc, #420]	; (8000dc8 <PutDT_Oled+0x2ac>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	f083 0301 	eor.w	r3, r3, #1
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d009      	beq.n	8000c42 <PutDT_Oled+0x126>
			  Am_pm_flag^=(1<<0);
 8000c2e:	4b67      	ldr	r3, [pc, #412]	; (8000dcc <PutDT_Oled+0x2b0>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	f083 0301 	eor.w	r3, r3, #1
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	4b64      	ldr	r3, [pc, #400]	; (8000dcc <PutDT_Oled+0x2b0>)
 8000c3a:	701a      	strb	r2, [r3, #0]
			  Flag_ap=1;
 8000c3c:	4b62      	ldr	r3, [pc, #392]	; (8000dc8 <PutDT_Oled+0x2ac>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  if(Am_pm_flag==0){
 8000c42:	4b62      	ldr	r3, [pc, #392]	; (8000dcc <PutDT_Oled+0x2b0>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d104      	bne.n	8000c54 <PutDT_Oled+0x138>
		  SSD1306_Puts("AM", &Font_7x10, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	495d      	ldr	r1, [pc, #372]	; (8000dc4 <PutDT_Oled+0x2a8>)
 8000c4e:	4860      	ldr	r0, [pc, #384]	; (8000dd0 <PutDT_Oled+0x2b4>)
 8000c50:	f000 fc12 	bl	8001478 <SSD1306_Puts>
		  }
		  if(Am_pm_flag==1){
 8000c54:	4b5d      	ldr	r3, [pc, #372]	; (8000dcc <PutDT_Oled+0x2b0>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d104      	bne.n	8000c66 <PutDT_Oled+0x14a>
		  SSD1306_Puts("PM", &Font_7x10, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4959      	ldr	r1, [pc, #356]	; (8000dc4 <PutDT_Oled+0x2a8>)
 8000c60:	485c      	ldr	r0, [pc, #368]	; (8000dd4 <PutDT_Oled+0x2b8>)
 8000c62:	f000 fc09 	bl	8001478 <SSD1306_Puts>
		  }
/*********************************************/
		  memset(Strng_dis, 0, sizeof(Strng_dis));
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2214      	movs	r2, #20
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f007 f96f 	bl	8007f50 <memset>
		  intToStringWithAlignment( Strng_dis,sDate.Date, 1, 1);
 8000c72:	4b53      	ldr	r3, [pc, #332]	; (8000dc0 <PutDT_Oled+0x2a4>)
 8000c74:	789b      	ldrb	r3, [r3, #2]
 8000c76:	4619      	mov	r1, r3
 8000c78:	1d38      	adds	r0, r7, #4
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f000 f903 	bl	8000e88 <intToStringWithAlignment>
		  SSD1306_GotoXY (64,0);
 8000c82:	2100      	movs	r1, #0
 8000c84:	2040      	movs	r0, #64	; 0x40
 8000c86:	f000 fb61 	bl	800134c <SSD1306_GotoXY>
		  SSD1306_Puts(Strng_dis, &Font_7x10, 1);
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	494d      	ldr	r1, [pc, #308]	; (8000dc4 <PutDT_Oled+0x2a8>)
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fbf1 	bl	8001478 <SSD1306_Puts>
		  SSD1306_GotoXY (78,0);
 8000c96:	2100      	movs	r1, #0
 8000c98:	204e      	movs	r0, #78	; 0x4e
 8000c9a:	f000 fb57 	bl	800134c <SSD1306_GotoXY>
		  SSD1306_Puts("-", &Font_7x10, 1);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4948      	ldr	r1, [pc, #288]	; (8000dc4 <PutDT_Oled+0x2a8>)
 8000ca2:	484d      	ldr	r0, [pc, #308]	; (8000dd8 <PutDT_Oled+0x2bc>)
 8000ca4:	f000 fbe8 	bl	8001478 <SSD1306_Puts>
		  memset(Strng_dis, 0, sizeof(Strng_dis));
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2214      	movs	r2, #20
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f007 f94e 	bl	8007f50 <memset>
			switch (sDate.Month){
 8000cb4:	4b42      	ldr	r3, [pc, #264]	; (8000dc0 <PutDT_Oled+0x2a4>)
 8000cb6:	785b      	ldrb	r3, [r3, #1]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	2b0b      	cmp	r3, #11
 8000cbc:	d84a      	bhi.n	8000d54 <PutDT_Oled+0x238>
 8000cbe:	a201      	add	r2, pc, #4	; (adr r2, 8000cc4 <PutDT_Oled+0x1a8>)
 8000cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc4:	08000cf5 	.word	0x08000cf5
 8000cc8:	08000cfd 	.word	0x08000cfd
 8000ccc:	08000d05 	.word	0x08000d05
 8000cd0:	08000d0d 	.word	0x08000d0d
 8000cd4:	08000d15 	.word	0x08000d15
 8000cd8:	08000d1d 	.word	0x08000d1d
 8000cdc:	08000d25 	.word	0x08000d25
 8000ce0:	08000d2d 	.word	0x08000d2d
 8000ce4:	08000d35 	.word	0x08000d35
 8000ce8:	08000d3d 	.word	0x08000d3d
 8000cec:	08000d45 	.word	0x08000d45
 8000cf0:	08000d4d 	.word	0x08000d4d

			case 1:
				strcpy(Strng_dis, "Jan");
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4a39      	ldr	r2, [pc, #228]	; (8000ddc <PutDT_Oled+0x2c0>)
 8000cf8:	601a      	str	r2, [r3, #0]
				break;
 8000cfa:	e02b      	b.n	8000d54 <PutDT_Oled+0x238>
			case 2:
				strcpy(Strng_dis, "Feb");
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	4a38      	ldr	r2, [pc, #224]	; (8000de0 <PutDT_Oled+0x2c4>)
 8000d00:	601a      	str	r2, [r3, #0]
				break;
 8000d02:	e027      	b.n	8000d54 <PutDT_Oled+0x238>
			case 3:
				strcpy(Strng_dis, "Mar");
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4a37      	ldr	r2, [pc, #220]	; (8000de4 <PutDT_Oled+0x2c8>)
 8000d08:	601a      	str	r2, [r3, #0]
				break;
 8000d0a:	e023      	b.n	8000d54 <PutDT_Oled+0x238>
			case 4:
				strcpy(Strng_dis, "Apr");
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	4a36      	ldr	r2, [pc, #216]	; (8000de8 <PutDT_Oled+0x2cc>)
 8000d10:	601a      	str	r2, [r3, #0]
				break;
 8000d12:	e01f      	b.n	8000d54 <PutDT_Oled+0x238>
			case 5:
				strcpy(Strng_dis, "May");
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4a35      	ldr	r2, [pc, #212]	; (8000dec <PutDT_Oled+0x2d0>)
 8000d18:	601a      	str	r2, [r3, #0]
				break;
 8000d1a:	e01b      	b.n	8000d54 <PutDT_Oled+0x238>
			case 6:
				strcpy(Strng_dis, "Jun");
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	4a34      	ldr	r2, [pc, #208]	; (8000df0 <PutDT_Oled+0x2d4>)
 8000d20:	601a      	str	r2, [r3, #0]
				break;
 8000d22:	e017      	b.n	8000d54 <PutDT_Oled+0x238>
			case 7:
				strcpy(Strng_dis, "Jul");
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	4a33      	ldr	r2, [pc, #204]	; (8000df4 <PutDT_Oled+0x2d8>)
 8000d28:	601a      	str	r2, [r3, #0]
				break;
 8000d2a:	e013      	b.n	8000d54 <PutDT_Oled+0x238>
			case 8:
				strcpy(Strng_dis, "Aug");
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	4a32      	ldr	r2, [pc, #200]	; (8000df8 <PutDT_Oled+0x2dc>)
 8000d30:	601a      	str	r2, [r3, #0]
				break;
 8000d32:	e00f      	b.n	8000d54 <PutDT_Oled+0x238>
			case 9:
				strcpy(Strng_dis, "Sep");
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	4a31      	ldr	r2, [pc, #196]	; (8000dfc <PutDT_Oled+0x2e0>)
 8000d38:	601a      	str	r2, [r3, #0]
				break;
 8000d3a:	e00b      	b.n	8000d54 <PutDT_Oled+0x238>
			case 10:
				strcpy(Strng_dis, "Oct");
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	4a30      	ldr	r2, [pc, #192]	; (8000e00 <PutDT_Oled+0x2e4>)
 8000d40:	601a      	str	r2, [r3, #0]
				break;
 8000d42:	e007      	b.n	8000d54 <PutDT_Oled+0x238>
			case 11:
				strcpy(Strng_dis, "Nov");
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	4a2f      	ldr	r2, [pc, #188]	; (8000e04 <PutDT_Oled+0x2e8>)
 8000d48:	601a      	str	r2, [r3, #0]
				break;
 8000d4a:	e003      	b.n	8000d54 <PutDT_Oled+0x238>
			case 12:
				strcpy(Strng_dis, "Dec");
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	4a2e      	ldr	r2, [pc, #184]	; (8000e08 <PutDT_Oled+0x2ec>)
 8000d50:	601a      	str	r2, [r3, #0]
				break;
 8000d52:	bf00      	nop
			}
			SSD1306_GotoXY (85,0);
 8000d54:	2100      	movs	r1, #0
 8000d56:	2055      	movs	r0, #85	; 0x55
 8000d58:	f000 faf8 	bl	800134c <SSD1306_GotoXY>
			SSD1306_Puts(Strng_dis, &Font_7x10, 1);
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4918      	ldr	r1, [pc, #96]	; (8000dc4 <PutDT_Oled+0x2a8>)
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 fb88 	bl	8001478 <SSD1306_Puts>
			SSD1306_GotoXY (106,0);
 8000d68:	2100      	movs	r1, #0
 8000d6a:	206a      	movs	r0, #106	; 0x6a
 8000d6c:	f000 faee 	bl	800134c <SSD1306_GotoXY>
			SSD1306_Puts("-", &Font_7x10, 1);
 8000d70:	2201      	movs	r2, #1
 8000d72:	4914      	ldr	r1, [pc, #80]	; (8000dc4 <PutDT_Oled+0x2a8>)
 8000d74:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <PutDT_Oled+0x2bc>)
 8000d76:	f000 fb7f 	bl	8001478 <SSD1306_Puts>
			memset(Strng_dis, 0, sizeof(Strng_dis));
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2214      	movs	r2, #20
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f007 f8e5 	bl	8007f50 <memset>
			intToStringWithAlignment( Strng_dis, sDate.Year, 2, 1);
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <PutDT_Oled+0x2a4>)
 8000d88:	78db      	ldrb	r3, [r3, #3]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	1d38      	adds	r0, r7, #4
 8000d8e:	2301      	movs	r3, #1
 8000d90:	2202      	movs	r2, #2
 8000d92:	f000 f879 	bl	8000e88 <intToStringWithAlignment>
			SSD1306_GotoXY (113,0);
 8000d96:	2100      	movs	r1, #0
 8000d98:	2071      	movs	r0, #113	; 0x71
 8000d9a:	f000 fad7 	bl	800134c <SSD1306_GotoXY>
			SSD1306_Puts(Strng_dis, &Font_7x10, 1);
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2201      	movs	r2, #1
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <PutDT_Oled+0x2a8>)
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fb67 	bl	8001478 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8000daa:	f000 fa29 	bl	8001200 <SSD1306_UpdateScreen>

}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200000f8 	.word	0x200000f8
 8000dbc:	20000114 	.word	0x20000114
 8000dc0:	2000010c 	.word	0x2000010c
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000110 	.word	0x20000110
 8000dcc:	20000111 	.word	0x20000111
 8000dd0:	08008854 	.word	0x08008854
 8000dd4:	08008858 	.word	0x08008858
 8000dd8:	0800885c 	.word	0x0800885c
 8000ddc:	006e614a 	.word	0x006e614a
 8000de0:	00626546 	.word	0x00626546
 8000de4:	0072614d 	.word	0x0072614d
 8000de8:	00727041 	.word	0x00727041
 8000dec:	0079614d 	.word	0x0079614d
 8000df0:	006e754a 	.word	0x006e754a
 8000df4:	006c754a 	.word	0x006c754a
 8000df8:	00677541 	.word	0x00677541
 8000dfc:	00706553 	.word	0x00706553
 8000e00:	0074634f 	.word	0x0074634f
 8000e04:	00766f4e 	.word	0x00766f4e
 8000e08:	00636544 	.word	0x00636544

08000e0c <dip_startup>:

void dip_startup(void){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af02      	add	r7, sp, #8
	SSD1306_Clear();
 8000e12:	f000 fd96 	bl	8001942 <SSD1306_Clear>
	SSD1306_GotoXY (2,2);
 8000e16:	2102      	movs	r1, #2
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f000 fa97 	bl	800134c <SSD1306_GotoXY>
	SSD1306_Puts("I~O", &Font_7x10, 1);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4916      	ldr	r1, [pc, #88]	; (8000e7c <dip_startup+0x70>)
 8000e22:	4817      	ldr	r0, [pc, #92]	; (8000e80 <dip_startup+0x74>)
 8000e24:	f000 fb28 	bl	8001478 <SSD1306_Puts>
	SSD1306_GotoXY (24,2);
 8000e28:	2102      	movs	r1, #2
 8000e2a:	2018      	movs	r0, #24
 8000e2c:	f000 fa8e 	bl	800134c <SSD1306_GotoXY>
	SSD1306_Puts("Tech", &Font_7x10, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	4912      	ldr	r1, [pc, #72]	; (8000e7c <dip_startup+0x70>)
 8000e34:	4813      	ldr	r0, [pc, #76]	; (8000e84 <dip_startup+0x78>)
 8000e36:	f000 fb1f 	bl	8001478 <SSD1306_Puts>
	SSD1306_DrawRectangle(0, 0, 53, 13, 1);
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	230d      	movs	r3, #13
 8000e40:	2235      	movs	r2, #53	; 0x35
 8000e42:	2100      	movs	r1, #0
 8000e44:	2000      	movs	r0, #0
 8000e46:	f000 fc37 	bl	80016b8 <SSD1306_DrawRectangle>
	SSD1306_ScrollLeft(25, 48);
 8000e4a:	2130      	movs	r1, #48	; 0x30
 8000e4c:	2019      	movs	r0, #25
 8000e4e:	f000 f8d3 	bl	8000ff8 <SSD1306_ScrollLeft>
	SSD1306_UpdateScreen();
 8000e52:	f000 f9d5 	bl	8001200 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 8000e56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e5a:	f001 f8e9 	bl	8002030 <HAL_Delay>
	SSD1306_Stopscroll();
 8000e5e:	f000 f901 	bl	8001064 <SSD1306_Stopscroll>
	SSD1306_UpdateScreen();
 8000e62:	f000 f9cd 	bl	8001200 <SSD1306_UpdateScreen>
	HAL_Delay(750);
 8000e66:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000e6a:	f001 f8e1 	bl	8002030 <HAL_Delay>
    HAL_GPIO_EXTI_IRQHandler(T_EMPTY_Pin);
 8000e6e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e72:	f001 ff6d 	bl	8002d50 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	08008860 	.word	0x08008860
 8000e84:	08008864 	.word	0x08008864

08000e88 <intToStringWithAlignment>:

void intToStringWithAlignment(char* str, int num, int width, int isRightAligned) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	603b      	str	r3, [r7, #0]
    if (isRightAligned) {
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d006      	beq.n	8000eaa <intToStringWithAlignment+0x22>
        sprintf(str, "%*d", width, num);
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	4907      	ldr	r1, [pc, #28]	; (8000ec0 <intToStringWithAlignment+0x38>)
 8000ea2:	68f8      	ldr	r0, [r7, #12]
 8000ea4:	f007 f85c 	bl	8007f60 <siprintf>
    } else {
        sprintf(str, "%-*d", width, num);
    }

}
 8000ea8:	e005      	b.n	8000eb6 <intToStringWithAlignment+0x2e>
        sprintf(str, "%-*d", width, num);
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	4905      	ldr	r1, [pc, #20]	; (8000ec4 <intToStringWithAlignment+0x3c>)
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	f007 f855 	bl	8007f60 <siprintf>
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	0800886c 	.word	0x0800886c
 8000ec4:	08008870 	.word	0x08008870

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <Error_Handler+0x8>
	...

08000ed4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ee8:	2300      	movs	r3, #0
 8000eea:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000eec:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <MX_RTC_Init+0xc4>)
 8000eee:	4a2b      	ldr	r2, [pc, #172]	; (8000f9c <MX_RTC_Init+0xc8>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <MX_RTC_Init+0xc4>)
 8000ef4:	2240      	movs	r2, #64	; 0x40
 8000ef6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <MX_RTC_Init+0xc4>)
 8000efa:	227f      	movs	r2, #127	; 0x7f
 8000efc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000efe:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <MX_RTC_Init+0xc4>)
 8000f00:	22ff      	movs	r2, #255	; 0xff
 8000f02:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <MX_RTC_Init+0xc4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f0a:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <MX_RTC_Init+0xc4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f10:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <MX_RTC_Init+0xc4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f16:	4820      	ldr	r0, [pc, #128]	; (8000f98 <MX_RTC_Init+0xc4>)
 8000f18:	f004 fecc 	bl	8005cb4 <HAL_RTC_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000f22:	f7ff ffd1 	bl	8000ec8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 5;
 8000f26:	2305      	movs	r3, #5
 8000f28:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 40;
 8000f2a:	2328      	movs	r3, #40	; 0x28
 8000f2c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 6;
 8000f2e:	2306      	movs	r3, #6
 8000f30:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000f32:	2300      	movs	r3, #0
 8000f34:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2200      	movs	r2, #0
 8000f42:	4619      	mov	r1, r3
 8000f44:	4814      	ldr	r0, [pc, #80]	; (8000f98 <MX_RTC_Init+0xc4>)
 8000f46:	f004 ff2b 	bl	8005da0 <HAL_RTC_SetTime>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8000f50:	f7ff ffba 	bl	8000ec8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f54:	2301      	movs	r3, #1
 8000f56:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000f64:	463b      	mov	r3, r7
 8000f66:	2200      	movs	r2, #0
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480b      	ldr	r0, [pc, #44]	; (8000f98 <MX_RTC_Init+0xc4>)
 8000f6c:	f005 f810 	bl	8005f90 <HAL_RTC_SetDate>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8000f76:	f7ff ffa7 	bl	8000ec8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <MX_RTC_Init+0xc4>)
 8000f80:	f005 f996 	bl	80062b0 <HAL_RTCEx_SetWakeUpTimer>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_RTC_Init+0xba>
  {
    Error_Handler();
 8000f8a:	f7ff ff9d 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000114 	.word	0x20000114
 8000f9c:	40002800 	.word	0x40002800

08000fa0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <HAL_RTC_MspInit+0x50>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d111      	bne.n	8000fe6 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fca:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f004 fd81 	bl	8005ad8 <HAL_RCCEx_PeriphCLKConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000fdc:	f7ff ff74 	bl	8000ec8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <HAL_RTC_MspInit+0x54>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3720      	adds	r7, #32
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40002800 	.word	0x40002800
 8000ff4:	42470e3c 	.word	0x42470e3c

08000ff8 <SSD1306_ScrollLeft>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
}


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4613      	mov	r3, r2
 8001006:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8001008:	2227      	movs	r2, #39	; 0x27
 800100a:	2100      	movs	r1, #0
 800100c:	2078      	movs	r0, #120	; 0x78
 800100e:	f000 fd1d 	bl	8001a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	2078      	movs	r0, #120	; 0x78
 8001018:	f000 fd18 	bl	8001a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	461a      	mov	r2, r3
 8001020:	2100      	movs	r1, #0
 8001022:	2078      	movs	r0, #120	; 0x78
 8001024:	f000 fd12 	bl	8001a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	2078      	movs	r0, #120	; 0x78
 800102e:	f000 fd0d 	bl	8001a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	461a      	mov	r2, r3
 8001036:	2100      	movs	r1, #0
 8001038:	2078      	movs	r0, #120	; 0x78
 800103a:	f000 fd07 	bl	8001a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	2078      	movs	r0, #120	; 0x78
 8001044:	f000 fd02 	bl	8001a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8001048:	22ff      	movs	r2, #255	; 0xff
 800104a:	2100      	movs	r1, #0
 800104c:	2078      	movs	r0, #120	; 0x78
 800104e:	f000 fcfd 	bl	8001a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8001052:	222f      	movs	r2, #47	; 0x2f
 8001054:	2100      	movs	r1, #0
 8001056:	2078      	movs	r0, #120	; 0x78
 8001058:	f000 fcf8 	bl	8001a4c <ssd1306_I2C_Write>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001068:	222e      	movs	r2, #46	; 0x2e
 800106a:	2100      	movs	r1, #0
 800106c:	2078      	movs	r0, #120	; 0x78
 800106e:	f000 fced 	bl	8001a4c <ssd1306_I2C_Write>
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800107e:	f000 fc69 	bl	8001954 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001082:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001086:	2201      	movs	r2, #1
 8001088:	2178      	movs	r1, #120	; 0x78
 800108a:	485b      	ldr	r0, [pc, #364]	; (80011f8 <SSD1306_Init+0x180>)
 800108c:	f002 f8ba 	bl	8003204 <HAL_I2C_IsDeviceReady>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001096:	2300      	movs	r3, #0
 8001098:	e0a9      	b.n	80011ee <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800109a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800109e:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010a0:	e002      	b.n	80010a8 <SSD1306_Init+0x30>
		p--;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f9      	bne.n	80010a2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80010ae:	22ae      	movs	r2, #174	; 0xae
 80010b0:	2100      	movs	r1, #0
 80010b2:	2078      	movs	r0, #120	; 0x78
 80010b4:	f000 fcca 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80010b8:	2220      	movs	r2, #32
 80010ba:	2100      	movs	r1, #0
 80010bc:	2078      	movs	r0, #120	; 0x78
 80010be:	f000 fcc5 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010c2:	2210      	movs	r2, #16
 80010c4:	2100      	movs	r1, #0
 80010c6:	2078      	movs	r0, #120	; 0x78
 80010c8:	f000 fcc0 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010cc:	22b0      	movs	r2, #176	; 0xb0
 80010ce:	2100      	movs	r1, #0
 80010d0:	2078      	movs	r0, #120	; 0x78
 80010d2:	f000 fcbb 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80010d6:	22c8      	movs	r2, #200	; 0xc8
 80010d8:	2100      	movs	r1, #0
 80010da:	2078      	movs	r0, #120	; 0x78
 80010dc:	f000 fcb6 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	2078      	movs	r0, #120	; 0x78
 80010e6:	f000 fcb1 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80010ea:	2210      	movs	r2, #16
 80010ec:	2100      	movs	r1, #0
 80010ee:	2078      	movs	r0, #120	; 0x78
 80010f0:	f000 fcac 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80010f4:	2240      	movs	r2, #64	; 0x40
 80010f6:	2100      	movs	r1, #0
 80010f8:	2078      	movs	r0, #120	; 0x78
 80010fa:	f000 fca7 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80010fe:	2281      	movs	r2, #129	; 0x81
 8001100:	2100      	movs	r1, #0
 8001102:	2078      	movs	r0, #120	; 0x78
 8001104:	f000 fca2 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001108:	22ff      	movs	r2, #255	; 0xff
 800110a:	2100      	movs	r1, #0
 800110c:	2078      	movs	r0, #120	; 0x78
 800110e:	f000 fc9d 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001112:	22a1      	movs	r2, #161	; 0xa1
 8001114:	2100      	movs	r1, #0
 8001116:	2078      	movs	r0, #120	; 0x78
 8001118:	f000 fc98 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800111c:	22a6      	movs	r2, #166	; 0xa6
 800111e:	2100      	movs	r1, #0
 8001120:	2078      	movs	r0, #120	; 0x78
 8001122:	f000 fc93 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001126:	22a8      	movs	r2, #168	; 0xa8
 8001128:	2100      	movs	r1, #0
 800112a:	2078      	movs	r0, #120	; 0x78
 800112c:	f000 fc8e 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001130:	223f      	movs	r2, #63	; 0x3f
 8001132:	2100      	movs	r1, #0
 8001134:	2078      	movs	r0, #120	; 0x78
 8001136:	f000 fc89 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800113a:	22a4      	movs	r2, #164	; 0xa4
 800113c:	2100      	movs	r1, #0
 800113e:	2078      	movs	r0, #120	; 0x78
 8001140:	f000 fc84 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001144:	22d3      	movs	r2, #211	; 0xd3
 8001146:	2100      	movs	r1, #0
 8001148:	2078      	movs	r0, #120	; 0x78
 800114a:	f000 fc7f 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2078      	movs	r0, #120	; 0x78
 8001154:	f000 fc7a 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001158:	22d5      	movs	r2, #213	; 0xd5
 800115a:	2100      	movs	r1, #0
 800115c:	2078      	movs	r0, #120	; 0x78
 800115e:	f000 fc75 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001162:	22f0      	movs	r2, #240	; 0xf0
 8001164:	2100      	movs	r1, #0
 8001166:	2078      	movs	r0, #120	; 0x78
 8001168:	f000 fc70 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800116c:	22d9      	movs	r2, #217	; 0xd9
 800116e:	2100      	movs	r1, #0
 8001170:	2078      	movs	r0, #120	; 0x78
 8001172:	f000 fc6b 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001176:	2222      	movs	r2, #34	; 0x22
 8001178:	2100      	movs	r1, #0
 800117a:	2078      	movs	r0, #120	; 0x78
 800117c:	f000 fc66 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001180:	22da      	movs	r2, #218	; 0xda
 8001182:	2100      	movs	r1, #0
 8001184:	2078      	movs	r0, #120	; 0x78
 8001186:	f000 fc61 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800118a:	2212      	movs	r2, #18
 800118c:	2100      	movs	r1, #0
 800118e:	2078      	movs	r0, #120	; 0x78
 8001190:	f000 fc5c 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001194:	22db      	movs	r2, #219	; 0xdb
 8001196:	2100      	movs	r1, #0
 8001198:	2078      	movs	r0, #120	; 0x78
 800119a:	f000 fc57 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800119e:	2220      	movs	r2, #32
 80011a0:	2100      	movs	r1, #0
 80011a2:	2078      	movs	r0, #120	; 0x78
 80011a4:	f000 fc52 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80011a8:	228d      	movs	r2, #141	; 0x8d
 80011aa:	2100      	movs	r1, #0
 80011ac:	2078      	movs	r0, #120	; 0x78
 80011ae:	f000 fc4d 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80011b2:	2214      	movs	r2, #20
 80011b4:	2100      	movs	r1, #0
 80011b6:	2078      	movs	r0, #120	; 0x78
 80011b8:	f000 fc48 	bl	8001a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80011bc:	22af      	movs	r2, #175	; 0xaf
 80011be:	2100      	movs	r1, #0
 80011c0:	2078      	movs	r0, #120	; 0x78
 80011c2:	f000 fc43 	bl	8001a4c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80011c6:	222e      	movs	r2, #46	; 0x2e
 80011c8:	2100      	movs	r1, #0
 80011ca:	2078      	movs	r0, #120	; 0x78
 80011cc:	f000 fc3e 	bl	8001a4c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011d0:	2000      	movs	r0, #0
 80011d2:	f000 f843 	bl	800125c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80011d6:	f000 f813 	bl	8001200 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <SSD1306_Init+0x184>)
 80011dc:	2200      	movs	r2, #0
 80011de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <SSD1306_Init+0x184>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <SSD1306_Init+0x184>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80011ec:	2301      	movs	r3, #1
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000094 	.word	0x20000094
 80011fc:	20000534 	.word	0x20000534

08001200 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	e01d      	b.n	8001248 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	3b50      	subs	r3, #80	; 0x50
 8001210:	b2db      	uxtb	r3, r3
 8001212:	461a      	mov	r2, r3
 8001214:	2100      	movs	r1, #0
 8001216:	2078      	movs	r0, #120	; 0x78
 8001218:	f000 fc18 	bl	8001a4c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	2078      	movs	r0, #120	; 0x78
 8001222:	f000 fc13 	bl	8001a4c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001226:	2210      	movs	r2, #16
 8001228:	2100      	movs	r1, #0
 800122a:	2078      	movs	r0, #120	; 0x78
 800122c:	f000 fc0e 	bl	8001a4c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	01db      	lsls	r3, r3, #7
 8001234:	4a08      	ldr	r2, [pc, #32]	; (8001258 <SSD1306_UpdateScreen+0x58>)
 8001236:	441a      	add	r2, r3
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	2140      	movs	r1, #64	; 0x40
 800123c:	2078      	movs	r0, #120	; 0x78
 800123e:	f000 fb9f 	bl	8001980 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	3301      	adds	r3, #1
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	2b07      	cmp	r3, #7
 800124c:	d9de      	bls.n	800120c <SSD1306_UpdateScreen+0xc>
	}
}
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000134 	.word	0x20000134

0800125c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <SSD1306_Fill+0x14>
 800126c:	2300      	movs	r3, #0
 800126e:	e000      	b.n	8001272 <SSD1306_Fill+0x16>
 8001270:	23ff      	movs	r3, #255	; 0xff
 8001272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001276:	4619      	mov	r1, r3
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <SSD1306_Fill+0x2c>)
 800127a:	f006 fe69 	bl	8007f50 <memset>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000134 	.word	0x20000134

0800128c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	80fb      	strh	r3, [r7, #6]
 8001296:	460b      	mov	r3, r1
 8001298:	80bb      	strh	r3, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	70fb      	strb	r3, [r7, #3]
	if (
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	2b7f      	cmp	r3, #127	; 0x7f
 80012a2:	d848      	bhi.n	8001336 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80012a4:	88bb      	ldrh	r3, [r7, #4]
 80012a6:	2b3f      	cmp	r3, #63	; 0x3f
 80012a8:	d845      	bhi.n	8001336 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <SSD1306_DrawPixel+0xb8>)
 80012ac:	791b      	ldrb	r3, [r3, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012b2:	78fb      	ldrb	r3, [r7, #3]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bf0c      	ite	eq
 80012b8:	2301      	moveq	r3, #1
 80012ba:	2300      	movne	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d11a      	bne.n	80012fc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012c6:	88fa      	ldrh	r2, [r7, #6]
 80012c8:	88bb      	ldrh	r3, [r7, #4]
 80012ca:	08db      	lsrs	r3, r3, #3
 80012cc:	b298      	uxth	r0, r3
 80012ce:	4603      	mov	r3, r0
 80012d0:	01db      	lsls	r3, r3, #7
 80012d2:	4413      	add	r3, r2
 80012d4:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <SSD1306_DrawPixel+0xbc>)
 80012d6:	5cd3      	ldrb	r3, [r2, r3]
 80012d8:	b25a      	sxtb	r2, r3
 80012da:	88bb      	ldrh	r3, [r7, #4]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	2101      	movs	r1, #1
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b259      	sxtb	r1, r3
 80012ec:	88fa      	ldrh	r2, [r7, #6]
 80012ee:	4603      	mov	r3, r0
 80012f0:	01db      	lsls	r3, r3, #7
 80012f2:	4413      	add	r3, r2
 80012f4:	b2c9      	uxtb	r1, r1
 80012f6:	4a14      	ldr	r2, [pc, #80]	; (8001348 <SSD1306_DrawPixel+0xbc>)
 80012f8:	54d1      	strb	r1, [r2, r3]
 80012fa:	e01d      	b.n	8001338 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012fc:	88fa      	ldrh	r2, [r7, #6]
 80012fe:	88bb      	ldrh	r3, [r7, #4]
 8001300:	08db      	lsrs	r3, r3, #3
 8001302:	b298      	uxth	r0, r3
 8001304:	4603      	mov	r3, r0
 8001306:	01db      	lsls	r3, r3, #7
 8001308:	4413      	add	r3, r2
 800130a:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <SSD1306_DrawPixel+0xbc>)
 800130c:	5cd3      	ldrb	r3, [r2, r3]
 800130e:	b25a      	sxtb	r2, r3
 8001310:	88bb      	ldrh	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	2101      	movs	r1, #1
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	b25b      	sxtb	r3, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	b25b      	sxtb	r3, r3
 8001322:	4013      	ands	r3, r2
 8001324:	b259      	sxtb	r1, r3
 8001326:	88fa      	ldrh	r2, [r7, #6]
 8001328:	4603      	mov	r3, r0
 800132a:	01db      	lsls	r3, r3, #7
 800132c:	4413      	add	r3, r2
 800132e:	b2c9      	uxtb	r1, r1
 8001330:	4a05      	ldr	r2, [pc, #20]	; (8001348 <SSD1306_DrawPixel+0xbc>)
 8001332:	54d1      	strb	r1, [r2, r3]
 8001334:	e000      	b.n	8001338 <SSD1306_DrawPixel+0xac>
		return;
 8001336:	bf00      	nop
	}
}
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000534 	.word	0x20000534
 8001348:	20000134 	.word	0x20000134

0800134c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	460a      	mov	r2, r1
 8001356:	80fb      	strh	r3, [r7, #6]
 8001358:	4613      	mov	r3, r2
 800135a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800135c:	4a05      	ldr	r2, [pc, #20]	; (8001374 <SSD1306_GotoXY+0x28>)
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <SSD1306_GotoXY+0x28>)
 8001364:	88bb      	ldrh	r3, [r7, #4]
 8001366:	8053      	strh	r3, [r2, #2]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	20000534 	.word	0x20000534

08001378 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
 8001384:	4613      	mov	r3, r2
 8001386:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001388:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <SSD1306_Putc+0xfc>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
	if (
 8001394:	2b7f      	cmp	r3, #127	; 0x7f
 8001396:	dc07      	bgt.n	80013a8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001398:	4b36      	ldr	r3, [pc, #216]	; (8001474 <SSD1306_Putc+0xfc>)
 800139a:	885b      	ldrh	r3, [r3, #2]
 800139c:	461a      	mov	r2, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	785b      	ldrb	r3, [r3, #1]
 80013a2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013a4:	2b3f      	cmp	r3, #63	; 0x3f
 80013a6:	dd01      	ble.n	80013ac <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	e05e      	b.n	800146a <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	e04b      	b.n	800144a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	3b20      	subs	r3, #32
 80013ba:	6839      	ldr	r1, [r7, #0]
 80013bc:	7849      	ldrb	r1, [r1, #1]
 80013be:	fb01 f303 	mul.w	r3, r1, r3
 80013c2:	4619      	mov	r1, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	440b      	add	r3, r1
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	e030      	b.n	8001438 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d010      	beq.n	8001408 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <SSD1306_Putc+0xfc>)
 80013e8:	881a      	ldrh	r2, [r3, #0]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	b298      	uxth	r0, r3
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <SSD1306_Putc+0xfc>)
 80013f4:	885a      	ldrh	r2, [r3, #2]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4413      	add	r3, r2
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	79ba      	ldrb	r2, [r7, #6]
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff ff43 	bl	800128c <SSD1306_DrawPixel>
 8001406:	e014      	b.n	8001432 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <SSD1306_Putc+0xfc>)
 800140a:	881a      	ldrh	r2, [r3, #0]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	b29b      	uxth	r3, r3
 8001410:	4413      	add	r3, r2
 8001412:	b298      	uxth	r0, r3
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <SSD1306_Putc+0xfc>)
 8001416:	885a      	ldrh	r2, [r3, #2]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	b29b      	uxth	r3, r3
 800141c:	4413      	add	r3, r2
 800141e:	b299      	uxth	r1, r3
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	2b00      	cmp	r3, #0
 8001424:	bf0c      	ite	eq
 8001426:	2301      	moveq	r3, #1
 8001428:	2300      	movne	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	f7ff ff2d 	bl	800128c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	3301      	adds	r3, #1
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4293      	cmp	r3, r2
 8001442:	d3c8      	bcc.n	80013d6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3301      	adds	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	785b      	ldrb	r3, [r3, #1]
 800144e:	461a      	mov	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	4293      	cmp	r3, r2
 8001454:	d3ad      	bcc.n	80013b2 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <SSD1306_Putc+0xfc>)
 8001458:	881a      	ldrh	r2, [r3, #0]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b29b      	uxth	r3, r3
 8001460:	4413      	add	r3, r2
 8001462:	b29a      	uxth	r2, r3
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <SSD1306_Putc+0xfc>)
 8001466:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001468:	79fb      	ldrb	r3, [r7, #7]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000534 	.word	0x20000534

08001478 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	4613      	mov	r3, r2
 8001484:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001486:	e012      	b.n	80014ae <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	79fa      	ldrb	r2, [r7, #7]
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff71 	bl	8001378 <SSD1306_Putc>
 8001496:	4603      	mov	r3, r0
 8001498:	461a      	mov	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d002      	beq.n	80014a8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	e008      	b.n	80014ba <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3301      	adds	r3, #1
 80014ac:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1e8      	bne.n	8001488 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	781b      	ldrb	r3, [r3, #0]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80014c2:	b590      	push	{r4, r7, lr}
 80014c4:	b087      	sub	sp, #28
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4604      	mov	r4, r0
 80014ca:	4608      	mov	r0, r1
 80014cc:	4611      	mov	r1, r2
 80014ce:	461a      	mov	r2, r3
 80014d0:	4623      	mov	r3, r4
 80014d2:	80fb      	strh	r3, [r7, #6]
 80014d4:	4603      	mov	r3, r0
 80014d6:	80bb      	strh	r3, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	807b      	strh	r3, [r7, #2]
 80014dc:	4613      	mov	r3, r2
 80014de:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	2b7f      	cmp	r3, #127	; 0x7f
 80014e4:	d901      	bls.n	80014ea <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80014e6:	237f      	movs	r3, #127	; 0x7f
 80014e8:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	2b7f      	cmp	r3, #127	; 0x7f
 80014ee:	d901      	bls.n	80014f4 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80014f0:	237f      	movs	r3, #127	; 0x7f
 80014f2:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80014f4:	88bb      	ldrh	r3, [r7, #4]
 80014f6:	2b3f      	cmp	r3, #63	; 0x3f
 80014f8:	d901      	bls.n	80014fe <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80014fa:	233f      	movs	r3, #63	; 0x3f
 80014fc:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80014fe:	883b      	ldrh	r3, [r7, #0]
 8001500:	2b3f      	cmp	r3, #63	; 0x3f
 8001502:	d901      	bls.n	8001508 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001504:	233f      	movs	r3, #63	; 0x3f
 8001506:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001508:	88fa      	ldrh	r2, [r7, #6]
 800150a:	887b      	ldrh	r3, [r7, #2]
 800150c:	429a      	cmp	r2, r3
 800150e:	d205      	bcs.n	800151c <SSD1306_DrawLine+0x5a>
 8001510:	887a      	ldrh	r2, [r7, #2]
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	b29b      	uxth	r3, r3
 8001518:	b21b      	sxth	r3, r3
 800151a:	e004      	b.n	8001526 <SSD1306_DrawLine+0x64>
 800151c:	88fa      	ldrh	r2, [r7, #6]
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	b29b      	uxth	r3, r3
 8001524:	b21b      	sxth	r3, r3
 8001526:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001528:	88ba      	ldrh	r2, [r7, #4]
 800152a:	883b      	ldrh	r3, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d205      	bcs.n	800153c <SSD1306_DrawLine+0x7a>
 8001530:	883a      	ldrh	r2, [r7, #0]
 8001532:	88bb      	ldrh	r3, [r7, #4]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	b29b      	uxth	r3, r3
 8001538:	b21b      	sxth	r3, r3
 800153a:	e004      	b.n	8001546 <SSD1306_DrawLine+0x84>
 800153c:	88ba      	ldrh	r2, [r7, #4]
 800153e:	883b      	ldrh	r3, [r7, #0]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	b29b      	uxth	r3, r3
 8001544:	b21b      	sxth	r3, r3
 8001546:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8001548:	88fa      	ldrh	r2, [r7, #6]
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	429a      	cmp	r2, r3
 800154e:	d201      	bcs.n	8001554 <SSD1306_DrawLine+0x92>
 8001550:	2301      	movs	r3, #1
 8001552:	e001      	b.n	8001558 <SSD1306_DrawLine+0x96>
 8001554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001558:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 800155a:	88ba      	ldrh	r2, [r7, #4]
 800155c:	883b      	ldrh	r3, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d201      	bcs.n	8001566 <SSD1306_DrawLine+0xa4>
 8001562:	2301      	movs	r3, #1
 8001564:	e001      	b.n	800156a <SSD1306_DrawLine+0xa8>
 8001566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800156a:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 800156c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001570:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	dd06      	ble.n	8001586 <SSD1306_DrawLine+0xc4>
 8001578:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800157c:	0fda      	lsrs	r2, r3, #31
 800157e:	4413      	add	r3, r2
 8001580:	105b      	asrs	r3, r3, #1
 8001582:	b21b      	sxth	r3, r3
 8001584:	e006      	b.n	8001594 <SSD1306_DrawLine+0xd2>
 8001586:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800158a:	0fda      	lsrs	r2, r3, #31
 800158c:	4413      	add	r3, r2
 800158e:	105b      	asrs	r3, r3, #1
 8001590:	425b      	negs	r3, r3
 8001592:	b21b      	sxth	r3, r3
 8001594:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001596:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d129      	bne.n	80015f2 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 800159e:	883a      	ldrh	r2, [r7, #0]
 80015a0:	88bb      	ldrh	r3, [r7, #4]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d205      	bcs.n	80015b2 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80015a6:	883b      	ldrh	r3, [r7, #0]
 80015a8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80015aa:	88bb      	ldrh	r3, [r7, #4]
 80015ac:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80015ae:	893b      	ldrh	r3, [r7, #8]
 80015b0:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d205      	bcs.n	80015c6 <SSD1306_DrawLine+0x104>
			tmp = x1;
 80015ba:	887b      	ldrh	r3, [r7, #2]
 80015bc:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80015c2:	893b      	ldrh	r3, [r7, #8]
 80015c4:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80015c6:	88bb      	ldrh	r3, [r7, #4]
 80015c8:	82bb      	strh	r3, [r7, #20]
 80015ca:	e00c      	b.n	80015e6 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80015cc:	8ab9      	ldrh	r1, [r7, #20]
 80015ce:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fe59 	bl	800128c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80015da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	3301      	adds	r3, #1
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	82bb      	strh	r3, [r7, #20]
 80015e6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80015ea:	883b      	ldrh	r3, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dded      	ble.n	80015cc <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 80015f0:	e05f      	b.n	80016b2 <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 80015f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d129      	bne.n	800164e <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80015fa:	883a      	ldrh	r2, [r7, #0]
 80015fc:	88bb      	ldrh	r3, [r7, #4]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d205      	bcs.n	800160e <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001602:	883b      	ldrh	r3, [r7, #0]
 8001604:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001606:	88bb      	ldrh	r3, [r7, #4]
 8001608:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800160a:	893b      	ldrh	r3, [r7, #8]
 800160c:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 800160e:	887a      	ldrh	r2, [r7, #2]
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	429a      	cmp	r2, r3
 8001614:	d205      	bcs.n	8001622 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001616:	887b      	ldrh	r3, [r7, #2]
 8001618:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800161e:	893b      	ldrh	r3, [r7, #8]
 8001620:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	82bb      	strh	r3, [r7, #20]
 8001626:	e00c      	b.n	8001642 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001628:	8abb      	ldrh	r3, [r7, #20]
 800162a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800162e:	88b9      	ldrh	r1, [r7, #4]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fe2b 	bl	800128c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001636:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800163a:	b29b      	uxth	r3, r3
 800163c:	3301      	adds	r3, #1
 800163e:	b29b      	uxth	r3, r3
 8001640:	82bb      	strh	r3, [r7, #20]
 8001642:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	429a      	cmp	r2, r3
 800164a:	dded      	ble.n	8001628 <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 800164c:	e031      	b.n	80016b2 <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800164e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001652:	88b9      	ldrh	r1, [r7, #4]
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fe18 	bl	800128c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800165c:	88fa      	ldrh	r2, [r7, #6]
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	429a      	cmp	r2, r3
 8001662:	d103      	bne.n	800166c <SSD1306_DrawLine+0x1aa>
 8001664:	88ba      	ldrh	r2, [r7, #4]
 8001666:	883b      	ldrh	r3, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d021      	beq.n	80016b0 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 800166c:	8afb      	ldrh	r3, [r7, #22]
 800166e:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001670:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001674:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001678:	425b      	negs	r3, r3
 800167a:	429a      	cmp	r2, r3
 800167c:	dd08      	ble.n	8001690 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800167e:	8afa      	ldrh	r2, [r7, #22]
 8001680:	8a3b      	ldrh	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	b29b      	uxth	r3, r3
 8001686:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001688:	89fa      	ldrh	r2, [r7, #14]
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	4413      	add	r3, r2
 800168e:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8001690:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001694:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	dad8      	bge.n	800164e <SSD1306_DrawLine+0x18c>
			err += dx;
 800169c:	8afa      	ldrh	r2, [r7, #22]
 800169e:	8a7b      	ldrh	r3, [r7, #18]
 80016a0:	4413      	add	r3, r2
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80016a6:	89ba      	ldrh	r2, [r7, #12]
 80016a8:	88bb      	ldrh	r3, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80016ae:	e7ce      	b.n	800164e <SSD1306_DrawLine+0x18c>
			break;
 80016b0:	bf00      	nop
		}
	}
}
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd90      	pop	{r4, r7, pc}

080016b8 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af02      	add	r7, sp, #8
 80016be:	4604      	mov	r4, r0
 80016c0:	4608      	mov	r0, r1
 80016c2:	4611      	mov	r1, r2
 80016c4:	461a      	mov	r2, r3
 80016c6:	4623      	mov	r3, r4
 80016c8:	80fb      	strh	r3, [r7, #6]
 80016ca:	4603      	mov	r3, r0
 80016cc:	80bb      	strh	r3, [r7, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	807b      	strh	r3, [r7, #2]
 80016d2:	4613      	mov	r3, r2
 80016d4:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	2b7f      	cmp	r3, #127	; 0x7f
 80016da:	d853      	bhi.n	8001784 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 80016dc:	88bb      	ldrh	r3, [r7, #4]
 80016de:	2b3f      	cmp	r3, #63	; 0x3f
 80016e0:	d850      	bhi.n	8001784 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80016e2:	88fa      	ldrh	r2, [r7, #6]
 80016e4:	887b      	ldrh	r3, [r7, #2]
 80016e6:	4413      	add	r3, r2
 80016e8:	2b7f      	cmp	r3, #127	; 0x7f
 80016ea:	dd03      	ble.n	80016f4 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80016f2:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80016f4:	88ba      	ldrh	r2, [r7, #4]
 80016f6:	883b      	ldrh	r3, [r7, #0]
 80016f8:	4413      	add	r3, r2
 80016fa:	2b3f      	cmp	r3, #63	; 0x3f
 80016fc:	dd03      	ble.n	8001706 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80016fe:	88bb      	ldrh	r3, [r7, #4]
 8001700:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001704:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001706:	88fa      	ldrh	r2, [r7, #6]
 8001708:	887b      	ldrh	r3, [r7, #2]
 800170a:	4413      	add	r3, r2
 800170c:	b29a      	uxth	r2, r3
 800170e:	88bc      	ldrh	r4, [r7, #4]
 8001710:	88b9      	ldrh	r1, [r7, #4]
 8001712:	88f8      	ldrh	r0, [r7, #6]
 8001714:	7e3b      	ldrb	r3, [r7, #24]
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	4623      	mov	r3, r4
 800171a:	f7ff fed2 	bl	80014c2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 800171e:	88ba      	ldrh	r2, [r7, #4]
 8001720:	883b      	ldrh	r3, [r7, #0]
 8001722:	4413      	add	r3, r2
 8001724:	b299      	uxth	r1, r3
 8001726:	88fa      	ldrh	r2, [r7, #6]
 8001728:	887b      	ldrh	r3, [r7, #2]
 800172a:	4413      	add	r3, r2
 800172c:	b29c      	uxth	r4, r3
 800172e:	88ba      	ldrh	r2, [r7, #4]
 8001730:	883b      	ldrh	r3, [r7, #0]
 8001732:	4413      	add	r3, r2
 8001734:	b29a      	uxth	r2, r3
 8001736:	88f8      	ldrh	r0, [r7, #6]
 8001738:	7e3b      	ldrb	r3, [r7, #24]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	4613      	mov	r3, r2
 800173e:	4622      	mov	r2, r4
 8001740:	f7ff febf 	bl	80014c2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001744:	88ba      	ldrh	r2, [r7, #4]
 8001746:	883b      	ldrh	r3, [r7, #0]
 8001748:	4413      	add	r3, r2
 800174a:	b29c      	uxth	r4, r3
 800174c:	88fa      	ldrh	r2, [r7, #6]
 800174e:	88b9      	ldrh	r1, [r7, #4]
 8001750:	88f8      	ldrh	r0, [r7, #6]
 8001752:	7e3b      	ldrb	r3, [r7, #24]
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	4623      	mov	r3, r4
 8001758:	f7ff feb3 	bl	80014c2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 800175c:	88fa      	ldrh	r2, [r7, #6]
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	4413      	add	r3, r2
 8001762:	b298      	uxth	r0, r3
 8001764:	88fa      	ldrh	r2, [r7, #6]
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	4413      	add	r3, r2
 800176a:	b29c      	uxth	r4, r3
 800176c:	88ba      	ldrh	r2, [r7, #4]
 800176e:	883b      	ldrh	r3, [r7, #0]
 8001770:	4413      	add	r3, r2
 8001772:	b29a      	uxth	r2, r3
 8001774:	88b9      	ldrh	r1, [r7, #4]
 8001776:	7e3b      	ldrb	r3, [r7, #24]
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	4613      	mov	r3, r2
 800177c:	4622      	mov	r2, r4
 800177e:	f7ff fea0 	bl	80014c2 <SSD1306_DrawLine>
 8001782:	e000      	b.n	8001786 <SSD1306_DrawRectangle+0xce>
		return;
 8001784:	bf00      	nop
}
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bd90      	pop	{r4, r7, pc}

0800178c <SSD1306_DrawFilledCircle>:
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
    }
}

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af02      	add	r7, sp, #8
 8001792:	4604      	mov	r4, r0
 8001794:	4608      	mov	r0, r1
 8001796:	4611      	mov	r1, r2
 8001798:	461a      	mov	r2, r3
 800179a:	4623      	mov	r3, r4
 800179c:	80fb      	strh	r3, [r7, #6]
 800179e:	4603      	mov	r3, r0
 80017a0:	80bb      	strh	r3, [r7, #4]
 80017a2:	460b      	mov	r3, r1
 80017a4:	807b      	strh	r3, [r7, #2]
 80017a6:	4613      	mov	r3, r2
 80017a8:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	f1c3 0301 	rsb	r3, r3, #1
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80017b8:	887b      	ldrh	r3, [r7, #2]
 80017ba:	461a      	mov	r2, r3
 80017bc:	03d2      	lsls	r2, r2, #15
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 80017ce:	88f8      	ldrh	r0, [r7, #6]
 80017d0:	88ba      	ldrh	r2, [r7, #4]
 80017d2:	887b      	ldrh	r3, [r7, #2]
 80017d4:	4413      	add	r3, r2
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	787a      	ldrb	r2, [r7, #1]
 80017da:	4619      	mov	r1, r3
 80017dc:	f7ff fd56 	bl	800128c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 80017e0:	88f8      	ldrh	r0, [r7, #6]
 80017e2:	88ba      	ldrh	r2, [r7, #4]
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	787a      	ldrb	r2, [r7, #1]
 80017ec:	4619      	mov	r1, r3
 80017ee:	f7ff fd4d 	bl	800128c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 80017f2:	88fa      	ldrh	r2, [r7, #6]
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	4413      	add	r3, r2
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	88b9      	ldrh	r1, [r7, #4]
 80017fc:	787a      	ldrb	r2, [r7, #1]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fd44 	bl	800128c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001804:	88fa      	ldrh	r2, [r7, #6]
 8001806:	887b      	ldrh	r3, [r7, #2]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	b29b      	uxth	r3, r3
 800180c:	88b9      	ldrh	r1, [r7, #4]
 800180e:	787a      	ldrb	r2, [r7, #1]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fd3b 	bl	800128c <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 8001816:	88fa      	ldrh	r2, [r7, #6]
 8001818:	887b      	ldrh	r3, [r7, #2]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	b298      	uxth	r0, r3
 800181e:	88b9      	ldrh	r1, [r7, #4]
 8001820:	88fa      	ldrh	r2, [r7, #6]
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	4413      	add	r3, r2
 8001826:	b29a      	uxth	r2, r3
 8001828:	88bc      	ldrh	r4, [r7, #4]
 800182a:	787b      	ldrb	r3, [r7, #1]
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	4623      	mov	r3, r4
 8001830:	f7ff fe47 	bl	80014c2 <SSD1306_DrawLine>

    while (x < y) {
 8001834:	e079      	b.n	800192a <SSD1306_DrawFilledCircle+0x19e>
        if (f >= 0) {
 8001836:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0e      	blt.n	800185c <SSD1306_DrawFilledCircle+0xd0>
            y--;
 800183e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001842:	b29b      	uxth	r3, r3
 8001844:	3b01      	subs	r3, #1
 8001846:	b29b      	uxth	r3, r3
 8001848:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800184a:	8a7b      	ldrh	r3, [r7, #18]
 800184c:	3302      	adds	r3, #2
 800184e:	b29b      	uxth	r3, r3
 8001850:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8001852:	8afa      	ldrh	r2, [r7, #22]
 8001854:	8a7b      	ldrh	r3, [r7, #18]
 8001856:	4413      	add	r3, r2
 8001858:	b29b      	uxth	r3, r3
 800185a:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800185c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001860:	b29b      	uxth	r3, r3
 8001862:	3301      	adds	r3, #1
 8001864:	b29b      	uxth	r3, r3
 8001866:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001868:	8abb      	ldrh	r3, [r7, #20]
 800186a:	3302      	adds	r3, #2
 800186c:	b29b      	uxth	r3, r3
 800186e:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8001870:	8afa      	ldrh	r2, [r7, #22]
 8001872:	8abb      	ldrh	r3, [r7, #20]
 8001874:	4413      	add	r3, r2
 8001876:	b29b      	uxth	r3, r3
 8001878:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 800187a:	88fa      	ldrh	r2, [r7, #6]
 800187c:	8a3b      	ldrh	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	b298      	uxth	r0, r3
 8001882:	88ba      	ldrh	r2, [r7, #4]
 8001884:	89fb      	ldrh	r3, [r7, #14]
 8001886:	4413      	add	r3, r2
 8001888:	b299      	uxth	r1, r3
 800188a:	88fa      	ldrh	r2, [r7, #6]
 800188c:	8a3b      	ldrh	r3, [r7, #16]
 800188e:	4413      	add	r3, r2
 8001890:	b29c      	uxth	r4, r3
 8001892:	88ba      	ldrh	r2, [r7, #4]
 8001894:	89fb      	ldrh	r3, [r7, #14]
 8001896:	4413      	add	r3, r2
 8001898:	b29a      	uxth	r2, r3
 800189a:	787b      	ldrb	r3, [r7, #1]
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	4613      	mov	r3, r2
 80018a0:	4622      	mov	r2, r4
 80018a2:	f7ff fe0e 	bl	80014c2 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 80018a6:	88fa      	ldrh	r2, [r7, #6]
 80018a8:	8a3b      	ldrh	r3, [r7, #16]
 80018aa:	4413      	add	r3, r2
 80018ac:	b298      	uxth	r0, r3
 80018ae:	88ba      	ldrh	r2, [r7, #4]
 80018b0:	89fb      	ldrh	r3, [r7, #14]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	b299      	uxth	r1, r3
 80018b6:	88fa      	ldrh	r2, [r7, #6]
 80018b8:	8a3b      	ldrh	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	b29c      	uxth	r4, r3
 80018be:	88ba      	ldrh	r2, [r7, #4]
 80018c0:	89fb      	ldrh	r3, [r7, #14]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	787b      	ldrb	r3, [r7, #1]
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	4613      	mov	r3, r2
 80018cc:	4622      	mov	r2, r4
 80018ce:	f7ff fdf8 	bl	80014c2 <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 80018d2:	88fa      	ldrh	r2, [r7, #6]
 80018d4:	89fb      	ldrh	r3, [r7, #14]
 80018d6:	4413      	add	r3, r2
 80018d8:	b298      	uxth	r0, r3
 80018da:	88ba      	ldrh	r2, [r7, #4]
 80018dc:	8a3b      	ldrh	r3, [r7, #16]
 80018de:	4413      	add	r3, r2
 80018e0:	b299      	uxth	r1, r3
 80018e2:	88fa      	ldrh	r2, [r7, #6]
 80018e4:	89fb      	ldrh	r3, [r7, #14]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	b29c      	uxth	r4, r3
 80018ea:	88ba      	ldrh	r2, [r7, #4]
 80018ec:	8a3b      	ldrh	r3, [r7, #16]
 80018ee:	4413      	add	r3, r2
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	787b      	ldrb	r3, [r7, #1]
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	4613      	mov	r3, r2
 80018f8:	4622      	mov	r2, r4
 80018fa:	f7ff fde2 	bl	80014c2 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 80018fe:	88fa      	ldrh	r2, [r7, #6]
 8001900:	89fb      	ldrh	r3, [r7, #14]
 8001902:	4413      	add	r3, r2
 8001904:	b298      	uxth	r0, r3
 8001906:	88ba      	ldrh	r2, [r7, #4]
 8001908:	8a3b      	ldrh	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	b299      	uxth	r1, r3
 800190e:	88fa      	ldrh	r2, [r7, #6]
 8001910:	89fb      	ldrh	r3, [r7, #14]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	b29c      	uxth	r4, r3
 8001916:	88ba      	ldrh	r2, [r7, #4]
 8001918:	8a3b      	ldrh	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	b29a      	uxth	r2, r3
 800191e:	787b      	ldrb	r3, [r7, #1]
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	4613      	mov	r3, r2
 8001924:	4622      	mov	r2, r4
 8001926:	f7ff fdcc 	bl	80014c2 <SSD1306_DrawLine>
    while (x < y) {
 800192a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800192e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001932:	429a      	cmp	r2, r3
 8001934:	f6ff af7f 	blt.w	8001836 <SSD1306_DrawFilledCircle+0xaa>
    }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	371c      	adds	r7, #28
 800193e:	46bd      	mov	sp, r7
 8001940:	bd90      	pop	{r4, r7, pc}

08001942 <SSD1306_Clear>:



void SSD1306_Clear (void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001946:	2000      	movs	r0, #0
 8001948:	f7ff fc88 	bl	800125c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800194c:	f7ff fc58 	bl	8001200 <SSD1306_UpdateScreen>
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <ssd1306_I2C_Init+0x28>)
 800195c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800195e:	e002      	b.n	8001966 <ssd1306_I2C_Init+0x12>
		p--;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f9      	bne.n	8001960 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	0003d090 	.word	0x0003d090

08001980 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b0c7      	sub	sp, #284	; 0x11c
 8001984:	af02      	add	r7, sp, #8
 8001986:	4604      	mov	r4, r0
 8001988:	4608      	mov	r0, r1
 800198a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800198e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001992:	600a      	str	r2, [r1, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800199a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800199e:	4622      	mov	r2, r4
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019a6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80019aa:	4602      	mov	r2, r0
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019b6:	460a      	mov	r2, r1
 80019b8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80019ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80019c2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019c6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80019ca:	7812      	ldrb	r2, [r2, #0]
 80019cc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019d4:	e015      	b.n	8001a02 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80019d6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019da:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019de:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	441a      	add	r2, r3
 80019e6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019ea:	3301      	adds	r3, #1
 80019ec:	7811      	ldrb	r1, [r2, #0]
 80019ee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019f2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80019f6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80019f8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019fc:	3301      	adds	r3, #1
 80019fe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a02:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a0c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001a10:	8812      	ldrh	r2, [r2, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d8df      	bhi.n	80019d6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001a16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a1a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	b299      	uxth	r1, r3
 8001a22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	f107 020c 	add.w	r2, r7, #12
 8001a34:	200a      	movs	r0, #10
 8001a36:	9000      	str	r0, [sp, #0]
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <ssd1306_I2C_WriteMulti+0xc8>)
 8001a3a:	f001 fae5 	bl	8003008 <HAL_I2C_Master_Transmit>
}
 8001a3e:	bf00      	nop
 8001a40:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd90      	pop	{r4, r7, pc}
 8001a48:	20000094 	.word	0x20000094

08001a4c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af02      	add	r7, sp, #8
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
 8001a56:	460b      	mov	r3, r1
 8001a58:	71bb      	strb	r3, [r7, #6]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001a5e:	79bb      	ldrb	r3, [r7, #6]
 8001a60:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a62:	797b      	ldrb	r3, [r7, #5]
 8001a64:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	b299      	uxth	r1, r3
 8001a6a:	f107 020c 	add.w	r2, r7, #12
 8001a6e:	230a      	movs	r3, #10
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2302      	movs	r3, #2
 8001a74:	4803      	ldr	r0, [pc, #12]	; (8001a84 <ssd1306_I2C_Write+0x38>)
 8001a76:	f001 fac7 	bl	8003008 <HAL_I2C_Master_Transmit>
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000094 	.word	0x20000094

08001a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	4a0f      	ldr	r2, [pc, #60]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <NMI_Handler+0x4>

08001ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <HardFault_Handler+0x4>

08001ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <MemManage_Handler+0x4>

08001aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <BusFault_Handler+0x4>

08001af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <UsageFault_Handler+0x4>

08001af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b24:	f000 fa64 	bl	8001ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b32:	f004 fd33 	bl	800659c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000540 	.word	0x20000540

08001b40 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <I2C1_EV_IRQHandler+0x10>)
 8001b46:	f001 fc8b 	bl	8003460 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000094 	.word	0x20000094

08001b54 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <I2C1_ER_IRQHandler+0x10>)
 8001b5a:	f001 fdf2 	bl	8003742 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000094 	.word	0x20000094

08001b68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <USART1_IRQHandler+0x10>)
 8001b6e:	f005 faff 	bl	8007170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200005f4 	.word	0x200005f4

08001b7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_EMPTY_Pin);
 8001b80:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b84:	f001 f8e4 	bl	8002d50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <DMA2_Stream2_IRQHandler+0x10>)
 8001b92:	f000 fcc3 	bl	800251c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000638 	.word	0x20000638

08001ba0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <DMA2_Stream7_IRQHandler+0x10>)
 8001ba6:	f000 fcb9 	bl	800251c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000698 	.word	0x20000698

08001bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bbc:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <_sbrk+0x5c>)
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <_sbrk+0x60>)
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <_sbrk+0x64>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <_sbrk+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d207      	bcs.n	8001bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be4:	f006 f98a 	bl	8007efc <__errno>
 8001be8:	4603      	mov	r3, r0
 8001bea:	220c      	movs	r2, #12
 8001bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bf2:	e009      	b.n	8001c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <_sbrk+0x64>)
 8001c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20010000 	.word	0x20010000
 8001c14:	00000400 	.word	0x00000400
 8001c18:	2000053c 	.word	0x2000053c
 8001c1c:	20000710 	.word	0x20000710

08001c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <SystemInit+0x20>)
 8001c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <SystemInit+0x20>)
 8001c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	463b      	mov	r3, r7
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <MX_TIM1_Init+0x9c>)
 8001c62:	4a20      	ldr	r2, [pc, #128]	; (8001ce4 <MX_TIM1_Init+0xa0>)
 8001c64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8001c66:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <MX_TIM1_Init+0x9c>)
 8001c68:	2209      	movs	r2, #9
 8001c6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <MX_TIM1_Init+0x9c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000;
 8001c72:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <MX_TIM1_Init+0x9c>)
 8001c74:	f247 5230 	movw	r2, #30000	; 0x7530
 8001c78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <MX_TIM1_Init+0x9c>)
 8001c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <MX_TIM1_Init+0x9c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <MX_TIM1_Init+0x9c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c8e:	4814      	ldr	r0, [pc, #80]	; (8001ce0 <MX_TIM1_Init+0x9c>)
 8001c90:	f004 fbc6 	bl	8006420 <HAL_TIM_Base_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001c9a:	f7ff f915 	bl	8000ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ca4:	f107 0308 	add.w	r3, r7, #8
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <MX_TIM1_Init+0x9c>)
 8001cac:	f004 fd9e 	bl	80067ec <HAL_TIM_ConfigClockSource>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001cb6:	f7ff f907 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4806      	ldr	r0, [pc, #24]	; (8001ce0 <MX_TIM1_Init+0x9c>)
 8001cc8:	f005 f978 	bl	8006fbc <HAL_TIMEx_MasterConfigSynchronization>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001cd2:	f7ff f8f9 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000540 	.word	0x20000540
 8001ce4:	40010000 	.word	0x40010000

08001ce8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <HAL_TIM_Base_MspInit+0x48>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d115      	bne.n	8001d26 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_TIM_Base_MspInit+0x4c>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <HAL_TIM_Base_MspInit+0x4c>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_TIM_Base_MspInit+0x4c>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2101      	movs	r1, #1
 8001d1a:	2019      	movs	r0, #25
 8001d1c:	f000 fa87 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d20:	2019      	movs	r0, #25
 8001d22:	f000 faa0 	bl	8002266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40010000 	.word	0x40010000
 8001d34:	40023800 	.word	0x40023800

08001d38 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d3e:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <MX_USART1_UART_Init+0x50>)
 8001d40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d5e:	220c      	movs	r2, #12
 8001d60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d70:	f005 f9b0 	bl	80070d4 <HAL_UART_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d7a:	f7ff f8a5 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200005f4 	.word	0x200005f4
 8001d88:	40011000 	.word	0x40011000

08001d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a4c      	ldr	r2, [pc, #304]	; (8001edc <HAL_UART_MspInit+0x150>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	f040 8092 	bne.w	8001ed4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	4b4a      	ldr	r3, [pc, #296]	; (8001ee0 <HAL_UART_MspInit+0x154>)
 8001db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db8:	4a49      	ldr	r2, [pc, #292]	; (8001ee0 <HAL_UART_MspInit+0x154>)
 8001dba:	f043 0310 	orr.w	r3, r3, #16
 8001dbe:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc0:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <HAL_UART_MspInit+0x154>)
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	4b43      	ldr	r3, [pc, #268]	; (8001ee0 <HAL_UART_MspInit+0x154>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	4a42      	ldr	r2, [pc, #264]	; (8001ee0 <HAL_UART_MspInit+0x154>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6313      	str	r3, [r2, #48]	; 0x30
 8001ddc:	4b40      	ldr	r3, [pc, #256]	; (8001ee0 <HAL_UART_MspInit+0x154>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001de8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df6:	2303      	movs	r3, #3
 8001df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	4837      	ldr	r0, [pc, #220]	; (8001ee4 <HAL_UART_MspInit+0x158>)
 8001e06:	f000 fdd3 	bl	80029b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001e0a:	4b37      	ldr	r3, [pc, #220]	; (8001ee8 <HAL_UART_MspInit+0x15c>)
 8001e0c:	4a37      	ldr	r2, [pc, #220]	; (8001eec <HAL_UART_MspInit+0x160>)
 8001e0e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001e10:	4b35      	ldr	r3, [pc, #212]	; (8001ee8 <HAL_UART_MspInit+0x15c>)
 8001e12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e16:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e18:	4b33      	ldr	r3, [pc, #204]	; (8001ee8 <HAL_UART_MspInit+0x15c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e1e:	4b32      	ldr	r3, [pc, #200]	; (8001ee8 <HAL_UART_MspInit+0x15c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e24:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <HAL_UART_MspInit+0x15c>)
 8001e26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e2a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <HAL_UART_MspInit+0x15c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e32:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_UART_MspInit+0x15c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001e38:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <HAL_UART_MspInit+0x15c>)
 8001e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e3e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e40:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <HAL_UART_MspInit+0x15c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e46:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <HAL_UART_MspInit+0x15c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e4c:	4826      	ldr	r0, [pc, #152]	; (8001ee8 <HAL_UART_MspInit+0x15c>)
 8001e4e:	f000 fa25 	bl	800229c <HAL_DMA_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001e58:	f7ff f836 	bl	8000ec8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a22      	ldr	r2, [pc, #136]	; (8001ee8 <HAL_UART_MspInit+0x15c>)
 8001e60:	639a      	str	r2, [r3, #56]	; 0x38
 8001e62:	4a21      	ldr	r2, [pc, #132]	; (8001ee8 <HAL_UART_MspInit+0x15c>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001e68:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <HAL_UART_MspInit+0x164>)
 8001e6a:	4a22      	ldr	r2, [pc, #136]	; (8001ef4 <HAL_UART_MspInit+0x168>)
 8001e6c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001e6e:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <HAL_UART_MspInit+0x164>)
 8001e70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e74:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e76:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <HAL_UART_MspInit+0x164>)
 8001e78:	2240      	movs	r2, #64	; 0x40
 8001e7a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <HAL_UART_MspInit+0x164>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e82:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_UART_MspInit+0x164>)
 8001e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e88:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_UART_MspInit+0x164>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_UART_MspInit+0x164>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <HAL_UART_MspInit+0x164>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <HAL_UART_MspInit+0x164>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <HAL_UART_MspInit+0x164>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001ea8:	4811      	ldr	r0, [pc, #68]	; (8001ef0 <HAL_UART_MspInit+0x164>)
 8001eaa:	f000 f9f7 	bl	800229c <HAL_DMA_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001eb4:	f7ff f808 	bl	8000ec8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a0d      	ldr	r2, [pc, #52]	; (8001ef0 <HAL_UART_MspInit+0x164>)
 8001ebc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ebe:	4a0c      	ldr	r2, [pc, #48]	; (8001ef0 <HAL_UART_MspInit+0x164>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	2025      	movs	r0, #37	; 0x25
 8001eca:	f000 f9b0 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ece:	2025      	movs	r0, #37	; 0x25
 8001ed0:	f000 f9c9 	bl	8002266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3728      	adds	r7, #40	; 0x28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40011000 	.word	0x40011000
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	20000638 	.word	0x20000638
 8001eec:	40026440 	.word	0x40026440
 8001ef0:	20000698 	.word	0x20000698
 8001ef4:	400264b8 	.word	0x400264b8

08001ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001efc:	480d      	ldr	r0, [pc, #52]	; (8001f34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001efe:	490e      	ldr	r1, [pc, #56]	; (8001f38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f00:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f04:	e002      	b.n	8001f0c <LoopCopyDataInit>

08001f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0a:	3304      	adds	r3, #4

08001f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f10:	d3f9      	bcc.n	8001f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f12:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f14:	4c0b      	ldr	r4, [pc, #44]	; (8001f44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f18:	e001      	b.n	8001f1e <LoopFillZerobss>

08001f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f1c:	3204      	adds	r2, #4

08001f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f20:	d3fb      	bcc.n	8001f1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f22:	f7ff fe7d 	bl	8001c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f26:	f005 ffef 	bl	8007f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f2a:	f7fe fc65 	bl	80007f8 <main>
  bx  lr    
 8001f2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f38:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001f3c:	08009048 	.word	0x08009048
  ldr r2, =_sbss
 8001f40:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001f44:	2000070c 	.word	0x2000070c

08001f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f48:	e7fe      	b.n	8001f48 <ADC_IRQHandler>
	...

08001f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_Init+0x40>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0d      	ldr	r2, [pc, #52]	; (8001f8c <HAL_Init+0x40>)
 8001f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_Init+0x40>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <HAL_Init+0x40>)
 8001f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_Init+0x40>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <HAL_Init+0x40>)
 8001f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f74:	2003      	movs	r0, #3
 8001f76:	f000 f94f 	bl	8002218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7a:	200f      	movs	r0, #15
 8001f7c:	f000 f808 	bl	8001f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f80:	f7ff fd82 	bl	8001a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023c00 	.word	0x40023c00

08001f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_InitTick+0x54>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_InitTick+0x58>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 f967 	bl	8002282 <HAL_SYSTICK_Config>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00e      	b.n	8001fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b0f      	cmp	r3, #15
 8001fc2:	d80a      	bhi.n	8001fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fcc:	f000 f92f 	bl	800222e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd0:	4a06      	ldr	r2, [pc, #24]	; (8001fec <HAL_InitTick+0x5c>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e000      	b.n	8001fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000008 	.word	0x20000008
 8001fe8:	20000010 	.word	0x20000010
 8001fec:	2000000c 	.word	0x2000000c

08001ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_IncTick+0x20>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_IncTick+0x24>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_IncTick+0x24>)
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000010 	.word	0x20000010
 8002014:	200006f8 	.word	0x200006f8

08002018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return uwTick;
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <HAL_GetTick+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	200006f8 	.word	0x200006f8

08002030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff ffee 	bl	8002018 <HAL_GetTick>
 800203c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002048:	d005      	beq.n	8002056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <HAL_Delay+0x44>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4413      	add	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002056:	bf00      	nop
 8002058:	f7ff ffde 	bl	8002018 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	429a      	cmp	r2, r3
 8002066:	d8f7      	bhi.n	8002058 <HAL_Delay+0x28>
  {
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000010 	.word	0x20000010

08002078 <__NVIC_SetPriorityGrouping>:
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002094:	4013      	ands	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020aa:	4a04      	ldr	r2, [pc, #16]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	60d3      	str	r3, [r2, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_GetPriorityGrouping>:
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <__NVIC_GetPriorityGrouping+0x18>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	f003 0307 	and.w	r3, r3, #7
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_EnableIRQ>:
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	db0b      	blt.n	8002106 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	4907      	ldr	r1, [pc, #28]	; (8002114 <__NVIC_EnableIRQ+0x38>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	2001      	movs	r0, #1
 80020fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000e100 	.word	0xe000e100

08002118 <__NVIC_SetPriority>:
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	2b00      	cmp	r3, #0
 800212a:	db0a      	blt.n	8002142 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	490c      	ldr	r1, [pc, #48]	; (8002164 <__NVIC_SetPriority+0x4c>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	0112      	lsls	r2, r2, #4
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	440b      	add	r3, r1
 800213c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002140:	e00a      	b.n	8002158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4908      	ldr	r1, [pc, #32]	; (8002168 <__NVIC_SetPriority+0x50>)
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	3b04      	subs	r3, #4
 8002150:	0112      	lsls	r2, r2, #4
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	440b      	add	r3, r1
 8002156:	761a      	strb	r2, [r3, #24]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000e100 	.word	0xe000e100
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <NVIC_EncodePriority>:
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f1c3 0307 	rsb	r3, r3, #7
 8002186:	2b04      	cmp	r3, #4
 8002188:	bf28      	it	cs
 800218a:	2304      	movcs	r3, #4
 800218c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3304      	adds	r3, #4
 8002192:	2b06      	cmp	r3, #6
 8002194:	d902      	bls.n	800219c <NVIC_EncodePriority+0x30>
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3b03      	subs	r3, #3
 800219a:	e000      	b.n	800219e <NVIC_EncodePriority+0x32>
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43da      	mvns	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	401a      	ands	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	43d9      	mvns	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	4313      	orrs	r3, r2
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e4:	d301      	bcc.n	80021ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00f      	b.n	800220a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <SysTick_Config+0x40>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f2:	210f      	movs	r1, #15
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021f8:	f7ff ff8e 	bl	8002118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <SysTick_Config+0x40>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002202:	4b04      	ldr	r3, [pc, #16]	; (8002214 <SysTick_Config+0x40>)
 8002204:	2207      	movs	r2, #7
 8002206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	e000e010 	.word	0xe000e010

08002218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff29 	bl	8002078 <__NVIC_SetPriorityGrouping>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002240:	f7ff ff3e 	bl	80020c0 <__NVIC_GetPriorityGrouping>
 8002244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f7ff ff8e 	bl	800216c <NVIC_EncodePriority>
 8002250:	4602      	mov	r2, r0
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff5d 	bl	8002118 <__NVIC_SetPriority>
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff31 	bl	80020dc <__NVIC_EnableIRQ>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffa2 	bl	80021d4 <SysTick_Config>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff feb6 	bl	8002018 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e099      	b.n	80023ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d8:	e00f      	b.n	80022fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022da:	f7ff fe9d 	bl	8002018 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d908      	bls.n	80022fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2203      	movs	r2, #3
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e078      	b.n	80023ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1e8      	bne.n	80022da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4b38      	ldr	r3, [pc, #224]	; (80023f4 <HAL_DMA_Init+0x158>)
 8002314:	4013      	ands	r3, r2
 8002316:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002326:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4313      	orrs	r3, r2
 800234a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	2b04      	cmp	r3, #4
 8002352:	d107      	bne.n	8002364 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	4313      	orrs	r3, r2
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4313      	orrs	r3, r2
 8002362:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f023 0307 	bic.w	r3, r3, #7
 800237a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	4313      	orrs	r3, r2
 8002384:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	2b04      	cmp	r3, #4
 800238c:	d117      	bne.n	80023be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00e      	beq.n	80023be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fa89 	bl	80028b8 <DMA_CheckFifoParam>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2240      	movs	r2, #64	; 0x40
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023ba:	2301      	movs	r3, #1
 80023bc:	e016      	b.n	80023ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 fa40 	bl	800284c <DMA_CalcBaseAndBitshift>
 80023cc:	4603      	mov	r3, r0
 80023ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d4:	223f      	movs	r2, #63	; 0x3f
 80023d6:	409a      	lsls	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	f010803f 	.word	0xf010803f

080023f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002406:	f7ff fe07 	bl	8002018 <HAL_GetTick>
 800240a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d008      	beq.n	800242a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2280      	movs	r2, #128	; 0x80
 800241c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e052      	b.n	80024d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0216 	bic.w	r2, r2, #22
 8002438:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002448:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d103      	bne.n	800245a <HAL_DMA_Abort+0x62>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002456:	2b00      	cmp	r3, #0
 8002458:	d007      	beq.n	800246a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0208 	bic.w	r2, r2, #8
 8002468:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800247a:	e013      	b.n	80024a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800247c:	f7ff fdcc 	bl	8002018 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b05      	cmp	r3, #5
 8002488:	d90c      	bls.n	80024a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2220      	movs	r2, #32
 800248e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2203      	movs	r2, #3
 8002494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e015      	b.n	80024d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1e4      	bne.n	800247c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b6:	223f      	movs	r2, #63	; 0x3f
 80024b8:	409a      	lsls	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d004      	beq.n	80024f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2280      	movs	r2, #128	; 0x80
 80024f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00c      	b.n	8002510 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2205      	movs	r2, #5
 80024fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0201 	bic.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002528:	4b8e      	ldr	r3, [pc, #568]	; (8002764 <HAL_DMA_IRQHandler+0x248>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a8e      	ldr	r2, [pc, #568]	; (8002768 <HAL_DMA_IRQHandler+0x24c>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	0a9b      	lsrs	r3, r3, #10
 8002534:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002546:	2208      	movs	r2, #8
 8002548:	409a      	lsls	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4013      	ands	r3, r2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d01a      	beq.n	8002588 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0204 	bic.w	r2, r2, #4
 800256e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	2208      	movs	r2, #8
 8002576:	409a      	lsls	r2, r3
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	f043 0201 	orr.w	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258c:	2201      	movs	r2, #1
 800258e:	409a      	lsls	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d012      	beq.n	80025be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025aa:	2201      	movs	r2, #1
 80025ac:	409a      	lsls	r2, r3
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b6:	f043 0202 	orr.w	r2, r3, #2
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	2204      	movs	r2, #4
 80025c4:	409a      	lsls	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d012      	beq.n	80025f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00b      	beq.n	80025f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	2204      	movs	r2, #4
 80025e2:	409a      	lsls	r2, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	f043 0204 	orr.w	r2, r3, #4
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	2210      	movs	r2, #16
 80025fa:	409a      	lsls	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d043      	beq.n	800268c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d03c      	beq.n	800268c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	2210      	movs	r2, #16
 8002618:	409a      	lsls	r2, r3
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d018      	beq.n	800265e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d108      	bne.n	800264c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d024      	beq.n	800268c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	4798      	blx	r3
 800264a:	e01f      	b.n	800268c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01b      	beq.n	800268c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	4798      	blx	r3
 800265c:	e016      	b.n	800268c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d107      	bne.n	800267c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0208 	bic.w	r2, r2, #8
 800267a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002690:	2220      	movs	r2, #32
 8002692:	409a      	lsls	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 808f 	beq.w	80027bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8087 	beq.w	80027bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	2220      	movs	r2, #32
 80026b4:	409a      	lsls	r2, r3
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	d136      	bne.n	8002734 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0216 	bic.w	r2, r2, #22
 80026d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <HAL_DMA_IRQHandler+0x1da>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0208 	bic.w	r2, r2, #8
 8002704:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	223f      	movs	r2, #63	; 0x3f
 800270c:	409a      	lsls	r2, r3
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002726:	2b00      	cmp	r3, #0
 8002728:	d07e      	beq.n	8002828 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	4798      	blx	r3
        }
        return;
 8002732:	e079      	b.n	8002828 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d01d      	beq.n	800277e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10d      	bne.n	800276c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	2b00      	cmp	r3, #0
 8002756:	d031      	beq.n	80027bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
 8002760:	e02c      	b.n	80027bc <HAL_DMA_IRQHandler+0x2a0>
 8002762:	bf00      	nop
 8002764:	20000008 	.word	0x20000008
 8002768:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	2b00      	cmp	r3, #0
 8002772:	d023      	beq.n	80027bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
 800277c:	e01e      	b.n	80027bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10f      	bne.n	80027ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0210 	bic.w	r2, r2, #16
 800279a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d032      	beq.n	800282a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d022      	beq.n	8002816 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2205      	movs	r2, #5
 80027d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	3301      	adds	r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d307      	bcc.n	8002804 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f2      	bne.n	80027e8 <HAL_DMA_IRQHandler+0x2cc>
 8002802:	e000      	b.n	8002806 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002804:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
 8002826:	e000      	b.n	800282a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002828:	bf00      	nop
    }
  }
}
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800283e:	b2db      	uxtb	r3, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	3b10      	subs	r3, #16
 800285c:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <DMA_CalcBaseAndBitshift+0x64>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002866:	4a13      	ldr	r2, [pc, #76]	; (80028b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d909      	bls.n	800288e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002882:	f023 0303 	bic.w	r3, r3, #3
 8002886:	1d1a      	adds	r2, r3, #4
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	659a      	str	r2, [r3, #88]	; 0x58
 800288c:	e007      	b.n	800289e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	aaaaaaab 	.word	0xaaaaaaab
 80028b4:	08008ffc 	.word	0x08008ffc

080028b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d11f      	bne.n	8002912 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d856      	bhi.n	8002986 <DMA_CheckFifoParam+0xce>
 80028d8:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <DMA_CheckFifoParam+0x28>)
 80028da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028de:	bf00      	nop
 80028e0:	080028f1 	.word	0x080028f1
 80028e4:	08002903 	.word	0x08002903
 80028e8:	080028f1 	.word	0x080028f1
 80028ec:	08002987 	.word	0x08002987
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d046      	beq.n	800298a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002900:	e043      	b.n	800298a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800290a:	d140      	bne.n	800298e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002910:	e03d      	b.n	800298e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291a:	d121      	bne.n	8002960 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d837      	bhi.n	8002992 <DMA_CheckFifoParam+0xda>
 8002922:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <DMA_CheckFifoParam+0x70>)
 8002924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002928:	08002939 	.word	0x08002939
 800292c:	0800293f 	.word	0x0800293f
 8002930:	08002939 	.word	0x08002939
 8002934:	08002951 	.word	0x08002951
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      break;
 800293c:	e030      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d025      	beq.n	8002996 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800294e:	e022      	b.n	8002996 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002958:	d11f      	bne.n	800299a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800295e:	e01c      	b.n	800299a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d903      	bls.n	800296e <DMA_CheckFifoParam+0xb6>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d003      	beq.n	8002974 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800296c:	e018      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
      break;
 8002972:	e015      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00e      	beq.n	800299e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      break;
 8002984:	e00b      	b.n	800299e <DMA_CheckFifoParam+0xe6>
      break;
 8002986:	bf00      	nop
 8002988:	e00a      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 800298a:	bf00      	nop
 800298c:	e008      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 800298e:	bf00      	nop
 8002990:	e006      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002992:	bf00      	nop
 8002994:	e004      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002996:	bf00      	nop
 8002998:	e002      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800299a:	bf00      	nop
 800299c:	e000      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 800299e:	bf00      	nop
    }
  } 
  
  return status; 
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	e159      	b.n	8002c80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	f040 8148 	bne.w	8002c7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d005      	beq.n	8002a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d130      	bne.n	8002a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 0201 	and.w	r2, r3, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d017      	beq.n	8002aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d123      	bne.n	8002af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	08da      	lsrs	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3208      	adds	r2, #8
 8002aee:	69b9      	ldr	r1, [r7, #24]
 8002af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0203 	and.w	r2, r3, #3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80a2 	beq.w	8002c7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4b57      	ldr	r3, [pc, #348]	; (8002c98 <HAL_GPIO_Init+0x2e8>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	4a56      	ldr	r2, [pc, #344]	; (8002c98 <HAL_GPIO_Init+0x2e8>)
 8002b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b44:	6453      	str	r3, [r2, #68]	; 0x44
 8002b46:	4b54      	ldr	r3, [pc, #336]	; (8002c98 <HAL_GPIO_Init+0x2e8>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b52:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <HAL_GPIO_Init+0x2ec>)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a49      	ldr	r2, [pc, #292]	; (8002ca0 <HAL_GPIO_Init+0x2f0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d019      	beq.n	8002bb2 <HAL_GPIO_Init+0x202>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a48      	ldr	r2, [pc, #288]	; (8002ca4 <HAL_GPIO_Init+0x2f4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_GPIO_Init+0x1fe>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a47      	ldr	r2, [pc, #284]	; (8002ca8 <HAL_GPIO_Init+0x2f8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00d      	beq.n	8002baa <HAL_GPIO_Init+0x1fa>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a46      	ldr	r2, [pc, #280]	; (8002cac <HAL_GPIO_Init+0x2fc>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d007      	beq.n	8002ba6 <HAL_GPIO_Init+0x1f6>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a45      	ldr	r2, [pc, #276]	; (8002cb0 <HAL_GPIO_Init+0x300>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_GPIO_Init+0x1f2>
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	e008      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002ba2:	2307      	movs	r3, #7
 8002ba4:	e006      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e004      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e002      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <HAL_GPIO_Init+0x204>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	f002 0203 	and.w	r2, r2, #3
 8002bba:	0092      	lsls	r2, r2, #2
 8002bbc:	4093      	lsls	r3, r2
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc4:	4935      	ldr	r1, [pc, #212]	; (8002c9c <HAL_GPIO_Init+0x2ec>)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	089b      	lsrs	r3, r3, #2
 8002bca:	3302      	adds	r3, #2
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bf6:	4a2f      	ldr	r2, [pc, #188]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bfc:	4b2d      	ldr	r3, [pc, #180]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c20:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c26:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4a:	4a1a      	ldr	r2, [pc, #104]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c50:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c74:	4a0f      	ldr	r2, [pc, #60]	; (8002cb4 <HAL_GPIO_Init+0x304>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b0f      	cmp	r3, #15
 8002c84:	f67f aea2 	bls.w	80029cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40013800 	.word	0x40013800
 8002ca0:	40020000 	.word	0x40020000
 8002ca4:	40020400 	.word	0x40020400
 8002ca8:	40020800 	.word	0x40020800
 8002cac:	40020c00 	.word	0x40020c00
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40013c00 	.word	0x40013c00

08002cb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	887b      	ldrh	r3, [r7, #2]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	e001      	b.n	8002cda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cf8:	787b      	ldrb	r3, [r7, #1]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d04:	e003      	b.n	8002d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	041a      	lsls	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	619a      	str	r2, [r3, #24]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d2c:	887a      	ldrh	r2, [r7, #2]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4013      	ands	r3, r2
 8002d32:	041a      	lsls	r2, r3, #16
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	43d9      	mvns	r1, r3
 8002d38:	887b      	ldrh	r3, [r7, #2]
 8002d3a:	400b      	ands	r3, r1
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	619a      	str	r2, [r3, #24]
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d5a:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d006      	beq.n	8002d74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d66:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fe2e 	bl	80009d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40013c00 	.word	0x40013c00

08002d80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e12b      	b.n	8002fea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fd fcb8 	bl	800071c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2224      	movs	r2, #36	; 0x24
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002de2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002de4:	f002 fe50 	bl	8005a88 <HAL_RCC_GetPCLK1Freq>
 8002de8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4a81      	ldr	r2, [pc, #516]	; (8002ff4 <HAL_I2C_Init+0x274>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d807      	bhi.n	8002e04 <HAL_I2C_Init+0x84>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4a80      	ldr	r2, [pc, #512]	; (8002ff8 <HAL_I2C_Init+0x278>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	bf94      	ite	ls
 8002dfc:	2301      	movls	r3, #1
 8002dfe:	2300      	movhi	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	e006      	b.n	8002e12 <HAL_I2C_Init+0x92>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a7d      	ldr	r2, [pc, #500]	; (8002ffc <HAL_I2C_Init+0x27c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	bf94      	ite	ls
 8002e0c:	2301      	movls	r3, #1
 8002e0e:	2300      	movhi	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e0e7      	b.n	8002fea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4a78      	ldr	r2, [pc, #480]	; (8003000 <HAL_I2C_Init+0x280>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	0c9b      	lsrs	r3, r3, #18
 8002e24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4a6a      	ldr	r2, [pc, #424]	; (8002ff4 <HAL_I2C_Init+0x274>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d802      	bhi.n	8002e54 <HAL_I2C_Init+0xd4>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	3301      	adds	r3, #1
 8002e52:	e009      	b.n	8002e68 <HAL_I2C_Init+0xe8>
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	4a69      	ldr	r2, [pc, #420]	; (8003004 <HAL_I2C_Init+0x284>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	099b      	lsrs	r3, r3, #6
 8002e66:	3301      	adds	r3, #1
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	495c      	ldr	r1, [pc, #368]	; (8002ff4 <HAL_I2C_Init+0x274>)
 8002e84:	428b      	cmp	r3, r1
 8002e86:	d819      	bhi.n	8002ebc <HAL_I2C_Init+0x13c>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1e59      	subs	r1, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e96:	1c59      	adds	r1, r3, #1
 8002e98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e9c:	400b      	ands	r3, r1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_I2C_Init+0x138>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1e59      	subs	r1, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb6:	e051      	b.n	8002f5c <HAL_I2C_Init+0x1dc>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	e04f      	b.n	8002f5c <HAL_I2C_Init+0x1dc>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d111      	bne.n	8002ee8 <HAL_I2C_Init+0x168>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	1e58      	subs	r0, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6859      	ldr	r1, [r3, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	440b      	add	r3, r1
 8002ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf0c      	ite	eq
 8002ee0:	2301      	moveq	r3, #1
 8002ee2:	2300      	movne	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	e012      	b.n	8002f0e <HAL_I2C_Init+0x18e>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1e58      	subs	r0, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	0099      	lsls	r1, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efe:	3301      	adds	r3, #1
 8002f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_I2C_Init+0x196>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e022      	b.n	8002f5c <HAL_I2C_Init+0x1dc>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10e      	bne.n	8002f3c <HAL_I2C_Init+0x1bc>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1e58      	subs	r0, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6859      	ldr	r1, [r3, #4]
 8002f26:	460b      	mov	r3, r1
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	440b      	add	r3, r1
 8002f2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f3a:	e00f      	b.n	8002f5c <HAL_I2C_Init+0x1dc>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1e58      	subs	r0, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6859      	ldr	r1, [r3, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	0099      	lsls	r1, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	6809      	ldr	r1, [r1, #0]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69da      	ldr	r2, [r3, #28]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6911      	ldr	r1, [r2, #16]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68d2      	ldr	r2, [r2, #12]
 8002f96:	4311      	orrs	r1, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	000186a0 	.word	0x000186a0
 8002ff8:	001e847f 	.word	0x001e847f
 8002ffc:	003d08ff 	.word	0x003d08ff
 8003000:	431bde83 	.word	0x431bde83
 8003004:	10624dd3 	.word	0x10624dd3

08003008 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af02      	add	r7, sp, #8
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	461a      	mov	r2, r3
 8003014:	460b      	mov	r3, r1
 8003016:	817b      	strh	r3, [r7, #10]
 8003018:	4613      	mov	r3, r2
 800301a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800301c:	f7fe fffc 	bl	8002018 <HAL_GetTick>
 8003020:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b20      	cmp	r3, #32
 800302c:	f040 80e0 	bne.w	80031f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	2319      	movs	r3, #25
 8003036:	2201      	movs	r2, #1
 8003038:	4970      	ldr	r1, [pc, #448]	; (80031fc <HAL_I2C_Master_Transmit+0x1f4>)
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f001 ff20 	bl	8004e80 <I2C_WaitOnFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003046:	2302      	movs	r3, #2
 8003048:	e0d3      	b.n	80031f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_I2C_Master_Transmit+0x50>
 8003054:	2302      	movs	r3, #2
 8003056:	e0cc      	b.n	80031f2 <HAL_I2C_Master_Transmit+0x1ea>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b01      	cmp	r3, #1
 800306c:	d007      	beq.n	800307e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0201 	orr.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800308c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2221      	movs	r2, #33	; 0x21
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2210      	movs	r2, #16
 800309a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	893a      	ldrh	r2, [r7, #8]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a50      	ldr	r2, [pc, #320]	; (8003200 <HAL_I2C_Master_Transmit+0x1f8>)
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030c0:	8979      	ldrh	r1, [r7, #10]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	6a3a      	ldr	r2, [r7, #32]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f001 fdb0 	bl	8004c2c <I2C_MasterRequestWrite>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e08d      	b.n	80031f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030ec:	e066      	b.n	80031bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	6a39      	ldr	r1, [r7, #32]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f001 ff9a 	bl	800502c <I2C_WaitOnTXEFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00d      	beq.n	800311a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	2b04      	cmp	r3, #4
 8003104:	d107      	bne.n	8003116 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003114:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e06b      	b.n	80031f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	781a      	ldrb	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b04      	cmp	r3, #4
 8003156:	d11b      	bne.n	8003190 <HAL_I2C_Master_Transmit+0x188>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	2b00      	cmp	r3, #0
 800315e:	d017      	beq.n	8003190 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	781a      	ldrb	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	6a39      	ldr	r1, [r7, #32]
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f001 ff8a 	bl	80050ae <I2C_WaitOnBTFFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00d      	beq.n	80031bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d107      	bne.n	80031b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e01a      	b.n	80031f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d194      	bne.n	80030ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e000      	b.n	80031f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
  }
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	00100002 	.word	0x00100002
 8003200:	ffff0000 	.word	0xffff0000

08003204 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	460b      	mov	r3, r1
 8003212:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003214:	f7fe ff00 	bl	8002018 <HAL_GetTick>
 8003218:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b20      	cmp	r3, #32
 8003228:	f040 8111 	bne.w	800344e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2319      	movs	r3, #25
 8003232:	2201      	movs	r2, #1
 8003234:	4988      	ldr	r1, [pc, #544]	; (8003458 <HAL_I2C_IsDeviceReady+0x254>)
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f001 fe22 	bl	8004e80 <I2C_WaitOnFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003242:	2302      	movs	r3, #2
 8003244:	e104      	b.n	8003450 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_I2C_IsDeviceReady+0x50>
 8003250:	2302      	movs	r3, #2
 8003252:	e0fd      	b.n	8003450 <HAL_I2C_IsDeviceReady+0x24c>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	d007      	beq.n	800327a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0201 	orr.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003288:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2224      	movs	r2, #36	; 0x24
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a70      	ldr	r2, [pc, #448]	; (800345c <HAL_I2C_IsDeviceReady+0x258>)
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f001 fde0 	bl	8004e80 <I2C_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d4:	d103      	bne.n	80032de <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e0b6      	b.n	8003450 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032e2:	897b      	ldrh	r3, [r7, #10]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80032f2:	f7fe fe91 	bl	8002018 <HAL_GetTick>
 80032f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b02      	cmp	r3, #2
 8003304:	bf0c      	ite	eq
 8003306:	2301      	moveq	r3, #1
 8003308:	2300      	movne	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331c:	bf0c      	ite	eq
 800331e:	2301      	moveq	r3, #1
 8003320:	2300      	movne	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003326:	e025      	b.n	8003374 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003328:	f7fe fe76 	bl	8002018 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d302      	bcc.n	800333e <HAL_I2C_IsDeviceReady+0x13a>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d103      	bne.n	8003346 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	22a0      	movs	r2, #160	; 0xa0
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b02      	cmp	r3, #2
 8003352:	bf0c      	ite	eq
 8003354:	2301      	moveq	r3, #1
 8003356:	2300      	movne	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336a:	bf0c      	ite	eq
 800336c:	2301      	moveq	r3, #1
 800336e:	2300      	movne	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2ba0      	cmp	r3, #160	; 0xa0
 800337e:	d005      	beq.n	800338c <HAL_I2C_IsDeviceReady+0x188>
 8003380:	7dfb      	ldrb	r3, [r7, #23]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d102      	bne.n	800338c <HAL_I2C_IsDeviceReady+0x188>
 8003386:	7dbb      	ldrb	r3, [r7, #22]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0cd      	beq.n	8003328 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d129      	bne.n	80033f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	2319      	movs	r3, #25
 80033ce:	2201      	movs	r2, #1
 80033d0:	4921      	ldr	r1, [pc, #132]	; (8003458 <HAL_I2C_IsDeviceReady+0x254>)
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f001 fd54 	bl	8004e80 <I2C_WaitOnFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e036      	b.n	8003450 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e02c      	b.n	8003450 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003404:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800340e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2319      	movs	r3, #25
 8003416:	2201      	movs	r2, #1
 8003418:	490f      	ldr	r1, [pc, #60]	; (8003458 <HAL_I2C_IsDeviceReady+0x254>)
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f001 fd30 	bl	8004e80 <I2C_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e012      	b.n	8003450 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	3301      	adds	r3, #1
 800342e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	429a      	cmp	r2, r3
 8003436:	f4ff af32 	bcc.w	800329e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800344e:	2302      	movs	r3, #2
  }
}
 8003450:	4618      	mov	r0, r3
 8003452:	3720      	adds	r7, #32
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	00100002 	.word	0x00100002
 800345c:	ffff0000 	.word	0xffff0000

08003460 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003480:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003488:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	2b10      	cmp	r3, #16
 800348e:	d003      	beq.n	8003498 <HAL_I2C_EV_IRQHandler+0x38>
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	f040 80c1 	bne.w	800361a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10d      	bne.n	80034ce <HAL_I2C_EV_IRQHandler+0x6e>
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80034b8:	d003      	beq.n	80034c2 <HAL_I2C_EV_IRQHandler+0x62>
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80034c0:	d101      	bne.n	80034c6 <HAL_I2C_EV_IRQHandler+0x66>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x68>
 80034c6:	2300      	movs	r3, #0
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	f000 8132 	beq.w	8003732 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00c      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0x92>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	0a5b      	lsrs	r3, r3, #9
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d006      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f001 fe84 	bl	80051f2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fd83 	bl	8003ff6 <I2C_Master_SB>
 80034f0:	e092      	b.n	8003618 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	08db      	lsrs	r3, r3, #3
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <HAL_I2C_EV_IRQHandler+0xb2>
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	0a5b      	lsrs	r3, r3, #9
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fdf9 	bl	8004102 <I2C_Master_ADD10>
 8003510:	e082      	b.n	8003618 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <HAL_I2C_EV_IRQHandler+0xd2>
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	0a5b      	lsrs	r3, r3, #9
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fe13 	bl	8004156 <I2C_Master_ADDR>
 8003530:	e072      	b.n	8003618 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	089b      	lsrs	r3, r3, #2
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d03b      	beq.n	80035b6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800354c:	f000 80f3 	beq.w	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	09db      	lsrs	r3, r3, #7
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00f      	beq.n	800357c <HAL_I2C_EV_IRQHandler+0x11c>
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	0a9b      	lsrs	r3, r3, #10
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d009      	beq.n	800357c <HAL_I2C_EV_IRQHandler+0x11c>
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	089b      	lsrs	r3, r3, #2
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d103      	bne.n	800357c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f9f3 	bl	8003960 <I2C_MasterTransmit_TXE>
 800357a:	e04d      	b.n	8003618 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	089b      	lsrs	r3, r3, #2
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80d6 	beq.w	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	0a5b      	lsrs	r3, r3, #9
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80cf 	beq.w	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003598:	7bbb      	ldrb	r3, [r7, #14]
 800359a:	2b21      	cmp	r3, #33	; 0x21
 800359c:	d103      	bne.n	80035a6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fa7a 	bl	8003a98 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035a4:	e0c7      	b.n	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b40      	cmp	r3, #64	; 0x40
 80035aa:	f040 80c4 	bne.w	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fae8 	bl	8003b84 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035b4:	e0bf      	b.n	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c4:	f000 80b7 	beq.w	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	099b      	lsrs	r3, r3, #6
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00f      	beq.n	80035f4 <HAL_I2C_EV_IRQHandler+0x194>
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	0a9b      	lsrs	r3, r3, #10
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <HAL_I2C_EV_IRQHandler+0x194>
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	089b      	lsrs	r3, r3, #2
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d103      	bne.n	80035f4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fb5d 	bl	8003cac <I2C_MasterReceive_RXNE>
 80035f2:	e011      	b.n	8003618 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	089b      	lsrs	r3, r3, #2
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 809a 	beq.w	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	0a5b      	lsrs	r3, r3, #9
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8093 	beq.w	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fc06 	bl	8003e22 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003616:	e08e      	b.n	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003618:	e08d      	b.n	8003736 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	e007      	b.n	800363c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d012      	beq.n	800366e <HAL_I2C_EV_IRQHandler+0x20e>
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	0a5b      	lsrs	r3, r3, #9
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00c      	beq.n	800366e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003664:	69b9      	ldr	r1, [r7, #24]
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 ffc4 	bl	80045f4 <I2C_Slave_ADDR>
 800366c:	e066      	b.n	800373c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_I2C_EV_IRQHandler+0x22e>
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	0a5b      	lsrs	r3, r3, #9
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fffe 	bl	8004688 <I2C_Slave_STOPF>
 800368c:	e056      	b.n	800373c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800368e:	7bbb      	ldrb	r3, [r7, #14]
 8003690:	2b21      	cmp	r3, #33	; 0x21
 8003692:	d002      	beq.n	800369a <HAL_I2C_EV_IRQHandler+0x23a>
 8003694:	7bbb      	ldrb	r3, [r7, #14]
 8003696:	2b29      	cmp	r3, #41	; 0x29
 8003698:	d125      	bne.n	80036e6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	09db      	lsrs	r3, r3, #7
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00f      	beq.n	80036c6 <HAL_I2C_EV_IRQHandler+0x266>
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	0a9b      	lsrs	r3, r3, #10
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_I2C_EV_IRQHandler+0x266>
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	089b      	lsrs	r3, r3, #2
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d103      	bne.n	80036c6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 feda 	bl	8004478 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036c4:	e039      	b.n	800373a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d033      	beq.n	800373a <HAL_I2C_EV_IRQHandler+0x2da>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	0a5b      	lsrs	r3, r3, #9
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d02d      	beq.n	800373a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 ff07 	bl	80044f2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036e4:	e029      	b.n	800373a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	099b      	lsrs	r3, r3, #6
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00f      	beq.n	8003712 <HAL_I2C_EV_IRQHandler+0x2b2>
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	0a9b      	lsrs	r3, r3, #10
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_I2C_EV_IRQHandler+0x2b2>
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d103      	bne.n	8003712 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 ff12 	bl	8004534 <I2C_SlaveReceive_RXNE>
 8003710:	e014      	b.n	800373c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00e      	beq.n	800373c <HAL_I2C_EV_IRQHandler+0x2dc>
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	0a5b      	lsrs	r3, r3, #9
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 ff40 	bl	80045b0 <I2C_SlaveReceive_BTF>
 8003730:	e004      	b.n	800373c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003732:	bf00      	nop
 8003734:	e002      	b.n	800373c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003736:	bf00      	nop
 8003738:	e000      	b.n	800373c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800373a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b08a      	sub	sp, #40	; 0x28
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800375a:	2300      	movs	r3, #0
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003764:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00e      	beq.n	8003790 <HAL_I2C_ER_IRQHandler+0x4e>
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d008      	beq.n	8003790 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800378e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	0a5b      	lsrs	r3, r3, #9
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00e      	beq.n	80037ba <HAL_I2C_ER_IRQHandler+0x78>
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	0a1b      	lsrs	r3, r3, #8
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	f043 0302 	orr.w	r3, r3, #2
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80037b8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	0a9b      	lsrs	r3, r3, #10
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d03f      	beq.n	8003846 <HAL_I2C_ER_IRQHandler+0x104>
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	0a1b      	lsrs	r3, r3, #8
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d039      	beq.n	8003846 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80037d2:	7efb      	ldrb	r3, [r7, #27]
 80037d4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037da:	b29b      	uxth	r3, r3
 80037dc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80037ec:	7ebb      	ldrb	r3, [r7, #26]
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	d112      	bne.n	8003818 <HAL_I2C_ER_IRQHandler+0xd6>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10f      	bne.n	8003818 <HAL_I2C_ER_IRQHandler+0xd6>
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	2b21      	cmp	r3, #33	; 0x21
 80037fc:	d008      	beq.n	8003810 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80037fe:	7cfb      	ldrb	r3, [r7, #19]
 8003800:	2b29      	cmp	r3, #41	; 0x29
 8003802:	d005      	beq.n	8003810 <HAL_I2C_ER_IRQHandler+0xce>
 8003804:	7cfb      	ldrb	r3, [r7, #19]
 8003806:	2b28      	cmp	r3, #40	; 0x28
 8003808:	d106      	bne.n	8003818 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b21      	cmp	r3, #33	; 0x21
 800380e:	d103      	bne.n	8003818 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f001 f869 	bl	80048e8 <I2C_Slave_AF>
 8003816:	e016      	b.n	8003846 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003820:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	f043 0304 	orr.w	r3, r3, #4
 8003828:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800382a:	7efb      	ldrb	r3, [r7, #27]
 800382c:	2b10      	cmp	r3, #16
 800382e:	d002      	beq.n	8003836 <HAL_I2C_ER_IRQHandler+0xf4>
 8003830:	7efb      	ldrb	r3, [r7, #27]
 8003832:	2b40      	cmp	r3, #64	; 0x40
 8003834:	d107      	bne.n	8003846 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003844:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	0adb      	lsrs	r3, r3, #11
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00e      	beq.n	8003870 <HAL_I2C_ER_IRQHandler+0x12e>
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	0a1b      	lsrs	r3, r3, #8
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	f043 0308 	orr.w	r3, r3, #8
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800386e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f001 f8a0 	bl	80049c8 <I2C_ITError>
  }
}
 8003888:	bf00      	nop
 800388a:	3728      	adds	r7, #40	; 0x28
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
 80038ec:	4613      	mov	r3, r2
 80038ee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003976:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003982:	2b00      	cmp	r3, #0
 8003984:	d150      	bne.n	8003a28 <I2C_MasterTransmit_TXE+0xc8>
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	2b21      	cmp	r3, #33	; 0x21
 800398a:	d14d      	bne.n	8003a28 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b08      	cmp	r3, #8
 8003990:	d01d      	beq.n	80039ce <I2C_MasterTransmit_TXE+0x6e>
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b20      	cmp	r3, #32
 8003996:	d01a      	beq.n	80039ce <I2C_MasterTransmit_TXE+0x6e>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800399e:	d016      	beq.n	80039ce <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039ae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2211      	movs	r2, #17
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7ff ff62 	bl	8003890 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039cc:	e060      	b.n	8003a90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039dc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d107      	bne.n	8003a18 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ff7d 	bl	8003910 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a16:	e03b      	b.n	8003a90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ff35 	bl	8003890 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a26:	e033      	b.n	8003a90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b21      	cmp	r3, #33	; 0x21
 8003a2c:	d005      	beq.n	8003a3a <I2C_MasterTransmit_TXE+0xda>
 8003a2e:	7bbb      	ldrb	r3, [r7, #14]
 8003a30:	2b40      	cmp	r3, #64	; 0x40
 8003a32:	d12d      	bne.n	8003a90 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	2b22      	cmp	r3, #34	; 0x22
 8003a38:	d12a      	bne.n	8003a90 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d108      	bne.n	8003a56 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a52:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003a54:	e01c      	b.n	8003a90 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b40      	cmp	r3, #64	; 0x40
 8003a60:	d103      	bne.n	8003a6a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f88e 	bl	8003b84 <I2C_MemoryTransmit_TXE_BTF>
}
 8003a68:	e012      	b.n	8003a90 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	781a      	ldrb	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a8e:	e7ff      	b.n	8003a90 <I2C_MasterTransmit_TXE+0x130>
 8003a90:	bf00      	nop
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b21      	cmp	r3, #33	; 0x21
 8003ab0:	d164      	bne.n	8003b7c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d012      	beq.n	8003ae2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	781a      	ldrb	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003ae0:	e04c      	b.n	8003b7c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d01d      	beq.n	8003b24 <I2C_MasterTransmit_BTF+0x8c>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d01a      	beq.n	8003b24 <I2C_MasterTransmit_BTF+0x8c>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003af4:	d016      	beq.n	8003b24 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b04:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2211      	movs	r2, #17
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff feb7 	bl	8003890 <HAL_I2C_MasterTxCpltCallback>
}
 8003b22:	e02b      	b.n	8003b7c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b32:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b42:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b40      	cmp	r3, #64	; 0x40
 8003b5c:	d107      	bne.n	8003b6e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff fed2 	bl	8003910 <HAL_I2C_MemTxCpltCallback>
}
 8003b6c:	e006      	b.n	8003b7c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff fe8a 	bl	8003890 <HAL_I2C_MasterTxCpltCallback>
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b92:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d11d      	bne.n	8003bd8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d10b      	bne.n	8003bbc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb4:	1c9a      	adds	r2, r3, #2
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003bba:	e073      	b.n	8003ca4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	121b      	asrs	r3, r3, #8
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bd6:	e065      	b.n	8003ca4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d10b      	bne.n	8003bf8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bf6:	e055      	b.n	8003ca4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d151      	bne.n	8003ca4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	2b22      	cmp	r3, #34	; 0x22
 8003c04:	d10d      	bne.n	8003c22 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c14:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c20:	e040      	b.n	8003ca4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d015      	beq.n	8003c58 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	2b21      	cmp	r3, #33	; 0x21
 8003c30:	d112      	bne.n	8003c58 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	781a      	ldrb	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c56:	e025      	b.n	8003ca4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d120      	bne.n	8003ca4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	2b21      	cmp	r3, #33	; 0x21
 8003c66:	d11d      	bne.n	8003ca4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c76:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c86:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff fe36 	bl	8003910 <HAL_I2C_MemTxCpltCallback>
}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b22      	cmp	r3, #34	; 0x22
 8003cbe:	f040 80ac 	bne.w	8003e1a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d921      	bls.n	8003d14 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	f040 808c 	bne.w	8003e1a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d10:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003d12:	e082      	b.n	8003e1a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d075      	beq.n	8003e08 <I2C_MasterReceive_RXNE+0x15c>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d002      	beq.n	8003d28 <I2C_MasterReceive_RXNE+0x7c>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d16f      	bne.n	8003e08 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f001 fa01 	bl	8005130 <I2C_WaitOnSTOPRequestThroughIT>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d142      	bne.n	8003dba <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d42:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d52:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d10a      	bne.n	8003da4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff fdc1 	bl	8003924 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003da2:	e03a      	b.n	8003e1a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2212      	movs	r2, #18
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff fd76 	bl	80038a4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003db8:	e02f      	b.n	8003e1a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dc8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff fd99 	bl	8003938 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e06:	e008      	b.n	8003e1a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e16:	605a      	str	r2, [r3, #4]
}
 8003e18:	e7ff      	b.n	8003e1a <I2C_MasterReceive_RXNE+0x16e>
 8003e1a:	bf00      	nop
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d11b      	bne.n	8003e72 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e48:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003e70:	e0bd      	b.n	8003fee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d129      	bne.n	8003ed0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d00a      	beq.n	8003ea8 <I2C_MasterReceive_BTF+0x86>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d007      	beq.n	8003ea8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ece:	e08e      	b.n	8003fee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d176      	bne.n	8003fc8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d002      	beq.n	8003ee6 <I2C_MasterReceive_BTF+0xc4>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b10      	cmp	r3, #16
 8003ee4:	d108      	bne.n	8003ef8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e019      	b.n	8003f2c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d002      	beq.n	8003f04 <I2C_MasterReceive_BTF+0xe2>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d108      	bne.n	8003f16 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	e00a      	b.n	8003f2c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b10      	cmp	r3, #16
 8003f1a:	d007      	beq.n	8003f2c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f86:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	d10a      	bne.n	8003fb2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff fcba 	bl	8003924 <HAL_I2C_MemRxCpltCallback>
}
 8003fb0:	e01d      	b.n	8003fee <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2212      	movs	r2, #18
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff fc6f 	bl	80038a4 <HAL_I2C_MasterRxCpltCallback>
}
 8003fc6:	e012      	b.n	8003fee <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003fee:	bf00      	nop
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	d117      	bne.n	800403a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004016:	b2db      	uxtb	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004022:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004024:	e067      	b.n	80040f6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	b2da      	uxtb	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	611a      	str	r2, [r3, #16]
}
 8004038:	e05d      	b.n	80040f6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004042:	d133      	bne.n	80040ac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b21      	cmp	r3, #33	; 0x21
 800404e:	d109      	bne.n	8004064 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004054:	b2db      	uxtb	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004060:	611a      	str	r2, [r3, #16]
 8004062:	e008      	b.n	8004076 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	b2db      	uxtb	r3, r3
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	b2da      	uxtb	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407a:	2b00      	cmp	r3, #0
 800407c:	d004      	beq.n	8004088 <I2C_Master_SB+0x92>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d108      	bne.n	800409a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	2b00      	cmp	r3, #0
 800408e:	d032      	beq.n	80040f6 <I2C_Master_SB+0x100>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d02d      	beq.n	80040f6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040a8:	605a      	str	r2, [r3, #4]
}
 80040aa:	e024      	b.n	80040f6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10e      	bne.n	80040d2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	11db      	asrs	r3, r3, #7
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f003 0306 	and.w	r3, r3, #6
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f063 030f 	orn	r3, r3, #15
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	611a      	str	r2, [r3, #16]
}
 80040d0:	e011      	b.n	80040f6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d10d      	bne.n	80040f6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	b29b      	uxth	r3, r3
 80040e0:	11db      	asrs	r3, r3, #7
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f003 0306 	and.w	r3, r3, #6
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	f063 030e 	orn	r3, r3, #14
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	611a      	str	r2, [r3, #16]
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	b2da      	uxtb	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411a:	2b00      	cmp	r3, #0
 800411c:	d004      	beq.n	8004128 <I2C_Master_ADD10+0x26>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d108      	bne.n	800413a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00c      	beq.n	800414a <I2C_Master_ADD10+0x48>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d007      	beq.n	800414a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004148:	605a      	str	r2, [r3, #4]
  }
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004156:	b480      	push	{r7}
 8004158:	b091      	sub	sp, #68	; 0x44
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004164:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b22      	cmp	r3, #34	; 0x22
 800417e:	f040 8169 	bne.w	8004454 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10f      	bne.n	80041aa <I2C_Master_ADDR+0x54>
 800418a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d10b      	bne.n	80041aa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004192:	2300      	movs	r3, #0
 8004194:	633b      	str	r3, [r7, #48]	; 0x30
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	633b      	str	r3, [r7, #48]	; 0x30
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	633b      	str	r3, [r7, #48]	; 0x30
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	e160      	b.n	800446c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d11d      	bne.n	80041ee <I2C_Master_ADDR+0x98>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041ba:	d118      	bne.n	80041ee <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041bc:	2300      	movs	r3, #0
 80041be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	651a      	str	r2, [r3, #80]	; 0x50
 80041ec:	e13e      	b.n	800446c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d113      	bne.n	8004220 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f8:	2300      	movs	r3, #0
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	e115      	b.n	800444c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b01      	cmp	r3, #1
 8004228:	f040 808a 	bne.w	8004340 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800422c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004232:	d137      	bne.n	80042a4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004242:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800424e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004252:	d113      	bne.n	800427c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004262:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004264:	2300      	movs	r3, #0
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	627b      	str	r3, [r7, #36]	; 0x24
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	e0e7      	b.n	800444c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800427c:	2300      	movs	r3, #0
 800427e:	623b      	str	r3, [r7, #32]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	623b      	str	r3, [r7, #32]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	623b      	str	r3, [r7, #32]
 8004290:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	e0d3      	b.n	800444c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80042a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d02e      	beq.n	8004308 <I2C_Master_ADDR+0x1b2>
 80042aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ac:	2b20      	cmp	r3, #32
 80042ae:	d02b      	beq.n	8004308 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80042b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b2:	2b12      	cmp	r3, #18
 80042b4:	d102      	bne.n	80042bc <I2C_Master_ADDR+0x166>
 80042b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d125      	bne.n	8004308 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80042bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d00e      	beq.n	80042e0 <I2C_Master_ADDR+0x18a>
 80042c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d00b      	beq.n	80042e0 <I2C_Master_ADDR+0x18a>
 80042c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ca:	2b10      	cmp	r3, #16
 80042cc:	d008      	beq.n	80042e0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	e007      	b.n	80042f0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042ee:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f0:	2300      	movs	r3, #0
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	e0a1      	b.n	800444c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004316:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004318:	2300      	movs	r3, #0
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	61bb      	str	r3, [r7, #24]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e085      	b.n	800444c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d14d      	bne.n	80043e6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434c:	2b04      	cmp	r3, #4
 800434e:	d016      	beq.n	800437e <I2C_Master_ADDR+0x228>
 8004350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004352:	2b02      	cmp	r3, #2
 8004354:	d013      	beq.n	800437e <I2C_Master_ADDR+0x228>
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	2b10      	cmp	r3, #16
 800435a:	d010      	beq.n	800437e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800436a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	e007      	b.n	800438e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800438c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439c:	d117      	bne.n	80043ce <I2C_Master_ADDR+0x278>
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043a4:	d00b      	beq.n	80043be <I2C_Master_ADDR+0x268>
 80043a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d008      	beq.n	80043be <I2C_Master_ADDR+0x268>
 80043ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d005      	beq.n	80043be <I2C_Master_ADDR+0x268>
 80043b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b4:	2b10      	cmp	r3, #16
 80043b6:	d002      	beq.n	80043be <I2C_Master_ADDR+0x268>
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d107      	bne.n	80043ce <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	e032      	b.n	800444c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043f4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004404:	d117      	bne.n	8004436 <I2C_Master_ADDR+0x2e0>
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800440c:	d00b      	beq.n	8004426 <I2C_Master_ADDR+0x2d0>
 800440e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004410:	2b01      	cmp	r3, #1
 8004412:	d008      	beq.n	8004426 <I2C_Master_ADDR+0x2d0>
 8004414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004416:	2b08      	cmp	r3, #8
 8004418:	d005      	beq.n	8004426 <I2C_Master_ADDR+0x2d0>
 800441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441c:	2b10      	cmp	r3, #16
 800441e:	d002      	beq.n	8004426 <I2C_Master_ADDR+0x2d0>
 8004420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004422:	2b20      	cmp	r3, #32
 8004424:	d107      	bne.n	8004436 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004434:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004436:	2300      	movs	r3, #0
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004452:	e00b      	b.n	800446c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
}
 800446a:	e7ff      	b.n	800446c <I2C_Master_ADDR+0x316>
 800446c:	bf00      	nop
 800446e:	3744      	adds	r7, #68	; 0x44
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004486:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d02b      	beq.n	80044ea <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	781a      	ldrb	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d114      	bne.n	80044ea <I2C_SlaveTransmit_TXE+0x72>
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b29      	cmp	r3, #41	; 0x29
 80044c4:	d111      	bne.n	80044ea <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2221      	movs	r2, #33	; 0x21
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2228      	movs	r2, #40	; 0x28
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff f9e7 	bl	80038b8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044ea:	bf00      	nop
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d011      	beq.n	8004528 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	781a      	ldrb	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004542:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d02c      	beq.n	80045a8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d114      	bne.n	80045a8 <I2C_SlaveReceive_RXNE+0x74>
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	2b2a      	cmp	r3, #42	; 0x2a
 8004582:	d111      	bne.n	80045a8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004592:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2222      	movs	r2, #34	; 0x22
 8004598:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2228      	movs	r2, #40	; 0x28
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff f992 	bl	80038cc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d012      	beq.n	80045e8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80045fe:	2300      	movs	r3, #0
 8004600:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800460e:	2b28      	cmp	r3, #40	; 0x28
 8004610:	d127      	bne.n	8004662 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004620:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	089b      	lsrs	r3, r3, #2
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800462e:	2301      	movs	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	09db      	lsrs	r3, r3, #7
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d103      	bne.n	8004646 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	81bb      	strh	r3, [r7, #12]
 8004644:	e002      	b.n	800464c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004654:	89ba      	ldrh	r2, [r7, #12]
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	4619      	mov	r1, r3
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff f940 	bl	80038e0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004660:	e00e      	b.n	8004680 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004662:	2300      	movs	r3, #0
 8004664:	60bb      	str	r3, [r7, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004696:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046a6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80046a8:	2300      	movs	r3, #0
 80046aa:	60bb      	str	r3, [r7, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e4:	d172      	bne.n	80047cc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	2b22      	cmp	r3, #34	; 0x22
 80046ea:	d002      	beq.n	80046f2 <I2C_Slave_STOPF+0x6a>
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
 80046ee:	2b2a      	cmp	r3, #42	; 0x2a
 80046f0:	d135      	bne.n	800475e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f043 0204 	orr.w	r2, r3, #4
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004724:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	4618      	mov	r0, r3
 800472c:	f7fe f880 	bl	8002830 <HAL_DMA_GetState>
 8004730:	4603      	mov	r3, r0
 8004732:	2b01      	cmp	r3, #1
 8004734:	d049      	beq.n	80047ca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	4a69      	ldr	r2, [pc, #420]	; (80048e0 <I2C_Slave_STOPF+0x258>)
 800473c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	4618      	mov	r0, r3
 8004744:	f7fd fec8 	bl	80024d8 <HAL_DMA_Abort_IT>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d03d      	beq.n	80047ca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004758:	4610      	mov	r0, r2
 800475a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800475c:	e035      	b.n	80047ca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	b29a      	uxth	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f043 0204 	orr.w	r2, r3, #4
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004790:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe f84a 	bl	8002830 <HAL_DMA_GetState>
 800479c:	4603      	mov	r3, r0
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d014      	beq.n	80047cc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a6:	4a4e      	ldr	r2, [pc, #312]	; (80048e0 <I2C_Slave_STOPF+0x258>)
 80047a8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fd fe92 	bl	80024d8 <HAL_DMA_Abort_IT>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047c4:	4610      	mov	r0, r2
 80047c6:	4798      	blx	r3
 80047c8:	e000      	b.n	80047cc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047ca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d03e      	beq.n	8004854 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d112      	bne.n	800480a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004814:	2b40      	cmp	r3, #64	; 0x40
 8004816:	d112      	bne.n	800483e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	f043 0204 	orr.w	r2, r3, #4
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f8b3 	bl	80049c8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004862:	e039      	b.n	80048d8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	2b2a      	cmp	r3, #42	; 0x2a
 8004868:	d109      	bne.n	800487e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2228      	movs	r2, #40	; 0x28
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7ff f827 	bl	80038cc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b28      	cmp	r3, #40	; 0x28
 8004888:	d111      	bne.n	80048ae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a15      	ldr	r2, [pc, #84]	; (80048e4 <I2C_Slave_STOPF+0x25c>)
 800488e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff f828 	bl	80038fc <HAL_I2C_ListenCpltCallback>
}
 80048ac:	e014      	b.n	80048d8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	2b22      	cmp	r3, #34	; 0x22
 80048b4:	d002      	beq.n	80048bc <I2C_Slave_STOPF+0x234>
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	2b22      	cmp	r3, #34	; 0x22
 80048ba:	d10d      	bne.n	80048d8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fe fffa 	bl	80038cc <HAL_I2C_SlaveRxCpltCallback>
}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	08004d31 	.word	0x08004d31
 80048e4:	ffff0000 	.word	0xffff0000

080048e8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b08      	cmp	r3, #8
 8004902:	d002      	beq.n	800490a <I2C_Slave_AF+0x22>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b20      	cmp	r3, #32
 8004908:	d129      	bne.n	800495e <I2C_Slave_AF+0x76>
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	2b28      	cmp	r3, #40	; 0x28
 800490e:	d126      	bne.n	800495e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a2c      	ldr	r2, [pc, #176]	; (80049c4 <I2C_Slave_AF+0xdc>)
 8004914:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004924:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800492e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fe ffd0 	bl	80038fc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800495c:	e02e      	b.n	80049bc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	2b21      	cmp	r3, #33	; 0x21
 8004962:	d126      	bne.n	80049b2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <I2C_Slave_AF+0xdc>)
 8004968:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2221      	movs	r2, #33	; 0x21
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800498e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004998:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fe ff84 	bl	80038b8 <HAL_I2C_SlaveTxCpltCallback>
}
 80049b0:	e004      	b.n	80049bc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049ba:	615a      	str	r2, [r3, #20]
}
 80049bc:	bf00      	nop
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	ffff0000 	.word	0xffff0000

080049c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049e0:	7bbb      	ldrb	r3, [r7, #14]
 80049e2:	2b10      	cmp	r3, #16
 80049e4:	d002      	beq.n	80049ec <I2C_ITError+0x24>
 80049e6:	7bbb      	ldrb	r3, [r7, #14]
 80049e8:	2b40      	cmp	r3, #64	; 0x40
 80049ea:	d10a      	bne.n	8004a02 <I2C_ITError+0x3a>
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	2b22      	cmp	r3, #34	; 0x22
 80049f0:	d107      	bne.n	8004a02 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a00:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a08:	2b28      	cmp	r3, #40	; 0x28
 8004a0a:	d107      	bne.n	8004a1c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2228      	movs	r2, #40	; 0x28
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a1a:	e015      	b.n	8004a48 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a2a:	d00a      	beq.n	8004a42 <I2C_ITError+0x7a>
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	2b60      	cmp	r3, #96	; 0x60
 8004a30:	d007      	beq.n	8004a42 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a56:	d162      	bne.n	8004b1e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a66:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d020      	beq.n	8004ab8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7a:	4a6a      	ldr	r2, [pc, #424]	; (8004c24 <I2C_ITError+0x25c>)
 8004a7c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fd fd28 	bl	80024d8 <HAL_DMA_Abort_IT>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 8089 	beq.w	8004ba2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0201 	bic.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	4798      	blx	r3
 8004ab6:	e074      	b.n	8004ba2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	4a59      	ldr	r2, [pc, #356]	; (8004c24 <I2C_ITError+0x25c>)
 8004abe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fd fd07 	bl	80024d8 <HAL_DMA_Abort_IT>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d068      	beq.n	8004ba2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	d10b      	bne.n	8004af6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0201 	bic.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4798      	blx	r3
 8004b1c:	e041      	b.n	8004ba2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b60      	cmp	r3, #96	; 0x60
 8004b28:	d125      	bne.n	8004b76 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b42:	2b40      	cmp	r3, #64	; 0x40
 8004b44:	d10b      	bne.n	8004b5e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0201 	bic.w	r2, r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fe feec 	bl	800394c <HAL_I2C_AbortCpltCallback>
 8004b74:	e015      	b.n	8004ba2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b40      	cmp	r3, #64	; 0x40
 8004b82:	d10b      	bne.n	8004b9c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7fe fecb 	bl	8003938 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10e      	bne.n	8004bd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d109      	bne.n	8004bd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d104      	bne.n	8004bd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bde:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d113      	bne.n	8004c1c <I2C_ITError+0x254>
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	2b28      	cmp	r3, #40	; 0x28
 8004bf8:	d110      	bne.n	8004c1c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a0a      	ldr	r2, [pc, #40]	; (8004c28 <I2C_ITError+0x260>)
 8004bfe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fe fe70 	bl	80038fc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	08004d31 	.word	0x08004d31
 8004c28:	ffff0000 	.word	0xffff0000

08004c2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d006      	beq.n	8004c56 <I2C_MasterRequestWrite+0x2a>
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d003      	beq.n	8004c56 <I2C_MasterRequestWrite+0x2a>
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c54:	d108      	bne.n	8004c68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	e00b      	b.n	8004c80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	2b12      	cmp	r3, #18
 8004c6e:	d107      	bne.n	8004c80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f8f7 	bl	8004e80 <I2C_WaitOnFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00d      	beq.n	8004cb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca6:	d103      	bne.n	8004cb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e035      	b.n	8004d20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cbc:	d108      	bne.n	8004cd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cbe:	897b      	ldrh	r3, [r7, #10]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ccc:	611a      	str	r2, [r3, #16]
 8004cce:	e01b      	b.n	8004d08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cd0:	897b      	ldrh	r3, [r7, #10]
 8004cd2:	11db      	asrs	r3, r3, #7
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	f003 0306 	and.w	r3, r3, #6
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	f063 030f 	orn	r3, r3, #15
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	490e      	ldr	r1, [pc, #56]	; (8004d28 <I2C_MasterRequestWrite+0xfc>)
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f91d 	bl	8004f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e010      	b.n	8004d20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cfe:	897b      	ldrh	r3, [r7, #10]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4907      	ldr	r1, [pc, #28]	; (8004d2c <I2C_MasterRequestWrite+0x100>)
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f90d 	bl	8004f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	00010008 	.word	0x00010008
 8004d2c:	00010002 	.word	0x00010002

08004d30 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d48:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d4a:	4b4b      	ldr	r3, [pc, #300]	; (8004e78 <I2C_DMAAbort+0x148>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	08db      	lsrs	r3, r3, #3
 8004d50:	4a4a      	ldr	r2, [pc, #296]	; (8004e7c <I2C_DMAAbort+0x14c>)
 8004d52:	fba2 2303 	umull	r2, r3, r2, r3
 8004d56:	0a1a      	lsrs	r2, r3, #8
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	00da      	lsls	r2, r3, #3
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f043 0220 	orr.w	r2, r3, #32
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004d76:	e00a      	b.n	8004d8e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8c:	d0ea      	beq.n	8004d64 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	2200      	movs	r2, #0
 8004dac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dbc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	2200      	movs	r2, #0
 8004de2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0201 	bic.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b60      	cmp	r3, #96	; 0x60
 8004dfe:	d10e      	bne.n	8004e1e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2200      	movs	r2, #0
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e16:	6978      	ldr	r0, [r7, #20]
 8004e18:	f7fe fd98 	bl	800394c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e1c:	e027      	b.n	8004e6e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e1e:	7cfb      	ldrb	r3, [r7, #19]
 8004e20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e24:	2b28      	cmp	r3, #40	; 0x28
 8004e26:	d117      	bne.n	8004e58 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2228      	movs	r2, #40	; 0x28
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e56:	e007      	b.n	8004e68 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e68:	6978      	ldr	r0, [r7, #20]
 8004e6a:	f7fe fd65 	bl	8003938 <HAL_I2C_ErrorCallback>
}
 8004e6e:	bf00      	nop
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20000008 	.word	0x20000008
 8004e7c:	14f8b589 	.word	0x14f8b589

08004e80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e90:	e025      	b.n	8004ede <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e98:	d021      	beq.n	8004ede <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9a:	f7fd f8bd 	bl	8002018 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d302      	bcc.n	8004eb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d116      	bne.n	8004ede <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f043 0220 	orr.w	r2, r3, #32
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e023      	b.n	8004f26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	0c1b      	lsrs	r3, r3, #16
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d10d      	bne.n	8004f04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	43da      	mvns	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	bf0c      	ite	eq
 8004efa:	2301      	moveq	r3, #1
 8004efc:	2300      	movne	r3, #0
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	461a      	mov	r2, r3
 8004f02:	e00c      	b.n	8004f1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	43da      	mvns	r2, r3
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	bf0c      	ite	eq
 8004f16:	2301      	moveq	r3, #1
 8004f18:	2300      	movne	r3, #0
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d0b6      	beq.n	8004e92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	607a      	str	r2, [r7, #4]
 8004f3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f3c:	e051      	b.n	8004fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f4c:	d123      	bne.n	8004f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f043 0204 	orr.w	r2, r3, #4
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e046      	b.n	8005024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f9c:	d021      	beq.n	8004fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f9e:	f7fd f83b 	bl	8002018 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d302      	bcc.n	8004fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d116      	bne.n	8004fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f043 0220 	orr.w	r2, r3, #32
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e020      	b.n	8005024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	0c1b      	lsrs	r3, r3, #16
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d10c      	bne.n	8005006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	43da      	mvns	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bf14      	ite	ne
 8004ffe:	2301      	movne	r3, #1
 8005000:	2300      	moveq	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	e00b      	b.n	800501e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	43da      	mvns	r2, r3
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	4013      	ands	r3, r2
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	bf14      	ite	ne
 8005018:	2301      	movne	r3, #1
 800501a:	2300      	moveq	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d18d      	bne.n	8004f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005038:	e02d      	b.n	8005096 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 f8aa 	bl	8005194 <I2C_IsAcknowledgeFailed>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e02d      	b.n	80050a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005050:	d021      	beq.n	8005096 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005052:	f7fc ffe1 	bl	8002018 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	429a      	cmp	r2, r3
 8005060:	d302      	bcc.n	8005068 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d116      	bne.n	8005096 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f043 0220 	orr.w	r2, r3, #32
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e007      	b.n	80050a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a0:	2b80      	cmp	r3, #128	; 0x80
 80050a2:	d1ca      	bne.n	800503a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050ba:	e02d      	b.n	8005118 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f869 	bl	8005194 <I2C_IsAcknowledgeFailed>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e02d      	b.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050d2:	d021      	beq.n	8005118 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d4:	f7fc ffa0 	bl	8002018 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d302      	bcc.n	80050ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d116      	bne.n	8005118 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	f043 0220 	orr.w	r2, r3, #32
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e007      	b.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b04      	cmp	r3, #4
 8005124:	d1ca      	bne.n	80050bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800513c:	4b13      	ldr	r3, [pc, #76]	; (800518c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	08db      	lsrs	r3, r3, #3
 8005142:	4a13      	ldr	r2, [pc, #76]	; (8005190 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005144:	fba2 2303 	umull	r2, r3, r2, r3
 8005148:	0a1a      	lsrs	r2, r3, #8
 800514a:	4613      	mov	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3b01      	subs	r3, #1
 8005156:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d107      	bne.n	800516e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	f043 0220 	orr.w	r2, r3, #32
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e008      	b.n	8005180 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800517c:	d0e9      	beq.n	8005152 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	20000008 	.word	0x20000008
 8005190:	14f8b589 	.word	0x14f8b589

08005194 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051aa:	d11b      	bne.n	80051e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	f043 0204 	orr.w	r2, r3, #4
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005202:	d103      	bne.n	800520c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800520a:	e007      	b.n	800521c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005214:	d102      	bne.n	800521c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2208      	movs	r2, #8
 800521a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e267      	b.n	800570a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d075      	beq.n	8005332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005246:	4b88      	ldr	r3, [pc, #544]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b04      	cmp	r3, #4
 8005250:	d00c      	beq.n	800526c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005252:	4b85      	ldr	r3, [pc, #532]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800525a:	2b08      	cmp	r3, #8
 800525c:	d112      	bne.n	8005284 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800525e:	4b82      	ldr	r3, [pc, #520]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800526a:	d10b      	bne.n	8005284 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800526c:	4b7e      	ldr	r3, [pc, #504]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d05b      	beq.n	8005330 <HAL_RCC_OscConfig+0x108>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d157      	bne.n	8005330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e242      	b.n	800570a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528c:	d106      	bne.n	800529c <HAL_RCC_OscConfig+0x74>
 800528e:	4b76      	ldr	r3, [pc, #472]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a75      	ldr	r2, [pc, #468]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 8005294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	e01d      	b.n	80052d8 <HAL_RCC_OscConfig+0xb0>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052a4:	d10c      	bne.n	80052c0 <HAL_RCC_OscConfig+0x98>
 80052a6:	4b70      	ldr	r3, [pc, #448]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a6f      	ldr	r2, [pc, #444]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 80052ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	4b6d      	ldr	r3, [pc, #436]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a6c      	ldr	r2, [pc, #432]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 80052b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	e00b      	b.n	80052d8 <HAL_RCC_OscConfig+0xb0>
 80052c0:	4b69      	ldr	r3, [pc, #420]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a68      	ldr	r2, [pc, #416]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 80052c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	4b66      	ldr	r3, [pc, #408]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a65      	ldr	r2, [pc, #404]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 80052d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d013      	beq.n	8005308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e0:	f7fc fe9a 	bl	8002018 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052e8:	f7fc fe96 	bl	8002018 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b64      	cmp	r3, #100	; 0x64
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e207      	b.n	800570a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052fa:	4b5b      	ldr	r3, [pc, #364]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0f0      	beq.n	80052e8 <HAL_RCC_OscConfig+0xc0>
 8005306:	e014      	b.n	8005332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005308:	f7fc fe86 	bl	8002018 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005310:	f7fc fe82 	bl	8002018 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b64      	cmp	r3, #100	; 0x64
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e1f3      	b.n	800570a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005322:	4b51      	ldr	r3, [pc, #324]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f0      	bne.n	8005310 <HAL_RCC_OscConfig+0xe8>
 800532e:	e000      	b.n	8005332 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d063      	beq.n	8005406 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800533e:	4b4a      	ldr	r3, [pc, #296]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 030c 	and.w	r3, r3, #12
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00b      	beq.n	8005362 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800534a:	4b47      	ldr	r3, [pc, #284]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005352:	2b08      	cmp	r3, #8
 8005354:	d11c      	bne.n	8005390 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005356:	4b44      	ldr	r3, [pc, #272]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d116      	bne.n	8005390 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005362:	4b41      	ldr	r3, [pc, #260]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d005      	beq.n	800537a <HAL_RCC_OscConfig+0x152>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d001      	beq.n	800537a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e1c7      	b.n	800570a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800537a:	4b3b      	ldr	r3, [pc, #236]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	4937      	ldr	r1, [pc, #220]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 800538a:	4313      	orrs	r3, r2
 800538c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800538e:	e03a      	b.n	8005406 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d020      	beq.n	80053da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005398:	4b34      	ldr	r3, [pc, #208]	; (800546c <HAL_RCC_OscConfig+0x244>)
 800539a:	2201      	movs	r2, #1
 800539c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539e:	f7fc fe3b 	bl	8002018 <HAL_GetTick>
 80053a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a4:	e008      	b.n	80053b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053a6:	f7fc fe37 	bl	8002018 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e1a8      	b.n	800570a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053b8:	4b2b      	ldr	r3, [pc, #172]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0f0      	beq.n	80053a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c4:	4b28      	ldr	r3, [pc, #160]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	4925      	ldr	r1, [pc, #148]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	600b      	str	r3, [r1, #0]
 80053d8:	e015      	b.n	8005406 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053da:	4b24      	ldr	r3, [pc, #144]	; (800546c <HAL_RCC_OscConfig+0x244>)
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e0:	f7fc fe1a 	bl	8002018 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053e8:	f7fc fe16 	bl	8002018 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e187      	b.n	800570a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053fa:	4b1b      	ldr	r3, [pc, #108]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f0      	bne.n	80053e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b00      	cmp	r3, #0
 8005410:	d036      	beq.n	8005480 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d016      	beq.n	8005448 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800541a:	4b15      	ldr	r3, [pc, #84]	; (8005470 <HAL_RCC_OscConfig+0x248>)
 800541c:	2201      	movs	r2, #1
 800541e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005420:	f7fc fdfa 	bl	8002018 <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005428:	f7fc fdf6 	bl	8002018 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e167      	b.n	800570a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800543a:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <HAL_RCC_OscConfig+0x240>)
 800543c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0x200>
 8005446:	e01b      	b.n	8005480 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005448:	4b09      	ldr	r3, [pc, #36]	; (8005470 <HAL_RCC_OscConfig+0x248>)
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800544e:	f7fc fde3 	bl	8002018 <HAL_GetTick>
 8005452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005454:	e00e      	b.n	8005474 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005456:	f7fc fddf 	bl	8002018 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d907      	bls.n	8005474 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e150      	b.n	800570a <HAL_RCC_OscConfig+0x4e2>
 8005468:	40023800 	.word	0x40023800
 800546c:	42470000 	.word	0x42470000
 8005470:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005474:	4b88      	ldr	r3, [pc, #544]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 8005476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1ea      	bne.n	8005456 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 8097 	beq.w	80055bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800548e:	2300      	movs	r3, #0
 8005490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005492:	4b81      	ldr	r3, [pc, #516]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10f      	bne.n	80054be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800549e:	2300      	movs	r3, #0
 80054a0:	60bb      	str	r3, [r7, #8]
 80054a2:	4b7d      	ldr	r3, [pc, #500]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	4a7c      	ldr	r2, [pc, #496]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 80054a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ac:	6413      	str	r3, [r2, #64]	; 0x40
 80054ae:	4b7a      	ldr	r3, [pc, #488]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b6:	60bb      	str	r3, [r7, #8]
 80054b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ba:	2301      	movs	r3, #1
 80054bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054be:	4b77      	ldr	r3, [pc, #476]	; (800569c <HAL_RCC_OscConfig+0x474>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d118      	bne.n	80054fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ca:	4b74      	ldr	r3, [pc, #464]	; (800569c <HAL_RCC_OscConfig+0x474>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a73      	ldr	r2, [pc, #460]	; (800569c <HAL_RCC_OscConfig+0x474>)
 80054d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054d6:	f7fc fd9f 	bl	8002018 <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054de:	f7fc fd9b 	bl	8002018 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e10c      	b.n	800570a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f0:	4b6a      	ldr	r3, [pc, #424]	; (800569c <HAL_RCC_OscConfig+0x474>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d106      	bne.n	8005512 <HAL_RCC_OscConfig+0x2ea>
 8005504:	4b64      	ldr	r3, [pc, #400]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 8005506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005508:	4a63      	ldr	r2, [pc, #396]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 800550a:	f043 0301 	orr.w	r3, r3, #1
 800550e:	6713      	str	r3, [r2, #112]	; 0x70
 8005510:	e01c      	b.n	800554c <HAL_RCC_OscConfig+0x324>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	2b05      	cmp	r3, #5
 8005518:	d10c      	bne.n	8005534 <HAL_RCC_OscConfig+0x30c>
 800551a:	4b5f      	ldr	r3, [pc, #380]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 800551c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551e:	4a5e      	ldr	r2, [pc, #376]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 8005520:	f043 0304 	orr.w	r3, r3, #4
 8005524:	6713      	str	r3, [r2, #112]	; 0x70
 8005526:	4b5c      	ldr	r3, [pc, #368]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 8005528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552a:	4a5b      	ldr	r2, [pc, #364]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 800552c:	f043 0301 	orr.w	r3, r3, #1
 8005530:	6713      	str	r3, [r2, #112]	; 0x70
 8005532:	e00b      	b.n	800554c <HAL_RCC_OscConfig+0x324>
 8005534:	4b58      	ldr	r3, [pc, #352]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 8005536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005538:	4a57      	ldr	r2, [pc, #348]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 800553a:	f023 0301 	bic.w	r3, r3, #1
 800553e:	6713      	str	r3, [r2, #112]	; 0x70
 8005540:	4b55      	ldr	r3, [pc, #340]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 8005542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005544:	4a54      	ldr	r2, [pc, #336]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 8005546:	f023 0304 	bic.w	r3, r3, #4
 800554a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d015      	beq.n	8005580 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005554:	f7fc fd60 	bl	8002018 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800555a:	e00a      	b.n	8005572 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800555c:	f7fc fd5c 	bl	8002018 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	f241 3288 	movw	r2, #5000	; 0x1388
 800556a:	4293      	cmp	r3, r2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e0cb      	b.n	800570a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005572:	4b49      	ldr	r3, [pc, #292]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0ee      	beq.n	800555c <HAL_RCC_OscConfig+0x334>
 800557e:	e014      	b.n	80055aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005580:	f7fc fd4a 	bl	8002018 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005586:	e00a      	b.n	800559e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005588:	f7fc fd46 	bl	8002018 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	f241 3288 	movw	r2, #5000	; 0x1388
 8005596:	4293      	cmp	r3, r2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e0b5      	b.n	800570a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800559e:	4b3e      	ldr	r3, [pc, #248]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 80055a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1ee      	bne.n	8005588 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d105      	bne.n	80055bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b0:	4b39      	ldr	r3, [pc, #228]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	4a38      	ldr	r2, [pc, #224]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 80055b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 80a1 	beq.w	8005708 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055c6:	4b34      	ldr	r3, [pc, #208]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 030c 	and.w	r3, r3, #12
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d05c      	beq.n	800568c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d141      	bne.n	800565e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055da:	4b31      	ldr	r3, [pc, #196]	; (80056a0 <HAL_RCC_OscConfig+0x478>)
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e0:	f7fc fd1a 	bl	8002018 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e8:	f7fc fd16 	bl	8002018 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e087      	b.n	800570a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055fa:	4b27      	ldr	r3, [pc, #156]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1f0      	bne.n	80055e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69da      	ldr	r2, [r3, #28]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	019b      	lsls	r3, r3, #6
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561c:	085b      	lsrs	r3, r3, #1
 800561e:	3b01      	subs	r3, #1
 8005620:	041b      	lsls	r3, r3, #16
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005628:	061b      	lsls	r3, r3, #24
 800562a:	491b      	ldr	r1, [pc, #108]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 800562c:	4313      	orrs	r3, r2
 800562e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005630:	4b1b      	ldr	r3, [pc, #108]	; (80056a0 <HAL_RCC_OscConfig+0x478>)
 8005632:	2201      	movs	r2, #1
 8005634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005636:	f7fc fcef 	bl	8002018 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800563e:	f7fc fceb 	bl	8002018 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e05c      	b.n	800570a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005650:	4b11      	ldr	r3, [pc, #68]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0x416>
 800565c:	e054      	b.n	8005708 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800565e:	4b10      	ldr	r3, [pc, #64]	; (80056a0 <HAL_RCC_OscConfig+0x478>)
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005664:	f7fc fcd8 	bl	8002018 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800566c:	f7fc fcd4 	bl	8002018 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e045      	b.n	800570a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800567e:	4b06      	ldr	r3, [pc, #24]	; (8005698 <HAL_RCC_OscConfig+0x470>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1f0      	bne.n	800566c <HAL_RCC_OscConfig+0x444>
 800568a:	e03d      	b.n	8005708 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d107      	bne.n	80056a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e038      	b.n	800570a <HAL_RCC_OscConfig+0x4e2>
 8005698:	40023800 	.word	0x40023800
 800569c:	40007000 	.word	0x40007000
 80056a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056a4:	4b1b      	ldr	r3, [pc, #108]	; (8005714 <HAL_RCC_OscConfig+0x4ec>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d028      	beq.n	8005704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056bc:	429a      	cmp	r2, r3
 80056be:	d121      	bne.n	8005704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d11a      	bne.n	8005704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056d4:	4013      	ands	r3, r2
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056dc:	4293      	cmp	r3, r2
 80056de:	d111      	bne.n	8005704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	085b      	lsrs	r3, r3, #1
 80056ec:	3b01      	subs	r3, #1
 80056ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d107      	bne.n	8005704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005700:	429a      	cmp	r2, r3
 8005702:	d001      	beq.n	8005708 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e000      	b.n	800570a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40023800 	.word	0x40023800

08005718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e0cc      	b.n	80058c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800572c:	4b68      	ldr	r3, [pc, #416]	; (80058d0 <HAL_RCC_ClockConfig+0x1b8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d90c      	bls.n	8005754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800573a:	4b65      	ldr	r3, [pc, #404]	; (80058d0 <HAL_RCC_ClockConfig+0x1b8>)
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005742:	4b63      	ldr	r3, [pc, #396]	; (80058d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d001      	beq.n	8005754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e0b8      	b.n	80058c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d020      	beq.n	80057a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800576c:	4b59      	ldr	r3, [pc, #356]	; (80058d4 <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	4a58      	ldr	r2, [pc, #352]	; (80058d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005776:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0308 	and.w	r3, r3, #8
 8005780:	2b00      	cmp	r3, #0
 8005782:	d005      	beq.n	8005790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005784:	4b53      	ldr	r3, [pc, #332]	; (80058d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	4a52      	ldr	r2, [pc, #328]	; (80058d4 <HAL_RCC_ClockConfig+0x1bc>)
 800578a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800578e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005790:	4b50      	ldr	r3, [pc, #320]	; (80058d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	494d      	ldr	r1, [pc, #308]	; (80058d4 <HAL_RCC_ClockConfig+0x1bc>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d044      	beq.n	8005838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d107      	bne.n	80057c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057b6:	4b47      	ldr	r3, [pc, #284]	; (80058d4 <HAL_RCC_ClockConfig+0x1bc>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d119      	bne.n	80057f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e07f      	b.n	80058c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d003      	beq.n	80057d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d107      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057d6:	4b3f      	ldr	r3, [pc, #252]	; (80058d4 <HAL_RCC_ClockConfig+0x1bc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d109      	bne.n	80057f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e06f      	b.n	80058c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057e6:	4b3b      	ldr	r3, [pc, #236]	; (80058d4 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e067      	b.n	80058c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057f6:	4b37      	ldr	r3, [pc, #220]	; (80058d4 <HAL_RCC_ClockConfig+0x1bc>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f023 0203 	bic.w	r2, r3, #3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	4934      	ldr	r1, [pc, #208]	; (80058d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005804:	4313      	orrs	r3, r2
 8005806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005808:	f7fc fc06 	bl	8002018 <HAL_GetTick>
 800580c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800580e:	e00a      	b.n	8005826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005810:	f7fc fc02 	bl	8002018 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f241 3288 	movw	r2, #5000	; 0x1388
 800581e:	4293      	cmp	r3, r2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e04f      	b.n	80058c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005826:	4b2b      	ldr	r3, [pc, #172]	; (80058d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f003 020c 	and.w	r2, r3, #12
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	429a      	cmp	r2, r3
 8005836:	d1eb      	bne.n	8005810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005838:	4b25      	ldr	r3, [pc, #148]	; (80058d0 <HAL_RCC_ClockConfig+0x1b8>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d20c      	bcs.n	8005860 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005846:	4b22      	ldr	r3, [pc, #136]	; (80058d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800584e:	4b20      	ldr	r3, [pc, #128]	; (80058d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	429a      	cmp	r2, r3
 800585a:	d001      	beq.n	8005860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e032      	b.n	80058c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	d008      	beq.n	800587e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800586c:	4b19      	ldr	r3, [pc, #100]	; (80058d4 <HAL_RCC_ClockConfig+0x1bc>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	4916      	ldr	r1, [pc, #88]	; (80058d4 <HAL_RCC_ClockConfig+0x1bc>)
 800587a:	4313      	orrs	r3, r2
 800587c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0308 	and.w	r3, r3, #8
 8005886:	2b00      	cmp	r3, #0
 8005888:	d009      	beq.n	800589e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800588a:	4b12      	ldr	r3, [pc, #72]	; (80058d4 <HAL_RCC_ClockConfig+0x1bc>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	490e      	ldr	r1, [pc, #56]	; (80058d4 <HAL_RCC_ClockConfig+0x1bc>)
 800589a:	4313      	orrs	r3, r2
 800589c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800589e:	f000 f821 	bl	80058e4 <HAL_RCC_GetSysClockFreq>
 80058a2:	4602      	mov	r2, r0
 80058a4:	4b0b      	ldr	r3, [pc, #44]	; (80058d4 <HAL_RCC_ClockConfig+0x1bc>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	091b      	lsrs	r3, r3, #4
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	490a      	ldr	r1, [pc, #40]	; (80058d8 <HAL_RCC_ClockConfig+0x1c0>)
 80058b0:	5ccb      	ldrb	r3, [r1, r3]
 80058b2:	fa22 f303 	lsr.w	r3, r2, r3
 80058b6:	4a09      	ldr	r2, [pc, #36]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 80058b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058ba:	4b09      	ldr	r3, [pc, #36]	; (80058e0 <HAL_RCC_ClockConfig+0x1c8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fc fb66 	bl	8001f90 <HAL_InitTick>

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	40023c00 	.word	0x40023c00
 80058d4:	40023800 	.word	0x40023800
 80058d8:	08008fe4 	.word	0x08008fe4
 80058dc:	20000008 	.word	0x20000008
 80058e0:	2000000c 	.word	0x2000000c

080058e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058e8:	b090      	sub	sp, #64	; 0x40
 80058ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	637b      	str	r3, [r7, #52]	; 0x34
 80058f0:	2300      	movs	r3, #0
 80058f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f4:	2300      	movs	r3, #0
 80058f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058fc:	4b59      	ldr	r3, [pc, #356]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x180>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f003 030c 	and.w	r3, r3, #12
 8005904:	2b08      	cmp	r3, #8
 8005906:	d00d      	beq.n	8005924 <HAL_RCC_GetSysClockFreq+0x40>
 8005908:	2b08      	cmp	r3, #8
 800590a:	f200 80a1 	bhi.w	8005a50 <HAL_RCC_GetSysClockFreq+0x16c>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <HAL_RCC_GetSysClockFreq+0x34>
 8005912:	2b04      	cmp	r3, #4
 8005914:	d003      	beq.n	800591e <HAL_RCC_GetSysClockFreq+0x3a>
 8005916:	e09b      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005918:	4b53      	ldr	r3, [pc, #332]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x184>)
 800591a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800591c:	e09b      	b.n	8005a56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800591e:	4b53      	ldr	r3, [pc, #332]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x188>)
 8005920:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005922:	e098      	b.n	8005a56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005924:	4b4f      	ldr	r3, [pc, #316]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x180>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800592e:	4b4d      	ldr	r3, [pc, #308]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x180>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d028      	beq.n	800598c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800593a:	4b4a      	ldr	r3, [pc, #296]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x180>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	099b      	lsrs	r3, r3, #6
 8005940:	2200      	movs	r2, #0
 8005942:	623b      	str	r3, [r7, #32]
 8005944:	627a      	str	r2, [r7, #36]	; 0x24
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800594c:	2100      	movs	r1, #0
 800594e:	4b47      	ldr	r3, [pc, #284]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x188>)
 8005950:	fb03 f201 	mul.w	r2, r3, r1
 8005954:	2300      	movs	r3, #0
 8005956:	fb00 f303 	mul.w	r3, r0, r3
 800595a:	4413      	add	r3, r2
 800595c:	4a43      	ldr	r2, [pc, #268]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x188>)
 800595e:	fba0 1202 	umull	r1, r2, r0, r2
 8005962:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005964:	460a      	mov	r2, r1
 8005966:	62ba      	str	r2, [r7, #40]	; 0x28
 8005968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800596a:	4413      	add	r3, r2
 800596c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800596e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005970:	2200      	movs	r2, #0
 8005972:	61bb      	str	r3, [r7, #24]
 8005974:	61fa      	str	r2, [r7, #28]
 8005976:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800597a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800597e:	f7fa fc7f 	bl	8000280 <__aeabi_uldivmod>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4613      	mov	r3, r2
 8005988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800598a:	e053      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800598c:	4b35      	ldr	r3, [pc, #212]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x180>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	099b      	lsrs	r3, r3, #6
 8005992:	2200      	movs	r2, #0
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	617a      	str	r2, [r7, #20]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800599e:	f04f 0b00 	mov.w	fp, #0
 80059a2:	4652      	mov	r2, sl
 80059a4:	465b      	mov	r3, fp
 80059a6:	f04f 0000 	mov.w	r0, #0
 80059aa:	f04f 0100 	mov.w	r1, #0
 80059ae:	0159      	lsls	r1, r3, #5
 80059b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059b4:	0150      	lsls	r0, r2, #5
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	ebb2 080a 	subs.w	r8, r2, sl
 80059be:	eb63 090b 	sbc.w	r9, r3, fp
 80059c2:	f04f 0200 	mov.w	r2, #0
 80059c6:	f04f 0300 	mov.w	r3, #0
 80059ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80059ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80059d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80059d6:	ebb2 0408 	subs.w	r4, r2, r8
 80059da:	eb63 0509 	sbc.w	r5, r3, r9
 80059de:	f04f 0200 	mov.w	r2, #0
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	00eb      	lsls	r3, r5, #3
 80059e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059ec:	00e2      	lsls	r2, r4, #3
 80059ee:	4614      	mov	r4, r2
 80059f0:	461d      	mov	r5, r3
 80059f2:	eb14 030a 	adds.w	r3, r4, sl
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	eb45 030b 	adc.w	r3, r5, fp
 80059fc:	607b      	str	r3, [r7, #4]
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	028b      	lsls	r3, r1, #10
 8005a0e:	4621      	mov	r1, r4
 8005a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a14:	4621      	mov	r1, r4
 8005a16:	028a      	lsls	r2, r1, #10
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1e:	2200      	movs	r2, #0
 8005a20:	60bb      	str	r3, [r7, #8]
 8005a22:	60fa      	str	r2, [r7, #12]
 8005a24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a28:	f7fa fc2a 	bl	8000280 <__aeabi_uldivmod>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4613      	mov	r3, r2
 8005a32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a34:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	0c1b      	lsrs	r3, r3, #16
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	3301      	adds	r3, #1
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a4e:	e002      	b.n	8005a56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a50:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3740      	adds	r7, #64	; 0x40
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a62:	bf00      	nop
 8005a64:	40023800 	.word	0x40023800
 8005a68:	00f42400 	.word	0x00f42400
 8005a6c:	017d7840 	.word	0x017d7840

08005a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a74:	4b03      	ldr	r3, [pc, #12]	; (8005a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a76:	681b      	ldr	r3, [r3, #0]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	20000008 	.word	0x20000008

08005a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a8c:	f7ff fff0 	bl	8005a70 <HAL_RCC_GetHCLKFreq>
 8005a90:	4602      	mov	r2, r0
 8005a92:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	0a9b      	lsrs	r3, r3, #10
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	4903      	ldr	r1, [pc, #12]	; (8005aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a9e:	5ccb      	ldrb	r3, [r1, r3]
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	08008ff4 	.word	0x08008ff4

08005ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ab4:	f7ff ffdc 	bl	8005a70 <HAL_RCC_GetHCLKFreq>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	0b5b      	lsrs	r3, r3, #13
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	4903      	ldr	r1, [pc, #12]	; (8005ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ac6:	5ccb      	ldrb	r3, [r1, r3]
 8005ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40023800 	.word	0x40023800
 8005ad4:	08008ff4 	.word	0x08008ff4

08005ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d105      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d035      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b00:	4b67      	ldr	r3, [pc, #412]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b06:	f7fc fa87 	bl	8002018 <HAL_GetTick>
 8005b0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b0c:	e008      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b0e:	f7fc fa83 	bl	8002018 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e0ba      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b20:	4b60      	ldr	r3, [pc, #384]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1f0      	bne.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	019a      	lsls	r2, r3, #6
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	071b      	lsls	r3, r3, #28
 8005b38:	495a      	ldr	r1, [pc, #360]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b40:	4b57      	ldr	r3, [pc, #348]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b46:	f7fc fa67 	bl	8002018 <HAL_GetTick>
 8005b4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b4e:	f7fc fa63 	bl	8002018 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e09a      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b60:	4b50      	ldr	r3, [pc, #320]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0f0      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8083 	beq.w	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	4b49      	ldr	r3, [pc, #292]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	4a48      	ldr	r2, [pc, #288]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b88:	6413      	str	r3, [r2, #64]	; 0x40
 8005b8a:	4b46      	ldr	r3, [pc, #280]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b96:	4b44      	ldr	r3, [pc, #272]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a43      	ldr	r2, [pc, #268]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ba2:	f7fc fa39 	bl	8002018 <HAL_GetTick>
 8005ba6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005baa:	f7fc fa35 	bl	8002018 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e06c      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005bbc:	4b3a      	ldr	r3, [pc, #232]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0f0      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bc8:	4b36      	ldr	r3, [pc, #216]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d02f      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d028      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005be6:	4b2f      	ldr	r3, [pc, #188]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bf0:	4b2e      	ldr	r3, [pc, #184]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bf6:	4b2d      	ldr	r3, [pc, #180]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005bfc:	4a29      	ldr	r2, [pc, #164]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c02:	4b28      	ldr	r3, [pc, #160]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d114      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c0e:	f7fc fa03 	bl	8002018 <HAL_GetTick>
 8005c12:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c14:	e00a      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c16:	f7fc f9ff 	bl	8002018 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d901      	bls.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e034      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c2c:	4b1d      	ldr	r3, [pc, #116]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d0ee      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c44:	d10d      	bne.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005c46:	4b17      	ldr	r3, [pc, #92]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5a:	4912      	ldr	r1, [pc, #72]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	608b      	str	r3, [r1, #8]
 8005c60:	e005      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005c62:	4b10      	ldr	r3, [pc, #64]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	4a0f      	ldr	r2, [pc, #60]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c68:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c6c:	6093      	str	r3, [r2, #8]
 8005c6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c7a:	490a      	ldr	r1, [pc, #40]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	7c1a      	ldrb	r2, [r3, #16]
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c92:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	42470068 	.word	0x42470068
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	40007000 	.word	0x40007000
 8005cac:	42470e40 	.word	0x42470e40
 8005cb0:	424711e0 	.word	0x424711e0

08005cb4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e066      	b.n	8005d98 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	7f5b      	ldrb	r3, [r3, #29]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d105      	bne.n	8005ce0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fb f960 	bl	8000fa0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	22ca      	movs	r2, #202	; 0xca
 8005cec:	625a      	str	r2, [r3, #36]	; 0x24
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2253      	movs	r2, #83	; 0x53
 8005cf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fa45 	bl	8006186 <RTC_EnterInitMode>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d12c      	bne.n	8005d60 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6812      	ldr	r2, [r2, #0]
 8005d10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d18:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6899      	ldr	r1, [r3, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	68d2      	ldr	r2, [r2, #12]
 8005d40:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6919      	ldr	r1, [r3, #16]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	041a      	lsls	r2, r3, #16
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fa4c 	bl	80061f4 <RTC_ExitInitMode>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d113      	bne.n	8005d8e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d74:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699a      	ldr	r2, [r3, #24]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	22ff      	movs	r2, #255	; 0xff
 8005d94:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005da0:	b590      	push	{r4, r7, lr}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	7f1b      	ldrb	r3, [r3, #28]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d101      	bne.n	8005dbc <HAL_RTC_SetTime+0x1c>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e087      	b.n	8005ecc <HAL_RTC_SetTime+0x12c>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d126      	bne.n	8005e1c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d102      	bne.n	8005de2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2200      	movs	r2, #0
 8005de0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fa29 	bl	800623e <RTC_ByteToBcd2>
 8005dec:	4603      	mov	r3, r0
 8005dee:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 fa22 	bl	800623e <RTC_ByteToBcd2>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005dfe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	789b      	ldrb	r3, [r3, #2]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 fa1a 	bl	800623e <RTC_ByteToBcd2>
 8005e0a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e0c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	78db      	ldrb	r3, [r3, #3]
 8005e14:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	e018      	b.n	8005e4e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d102      	bne.n	8005e30 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	785b      	ldrb	r3, [r3, #1]
 8005e3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e3c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005e42:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	78db      	ldrb	r3, [r3, #3]
 8005e48:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	22ca      	movs	r2, #202	; 0xca
 8005e54:	625a      	str	r2, [r3, #36]	; 0x24
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2253      	movs	r2, #83	; 0x53
 8005e5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f991 	bl	8006186 <RTC_EnterInitMode>
 8005e64:	4603      	mov	r3, r0
 8005e66:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005e68:	7cfb      	ldrb	r3, [r7, #19]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d120      	bne.n	8005eb0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005e78:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005e7c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e8c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6899      	ldr	r1, [r3, #8]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 f9a4 	bl	80061f4 <RTC_ExitInitMode>
 8005eac:	4603      	mov	r3, r0
 8005eae:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005eb0:	7cfb      	ldrb	r3, [r7, #19]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d102      	bne.n	8005ebc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	22ff      	movs	r2, #255	; 0xff
 8005ec2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	771a      	strb	r2, [r3, #28]

  return status;
 8005eca:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd90      	pop	{r4, r7, pc}

08005ed4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005f06:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f0a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	0c1b      	lsrs	r3, r3, #16
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	0a1b      	lsrs	r3, r3, #8
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	0d9b      	lsrs	r3, r3, #22
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d11a      	bne.n	8005f86 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 f98f 	bl	8006278 <RTC_Bcd2ToByte>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	785b      	ldrb	r3, [r3, #1]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 f986 	bl	8006278 <RTC_Bcd2ToByte>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	461a      	mov	r2, r3
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	789b      	ldrb	r3, [r3, #2]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 f97d 	bl	8006278 <RTC_Bcd2ToByte>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	461a      	mov	r2, r3
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f90:	b590      	push	{r4, r7, lr}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	7f1b      	ldrb	r3, [r3, #28]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <HAL_RTC_SetDate+0x1c>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e071      	b.n	8006090 <HAL_RTC_SetDate+0x100>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10e      	bne.n	8005fdc <HAL_RTC_SetDate+0x4c>
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	785b      	ldrb	r3, [r3, #1]
 8005fc2:	f003 0310 	and.w	r3, r3, #16
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d008      	beq.n	8005fdc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	f023 0310 	bic.w	r3, r3, #16
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	330a      	adds	r3, #10
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d11c      	bne.n	800601c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	78db      	ldrb	r3, [r3, #3]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 f929 	bl	800623e <RTC_ByteToBcd2>
 8005fec:	4603      	mov	r3, r0
 8005fee:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 f922 	bl	800623e <RTC_ByteToBcd2>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ffe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	789b      	ldrb	r3, [r3, #2]
 8006004:	4618      	mov	r0, r3
 8006006:	f000 f91a 	bl	800623e <RTC_ByteToBcd2>
 800600a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800600c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	e00e      	b.n	800603a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	78db      	ldrb	r3, [r3, #3]
 8006020:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	785b      	ldrb	r3, [r3, #1]
 8006026:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006028:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800602e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	22ca      	movs	r2, #202	; 0xca
 8006040:	625a      	str	r2, [r3, #36]	; 0x24
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2253      	movs	r2, #83	; 0x53
 8006048:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 f89b 	bl	8006186 <RTC_EnterInitMode>
 8006050:	4603      	mov	r3, r0
 8006052:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006054:	7cfb      	ldrb	r3, [r7, #19]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10c      	bne.n	8006074 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006064:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006068:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 f8c2 	bl	80061f4 <RTC_ExitInitMode>
 8006070:	4603      	mov	r3, r0
 8006072:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006074:	7cfb      	ldrb	r3, [r7, #19]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d102      	bne.n	8006080 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	22ff      	movs	r2, #255	; 0xff
 8006086:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	771a      	strb	r2, [r3, #28]

  return status;
 800608e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006090:	4618      	mov	r0, r3
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	bd90      	pop	{r4, r7, pc}

08006098 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80060b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	0c1b      	lsrs	r3, r3, #16
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	0a1b      	lsrs	r3, r3, #8
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	f003 031f 	and.w	r3, r3, #31
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	0b5b      	lsrs	r3, r3, #13
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d11a      	bne.n	800612c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	78db      	ldrb	r3, [r3, #3]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 f8bc 	bl	8006278 <RTC_Bcd2ToByte>
 8006100:	4603      	mov	r3, r0
 8006102:	461a      	mov	r2, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	785b      	ldrb	r3, [r3, #1]
 800610c:	4618      	mov	r0, r3
 800610e:	f000 f8b3 	bl	8006278 <RTC_Bcd2ToByte>
 8006112:	4603      	mov	r3, r0
 8006114:	461a      	mov	r2, r3
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	789b      	ldrb	r3, [r3, #2]
 800611e:	4618      	mov	r0, r3
 8006120:	f000 f8aa 	bl	8006278 <RTC_Bcd2ToByte>
 8006124:	4603      	mov	r3, r0
 8006126:	461a      	mov	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006150:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006152:	f7fb ff61 	bl	8002018 <HAL_GetTick>
 8006156:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006158:	e009      	b.n	800616e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800615a:	f7fb ff5d 	bl	8002018 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006168:	d901      	bls.n	800616e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e007      	b.n	800617e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0320 	and.w	r3, r3, #32
 8006178:	2b00      	cmp	r3, #0
 800617a:	d0ee      	beq.n	800615a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d122      	bne.n	80061ea <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061b4:	f7fb ff30 	bl	8002018 <HAL_GetTick>
 80061b8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80061ba:	e00c      	b.n	80061d6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061bc:	f7fb ff2c 	bl	8002018 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061ca:	d904      	bls.n	80061d6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2204      	movs	r2, #4
 80061d0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d102      	bne.n	80061ea <RTC_EnterInitMode+0x64>
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d1e8      	bne.n	80061bc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800620e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f003 0320 	and.w	r3, r3, #32
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff ff89 	bl	8006136 <HAL_RTC_WaitForSynchro>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d004      	beq.n	8006234 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2204      	movs	r2, #4
 800622e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006234:	7bfb      	ldrb	r3, [r7, #15]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800623e:	b480      	push	{r7}
 8006240:	b085      	sub	sp, #20
 8006242:	af00      	add	r7, sp, #0
 8006244:	4603      	mov	r3, r0
 8006246:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800624c:	e005      	b.n	800625a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800624e:	7bfb      	ldrb	r3, [r7, #15]
 8006250:	3301      	adds	r3, #1
 8006252:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	3b0a      	subs	r3, #10
 8006258:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	2b09      	cmp	r3, #9
 800625e:	d8f6      	bhi.n	800624e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	b2da      	uxtb	r2, r3
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	4313      	orrs	r3, r2
 800626a:	b2db      	uxtb	r3, r3
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	4603      	mov	r3, r0
 8006280:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	091b      	lsrs	r3, r3, #4
 800628a:	b2db      	uxtb	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	0092      	lsls	r2, r2, #2
 8006290:	4413      	add	r3, r2
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	f003 030f 	and.w	r3, r3, #15
 800629c:	b2da      	uxtb	r2, r3
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	4413      	add	r3, r2
 80062a2:	b2db      	uxtb	r3, r3
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	7f1b      	ldrb	r3, [r3, #28]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_RTCEx_SetWakeUpTimer+0x1c>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e08a      	b.n	80063e2 <HAL_RTCEx_SetWakeUpTimer+0x132>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2202      	movs	r2, #2
 80062d6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	22ca      	movs	r2, #202	; 0xca
 80062de:	625a      	str	r2, [r3, #36]	; 0x24
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2253      	movs	r2, #83	; 0x53
 80062e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d01e      	beq.n	8006334 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 80062f6:	f7fb fe8f 	bl	8002018 <HAL_GetTick>
 80062fa:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80062fc:	e013      	b.n	8006326 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062fe:	f7fb fe8b 	bl	8002018 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800630c:	d90b      	bls.n	8006326 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	22ff      	movs	r2, #255	; 0xff
 8006314:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2203      	movs	r2, #3
 800631a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e05d      	b.n	80063e2 <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e4      	bne.n	80062fe <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006342:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	b2da      	uxtb	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006354:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006356:	f7fb fe5f 	bl	8002018 <HAL_GetTick>
 800635a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800635c:	e013      	b.n	8006386 <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800635e:	f7fb fe5b 	bl	8002018 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800636c:	d90b      	bls.n	8006386 <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	22ff      	movs	r2, #255	; 0xff
 8006374:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2203      	movs	r2, #3
 800637a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e02d      	b.n	80063e2 <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0e4      	beq.n	800635e <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0207 	bic.w	r2, r2, #7
 80063a2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6899      	ldr	r1, [r3, #8]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063ca:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	22ff      	movs	r2, #255	; 0xff
 80063d2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2201      	movs	r2, #1
 80063d8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b087      	sub	sp, #28
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3350      	adds	r3, #80	; 0x50
 8006400:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	4413      	add	r3, r2
 800640a:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	601a      	str	r2, [r3, #0]
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e04c      	b.n	80064cc <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d111      	bne.n	8006462 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fd60 	bl	8006f0c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006450:	2b00      	cmp	r3, #0
 8006452:	d102      	bne.n	800645a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a1f      	ldr	r2, [pc, #124]	; (80064d4 <HAL_TIM_Base_Init+0xb4>)
 8006458:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2202      	movs	r2, #2
 8006466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3304      	adds	r3, #4
 8006472:	4619      	mov	r1, r3
 8006474:	4610      	mov	r0, r2
 8006476:	f000 fc2f 	bl	8006cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	08001ce9 	.word	0x08001ce9

080064d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d001      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e044      	b.n	800657a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f042 0201 	orr.w	r2, r2, #1
 8006506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1e      	ldr	r2, [pc, #120]	; (8006588 <HAL_TIM_Base_Start_IT+0xb0>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d018      	beq.n	8006544 <HAL_TIM_Base_Start_IT+0x6c>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651a:	d013      	beq.n	8006544 <HAL_TIM_Base_Start_IT+0x6c>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1a      	ldr	r2, [pc, #104]	; (800658c <HAL_TIM_Base_Start_IT+0xb4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00e      	beq.n	8006544 <HAL_TIM_Base_Start_IT+0x6c>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a19      	ldr	r2, [pc, #100]	; (8006590 <HAL_TIM_Base_Start_IT+0xb8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d009      	beq.n	8006544 <HAL_TIM_Base_Start_IT+0x6c>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a17      	ldr	r2, [pc, #92]	; (8006594 <HAL_TIM_Base_Start_IT+0xbc>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d004      	beq.n	8006544 <HAL_TIM_Base_Start_IT+0x6c>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a16      	ldr	r2, [pc, #88]	; (8006598 <HAL_TIM_Base_Start_IT+0xc0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d111      	bne.n	8006568 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 0307 	and.w	r3, r3, #7
 800654e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b06      	cmp	r3, #6
 8006554:	d010      	beq.n	8006578 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f042 0201 	orr.w	r2, r2, #1
 8006564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006566:	e007      	b.n	8006578 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0201 	orr.w	r2, r2, #1
 8006576:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40010000 	.word	0x40010000
 800658c:	40000400 	.word	0x40000400
 8006590:	40000800 	.word	0x40000800
 8006594:	40000c00 	.word	0x40000c00
 8006598:	40014000 	.word	0x40014000

0800659c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d128      	bne.n	8006604 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d121      	bne.n	8006604 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f06f 0202 	mvn.w	r2, #2
 80065c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	4798      	blx	r3
 80065e8:	e009      	b.n	80065fe <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f003 0304 	and.w	r3, r3, #4
 800660e:	2b04      	cmp	r3, #4
 8006610:	d128      	bne.n	8006664 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b04      	cmp	r3, #4
 800661e:	d121      	bne.n	8006664 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0204 	mvn.w	r2, #4
 8006628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2202      	movs	r2, #2
 800662e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663a:	2b00      	cmp	r3, #0
 800663c:	d005      	beq.n	800664a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	4798      	blx	r3
 8006648:	e009      	b.n	800665e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	2b08      	cmp	r3, #8
 8006670:	d128      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b08      	cmp	r3, #8
 800667e:	d121      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0208 	mvn.w	r2, #8
 8006688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2204      	movs	r2, #4
 800668e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d005      	beq.n	80066aa <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	4798      	blx	r3
 80066a8:	e009      	b.n	80066be <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0310 	and.w	r3, r3, #16
 80066ce:	2b10      	cmp	r3, #16
 80066d0:	d128      	bne.n	8006724 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f003 0310 	and.w	r3, r3, #16
 80066dc:	2b10      	cmp	r3, #16
 80066de:	d121      	bne.n	8006724 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f06f 0210 	mvn.w	r2, #16
 80066e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2208      	movs	r2, #8
 80066ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d005      	beq.n	800670a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
 8006708:	e009      	b.n	800671e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b01      	cmp	r3, #1
 8006730:	d110      	bne.n	8006754 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b01      	cmp	r3, #1
 800673e:	d109      	bne.n	8006754 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0201 	mvn.w	r2, #1
 8006748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675e:	2b80      	cmp	r3, #128	; 0x80
 8006760:	d110      	bne.n	8006784 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800676c:	2b80      	cmp	r3, #128	; 0x80
 800676e:	d109      	bne.n	8006784 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d110      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	d109      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d110      	bne.n	80067e4 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f003 0320 	and.w	r3, r3, #32
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d109      	bne.n	80067e4 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0220 	mvn.w	r2, #32
 80067d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067e4:	bf00      	nop
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_TIM_ConfigClockSource+0x1c>
 8006804:	2302      	movs	r3, #2
 8006806:	e0b4      	b.n	8006972 <HAL_TIM_ConfigClockSource+0x186>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800682e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006840:	d03e      	beq.n	80068c0 <HAL_TIM_ConfigClockSource+0xd4>
 8006842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006846:	f200 8087 	bhi.w	8006958 <HAL_TIM_ConfigClockSource+0x16c>
 800684a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684e:	f000 8086 	beq.w	800695e <HAL_TIM_ConfigClockSource+0x172>
 8006852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006856:	d87f      	bhi.n	8006958 <HAL_TIM_ConfigClockSource+0x16c>
 8006858:	2b70      	cmp	r3, #112	; 0x70
 800685a:	d01a      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0xa6>
 800685c:	2b70      	cmp	r3, #112	; 0x70
 800685e:	d87b      	bhi.n	8006958 <HAL_TIM_ConfigClockSource+0x16c>
 8006860:	2b60      	cmp	r3, #96	; 0x60
 8006862:	d050      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0x11a>
 8006864:	2b60      	cmp	r3, #96	; 0x60
 8006866:	d877      	bhi.n	8006958 <HAL_TIM_ConfigClockSource+0x16c>
 8006868:	2b50      	cmp	r3, #80	; 0x50
 800686a:	d03c      	beq.n	80068e6 <HAL_TIM_ConfigClockSource+0xfa>
 800686c:	2b50      	cmp	r3, #80	; 0x50
 800686e:	d873      	bhi.n	8006958 <HAL_TIM_ConfigClockSource+0x16c>
 8006870:	2b40      	cmp	r3, #64	; 0x40
 8006872:	d058      	beq.n	8006926 <HAL_TIM_ConfigClockSource+0x13a>
 8006874:	2b40      	cmp	r3, #64	; 0x40
 8006876:	d86f      	bhi.n	8006958 <HAL_TIM_ConfigClockSource+0x16c>
 8006878:	2b30      	cmp	r3, #48	; 0x30
 800687a:	d064      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x15a>
 800687c:	2b30      	cmp	r3, #48	; 0x30
 800687e:	d86b      	bhi.n	8006958 <HAL_TIM_ConfigClockSource+0x16c>
 8006880:	2b20      	cmp	r3, #32
 8006882:	d060      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x15a>
 8006884:	2b20      	cmp	r3, #32
 8006886:	d867      	bhi.n	8006958 <HAL_TIM_ConfigClockSource+0x16c>
 8006888:	2b00      	cmp	r3, #0
 800688a:	d05c      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x15a>
 800688c:	2b10      	cmp	r3, #16
 800688e:	d05a      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x15a>
 8006890:	e062      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6899      	ldr	r1, [r3, #8]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f000 fb13 	bl	8006ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	609a      	str	r2, [r3, #8]
      break;
 80068be:	e04f      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6818      	ldr	r0, [r3, #0]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	6899      	ldr	r1, [r3, #8]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f000 fafc 	bl	8006ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689a      	ldr	r2, [r3, #8]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068e2:	609a      	str	r2, [r3, #8]
      break;
 80068e4:	e03c      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	6859      	ldr	r1, [r3, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	461a      	mov	r2, r3
 80068f4:	f000 fa70 	bl	8006dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2150      	movs	r1, #80	; 0x50
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fac9 	bl	8006e96 <TIM_ITRx_SetConfig>
      break;
 8006904:	e02c      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6818      	ldr	r0, [r3, #0]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	6859      	ldr	r1, [r3, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	461a      	mov	r2, r3
 8006914:	f000 fa8f 	bl	8006e36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2160      	movs	r1, #96	; 0x60
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fab9 	bl	8006e96 <TIM_ITRx_SetConfig>
      break;
 8006924:	e01c      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6818      	ldr	r0, [r3, #0]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	6859      	ldr	r1, [r3, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	461a      	mov	r2, r3
 8006934:	f000 fa50 	bl	8006dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2140      	movs	r1, #64	; 0x40
 800693e:	4618      	mov	r0, r3
 8006940:	f000 faa9 	bl	8006e96 <TIM_ITRx_SetConfig>
      break;
 8006944:	e00c      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4619      	mov	r1, r3
 8006950:	4610      	mov	r0, r2
 8006952:	f000 faa0 	bl	8006e96 <TIM_ITRx_SetConfig>
      break;
 8006956:	e003      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	73fb      	strb	r3, [r7, #15]
      break;
 800695c:	e000      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800695e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006970:	7bfb      	ldrb	r3, [r7, #15]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800698e:	b480      	push	{r7}
 8006990:	b083      	sub	sp, #12
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006996:	bf00      	nop
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b083      	sub	sp, #12
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069be:	bf00      	nop
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80069fa:	bf00      	nop
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a0e:	bf00      	nop
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006a22:	bf00      	nop
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
	...

08006a44 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	607a      	str	r2, [r7, #4]
 8006a50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e135      	b.n	8006ccc <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d101      	bne.n	8006a6e <HAL_TIM_RegisterCallback+0x2a>
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	e12e      	b.n	8006ccc <HAL_TIM_RegisterCallback+0x288>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	f040 80ba 	bne.w	8006bf8 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8006a84:	7afb      	ldrb	r3, [r7, #11]
 8006a86:	2b1a      	cmp	r3, #26
 8006a88:	f200 80b3 	bhi.w	8006bf2 <HAL_TIM_RegisterCallback+0x1ae>
 8006a8c:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <HAL_TIM_RegisterCallback+0x50>)
 8006a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a92:	bf00      	nop
 8006a94:	08006b01 	.word	0x08006b01
 8006a98:	08006b09 	.word	0x08006b09
 8006a9c:	08006b11 	.word	0x08006b11
 8006aa0:	08006b19 	.word	0x08006b19
 8006aa4:	08006b21 	.word	0x08006b21
 8006aa8:	08006b29 	.word	0x08006b29
 8006aac:	08006b31 	.word	0x08006b31
 8006ab0:	08006b39 	.word	0x08006b39
 8006ab4:	08006b41 	.word	0x08006b41
 8006ab8:	08006b49 	.word	0x08006b49
 8006abc:	08006b51 	.word	0x08006b51
 8006ac0:	08006b59 	.word	0x08006b59
 8006ac4:	08006b61 	.word	0x08006b61
 8006ac8:	08006b69 	.word	0x08006b69
 8006acc:	08006b71 	.word	0x08006b71
 8006ad0:	08006b7b 	.word	0x08006b7b
 8006ad4:	08006b85 	.word	0x08006b85
 8006ad8:	08006b8f 	.word	0x08006b8f
 8006adc:	08006b99 	.word	0x08006b99
 8006ae0:	08006ba3 	.word	0x08006ba3
 8006ae4:	08006bad 	.word	0x08006bad
 8006ae8:	08006bb7 	.word	0x08006bb7
 8006aec:	08006bc1 	.word	0x08006bc1
 8006af0:	08006bcb 	.word	0x08006bcb
 8006af4:	08006bd5 	.word	0x08006bd5
 8006af8:	08006bdf 	.word	0x08006bdf
 8006afc:	08006be9 	.word	0x08006be9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006b06:	e0dc      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006b0e:	e0d8      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006b16:	e0d4      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006b1e:	e0d0      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006b26:	e0cc      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006b2e:	e0c8      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006b36:	e0c4      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006b3e:	e0c0      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006b46:	e0bc      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006b4e:	e0b8      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006b56:	e0b4      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006b5e:	e0b0      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006b66:	e0ac      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006b6e:	e0a8      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8006b78:	e0a3      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8006b82:	e09e      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8006b8c:	e099      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8006b96:	e094      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8006ba0:	e08f      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8006baa:	e08a      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8006bb4:	e085      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8006bbe:	e080      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8006bc8:	e07b      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8006bd2:	e076      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8006bdc:	e071      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8006be6:	e06c      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8006bf0:	e067      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	75fb      	strb	r3, [r7, #23]
        break;
 8006bf6:	e064      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d15c      	bne.n	8006cbe <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8006c04:	7afb      	ldrb	r3, [r7, #11]
 8006c06:	2b0d      	cmp	r3, #13
 8006c08:	d856      	bhi.n	8006cb8 <HAL_TIM_RegisterCallback+0x274>
 8006c0a:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <HAL_TIM_RegisterCallback+0x1cc>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c49 	.word	0x08006c49
 8006c14:	08006c51 	.word	0x08006c51
 8006c18:	08006c59 	.word	0x08006c59
 8006c1c:	08006c61 	.word	0x08006c61
 8006c20:	08006c69 	.word	0x08006c69
 8006c24:	08006c71 	.word	0x08006c71
 8006c28:	08006c79 	.word	0x08006c79
 8006c2c:	08006c81 	.word	0x08006c81
 8006c30:	08006c89 	.word	0x08006c89
 8006c34:	08006c91 	.word	0x08006c91
 8006c38:	08006c99 	.word	0x08006c99
 8006c3c:	08006ca1 	.word	0x08006ca1
 8006c40:	08006ca9 	.word	0x08006ca9
 8006c44:	08006cb1 	.word	0x08006cb1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006c4e:	e038      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006c56:	e034      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006c5e:	e030      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006c66:	e02c      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006c6e:	e028      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006c76:	e024      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006c7e:	e020      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006c86:	e01c      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006c8e:	e018      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006c96:	e014      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006c9e:	e010      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006ca6:	e00c      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006cae:	e008      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006cb6:	e004      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	75fb      	strb	r3, [r7, #23]
        break;
 8006cbc:	e001      	b.n	8006cc2 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	371c      	adds	r7, #28
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a34      	ldr	r2, [pc, #208]	; (8006dbc <TIM_Base_SetConfig+0xe4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d00f      	beq.n	8006d10 <TIM_Base_SetConfig+0x38>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf6:	d00b      	beq.n	8006d10 <TIM_Base_SetConfig+0x38>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a31      	ldr	r2, [pc, #196]	; (8006dc0 <TIM_Base_SetConfig+0xe8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d007      	beq.n	8006d10 <TIM_Base_SetConfig+0x38>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a30      	ldr	r2, [pc, #192]	; (8006dc4 <TIM_Base_SetConfig+0xec>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d003      	beq.n	8006d10 <TIM_Base_SetConfig+0x38>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a2f      	ldr	r2, [pc, #188]	; (8006dc8 <TIM_Base_SetConfig+0xf0>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d108      	bne.n	8006d22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a25      	ldr	r2, [pc, #148]	; (8006dbc <TIM_Base_SetConfig+0xe4>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d01b      	beq.n	8006d62 <TIM_Base_SetConfig+0x8a>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d30:	d017      	beq.n	8006d62 <TIM_Base_SetConfig+0x8a>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a22      	ldr	r2, [pc, #136]	; (8006dc0 <TIM_Base_SetConfig+0xe8>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d013      	beq.n	8006d62 <TIM_Base_SetConfig+0x8a>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a21      	ldr	r2, [pc, #132]	; (8006dc4 <TIM_Base_SetConfig+0xec>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d00f      	beq.n	8006d62 <TIM_Base_SetConfig+0x8a>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a20      	ldr	r2, [pc, #128]	; (8006dc8 <TIM_Base_SetConfig+0xf0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00b      	beq.n	8006d62 <TIM_Base_SetConfig+0x8a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a1f      	ldr	r2, [pc, #124]	; (8006dcc <TIM_Base_SetConfig+0xf4>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d007      	beq.n	8006d62 <TIM_Base_SetConfig+0x8a>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a1e      	ldr	r2, [pc, #120]	; (8006dd0 <TIM_Base_SetConfig+0xf8>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d003      	beq.n	8006d62 <TIM_Base_SetConfig+0x8a>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a1d      	ldr	r2, [pc, #116]	; (8006dd4 <TIM_Base_SetConfig+0xfc>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d108      	bne.n	8006d74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a08      	ldr	r2, [pc, #32]	; (8006dbc <TIM_Base_SetConfig+0xe4>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d103      	bne.n	8006da8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	691a      	ldr	r2, [r3, #16]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	615a      	str	r2, [r3, #20]
}
 8006dae:	bf00      	nop
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	40010000 	.word	0x40010000
 8006dc0:	40000400 	.word	0x40000400
 8006dc4:	40000800 	.word	0x40000800
 8006dc8:	40000c00 	.word	0x40000c00
 8006dcc:	40014000 	.word	0x40014000
 8006dd0:	40014400 	.word	0x40014400
 8006dd4:	40014800 	.word	0x40014800

08006dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	f023 0201 	bic.w	r2, r3, #1
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f023 030a 	bic.w	r3, r3, #10
 8006e14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	621a      	str	r2, [r3, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b087      	sub	sp, #28
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	f023 0210 	bic.w	r2, r3, #16
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	031b      	lsls	r3, r3, #12
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	011b      	lsls	r3, r3, #4
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	621a      	str	r2, [r3, #32]
}
 8006e8a:	bf00      	nop
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b085      	sub	sp, #20
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	f043 0307 	orr.w	r3, r3, #7
 8006eb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	609a      	str	r2, [r3, #8]
}
 8006ec0:	bf00      	nop
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ee6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	021a      	lsls	r2, r3, #8
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	609a      	str	r2, [r3, #8]
}
 8006f00:	bf00      	nop
 8006f02:	371c      	adds	r7, #28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a1c      	ldr	r2, [pc, #112]	; (8006f88 <TIM_ResetCallback+0x7c>)
 8006f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a1b      	ldr	r2, [pc, #108]	; (8006f8c <TIM_ResetCallback+0x80>)
 8006f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a1a      	ldr	r2, [pc, #104]	; (8006f90 <TIM_ResetCallback+0x84>)
 8006f28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a19      	ldr	r2, [pc, #100]	; (8006f94 <TIM_ResetCallback+0x88>)
 8006f30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a18      	ldr	r2, [pc, #96]	; (8006f98 <TIM_ResetCallback+0x8c>)
 8006f38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a17      	ldr	r2, [pc, #92]	; (8006f9c <TIM_ResetCallback+0x90>)
 8006f40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a16      	ldr	r2, [pc, #88]	; (8006fa0 <TIM_ResetCallback+0x94>)
 8006f48:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a15      	ldr	r2, [pc, #84]	; (8006fa4 <TIM_ResetCallback+0x98>)
 8006f50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a14      	ldr	r2, [pc, #80]	; (8006fa8 <TIM_ResetCallback+0x9c>)
 8006f58:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a13      	ldr	r2, [pc, #76]	; (8006fac <TIM_ResetCallback+0xa0>)
 8006f60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a12      	ldr	r2, [pc, #72]	; (8006fb0 <TIM_ResetCallback+0xa4>)
 8006f68:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a11      	ldr	r2, [pc, #68]	; (8006fb4 <TIM_ResetCallback+0xa8>)
 8006f70:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a10      	ldr	r2, [pc, #64]	; (8006fb8 <TIM_ResetCallback+0xac>)
 8006f78:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	0800697b 	.word	0x0800697b
 8006f8c:	0800698f 	.word	0x0800698f
 8006f90:	08006a07 	.word	0x08006a07
 8006f94:	08006a1b 	.word	0x08006a1b
 8006f98:	080069b7 	.word	0x080069b7
 8006f9c:	080069cb 	.word	0x080069cb
 8006fa0:	080069a3 	.word	0x080069a3
 8006fa4:	080069df 	.word	0x080069df
 8006fa8:	080069f3 	.word	0x080069f3
 8006fac:	08006a2f 	.word	0x08006a2f
 8006fb0:	08007099 	.word	0x08007099
 8006fb4:	080070ad 	.word	0x080070ad
 8006fb8:	080070c1 	.word	0x080070c1

08006fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e050      	b.n	8007076 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a1c      	ldr	r2, [pc, #112]	; (8007084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d018      	beq.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007020:	d013      	beq.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a18      	ldr	r2, [pc, #96]	; (8007088 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00e      	beq.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a16      	ldr	r2, [pc, #88]	; (800708c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d009      	beq.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a15      	ldr	r2, [pc, #84]	; (8007090 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d004      	beq.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a13      	ldr	r2, [pc, #76]	; (8007094 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d10c      	bne.n	8007064 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	4313      	orrs	r3, r2
 800705a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	40010000 	.word	0x40010000
 8007088:	40000400 	.word	0x40000400
 800708c:	40000800 	.word	0x40000800
 8007090:	40000c00 	.word	0x40000c00
 8007094:	40014000 	.word	0x40014000

08007098 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e03f      	b.n	8007166 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d106      	bne.n	8007100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7fa fe46 	bl	8001d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2224      	movs	r2, #36	; 0x24
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fc7b 	bl	8007a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	691a      	ldr	r2, [r3, #16]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800712c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	695a      	ldr	r2, [r3, #20]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800713c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68da      	ldr	r2, [r3, #12]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800714c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2220      	movs	r2, #32
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b0ba      	sub	sp, #232	; 0xe8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007196:	2300      	movs	r3, #0
 8007198:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800719c:	2300      	movs	r3, #0
 800719e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80071ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10f      	bne.n	80071d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d009      	beq.n	80071d6 <HAL_UART_IRQHandler+0x66>
 80071c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fb65 	bl	800789e <UART_Receive_IT>
      return;
 80071d4:	e256      	b.n	8007684 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80071d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 80de 	beq.w	800739c <HAL_UART_IRQHandler+0x22c>
 80071e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d106      	bne.n	80071fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 80d1 	beq.w	800739c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00b      	beq.n	800721e <HAL_UART_IRQHandler+0xae>
 8007206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800720a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720e:	2b00      	cmp	r3, #0
 8007210:	d005      	beq.n	800721e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	f043 0201 	orr.w	r2, r3, #1
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800721e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007222:	f003 0304 	and.w	r3, r3, #4
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00b      	beq.n	8007242 <HAL_UART_IRQHandler+0xd2>
 800722a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d005      	beq.n	8007242 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	f043 0202 	orr.w	r2, r3, #2
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00b      	beq.n	8007266 <HAL_UART_IRQHandler+0xf6>
 800724e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d005      	beq.n	8007266 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725e:	f043 0204 	orr.w	r2, r3, #4
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d011      	beq.n	8007296 <HAL_UART_IRQHandler+0x126>
 8007272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007276:	f003 0320 	and.w	r3, r3, #32
 800727a:	2b00      	cmp	r3, #0
 800727c:	d105      	bne.n	800728a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800727e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d005      	beq.n	8007296 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	f043 0208 	orr.w	r2, r3, #8
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 81ed 	beq.w	800767a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d008      	beq.n	80072be <HAL_UART_IRQHandler+0x14e>
 80072ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b0:	f003 0320 	and.w	r3, r3, #32
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 faf0 	bl	800789e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c8:	2b40      	cmp	r3, #64	; 0x40
 80072ca:	bf0c      	ite	eq
 80072cc:	2301      	moveq	r3, #1
 80072ce:	2300      	movne	r3, #0
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	f003 0308 	and.w	r3, r3, #8
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d103      	bne.n	80072ea <HAL_UART_IRQHandler+0x17a>
 80072e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d04f      	beq.n	800738a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f9f8 	bl	80076e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fa:	2b40      	cmp	r3, #64	; 0x40
 80072fc:	d141      	bne.n	8007382 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3314      	adds	r3, #20
 8007304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800731c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3314      	adds	r3, #20
 8007326:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800732a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800732e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007336:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1d9      	bne.n	80072fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734e:	2b00      	cmp	r3, #0
 8007350:	d013      	beq.n	800737a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	4a7d      	ldr	r2, [pc, #500]	; (800754c <HAL_UART_IRQHandler+0x3dc>)
 8007358:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	4618      	mov	r0, r3
 8007360:	f7fb f8ba 	bl	80024d8 <HAL_DMA_Abort_IT>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d016      	beq.n	8007398 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007374:	4610      	mov	r0, r2
 8007376:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007378:	e00e      	b.n	8007398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f99a 	bl	80076b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007380:	e00a      	b.n	8007398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f996 	bl	80076b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007388:	e006      	b.n	8007398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f992 	bl	80076b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007396:	e170      	b.n	800767a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007398:	bf00      	nop
    return;
 800739a:	e16e      	b.n	800767a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	f040 814a 	bne.w	800763a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073aa:	f003 0310 	and.w	r3, r3, #16
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 8143 	beq.w	800763a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b8:	f003 0310 	and.w	r3, r3, #16
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 813c 	beq.w	800763a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073c2:	2300      	movs	r3, #0
 80073c4:	60bb      	str	r3, [r7, #8]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	60bb      	str	r3, [r7, #8]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	60bb      	str	r3, [r7, #8]
 80073d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e2:	2b40      	cmp	r3, #64	; 0x40
 80073e4:	f040 80b4 	bne.w	8007550 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 8140 	beq.w	800767e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007406:	429a      	cmp	r2, r3
 8007408:	f080 8139 	bcs.w	800767e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007412:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800741e:	f000 8088 	beq.w	8007532 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	330c      	adds	r3, #12
 8007428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007438:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800743c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007440:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	330c      	adds	r3, #12
 800744a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800744e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007452:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800745a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1d9      	bne.n	8007422 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3314      	adds	r3, #20
 8007474:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800747e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007480:	f023 0301 	bic.w	r3, r3, #1
 8007484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3314      	adds	r3, #20
 800748e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007492:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007496:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800749a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e1      	bne.n	800746e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3314      	adds	r3, #20
 80074b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3314      	adds	r3, #20
 80074ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80074ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80074d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074d6:	e841 2300 	strex	r3, r2, [r1]
 80074da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1e3      	bne.n	80074aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	330c      	adds	r3, #12
 80074f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074fa:	e853 3f00 	ldrex	r3, [r3]
 80074fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007502:	f023 0310 	bic.w	r3, r3, #16
 8007506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	330c      	adds	r3, #12
 8007510:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007514:	65ba      	str	r2, [r7, #88]	; 0x58
 8007516:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007518:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800751a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800751c:	e841 2300 	strex	r3, r2, [r1]
 8007520:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1e3      	bne.n	80074f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752c:	4618      	mov	r0, r3
 800752e:	f7fa ff63 	bl	80023f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800753a:	b29b      	uxth	r3, r3
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	b29b      	uxth	r3, r3
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f8c0 	bl	80076c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007548:	e099      	b.n	800767e <HAL_UART_IRQHandler+0x50e>
 800754a:	bf00      	nop
 800754c:	080077a7 	.word	0x080077a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007558:	b29b      	uxth	r3, r3
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007564:	b29b      	uxth	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 808b 	beq.w	8007682 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800756c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 8086 	beq.w	8007682 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	330c      	adds	r3, #12
 800757c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007580:	e853 3f00 	ldrex	r3, [r3]
 8007584:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007588:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800758c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	330c      	adds	r3, #12
 8007596:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800759a:	647a      	str	r2, [r7, #68]	; 0x44
 800759c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e3      	bne.n	8007576 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3314      	adds	r3, #20
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b8:	e853 3f00 	ldrex	r3, [r3]
 80075bc:	623b      	str	r3, [r7, #32]
   return(result);
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	f023 0301 	bic.w	r3, r3, #1
 80075c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3314      	adds	r3, #20
 80075ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80075d2:	633a      	str	r2, [r7, #48]	; 0x30
 80075d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075da:	e841 2300 	strex	r3, r2, [r1]
 80075de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1e3      	bne.n	80075ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	330c      	adds	r3, #12
 80075fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	e853 3f00 	ldrex	r3, [r3]
 8007602:	60fb      	str	r3, [r7, #12]
   return(result);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0310 	bic.w	r3, r3, #16
 800760a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	330c      	adds	r3, #12
 8007614:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007618:	61fa      	str	r2, [r7, #28]
 800761a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	69b9      	ldr	r1, [r7, #24]
 800761e:	69fa      	ldr	r2, [r7, #28]
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	617b      	str	r3, [r7, #20]
   return(result);
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e3      	bne.n	80075f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800762c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f848 	bl	80076c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007638:	e023      	b.n	8007682 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800763a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800763e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007642:	2b00      	cmp	r3, #0
 8007644:	d009      	beq.n	800765a <HAL_UART_IRQHandler+0x4ea>
 8007646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800764a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f8bb 	bl	80077ce <UART_Transmit_IT>
    return;
 8007658:	e014      	b.n	8007684 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800765a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800765e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00e      	beq.n	8007684 <HAL_UART_IRQHandler+0x514>
 8007666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800766a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766e:	2b00      	cmp	r3, #0
 8007670:	d008      	beq.n	8007684 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f8fb 	bl	800786e <UART_EndTransmit_IT>
    return;
 8007678:	e004      	b.n	8007684 <HAL_UART_IRQHandler+0x514>
    return;
 800767a:	bf00      	nop
 800767c:	e002      	b.n	8007684 <HAL_UART_IRQHandler+0x514>
      return;
 800767e:	bf00      	nop
 8007680:	e000      	b.n	8007684 <HAL_UART_IRQHandler+0x514>
      return;
 8007682:	bf00      	nop
  }
}
 8007684:	37e8      	adds	r7, #232	; 0xe8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop

0800768c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b095      	sub	sp, #84	; 0x54
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	330c      	adds	r3, #12
 80076ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f2:	e853 3f00 	ldrex	r3, [r3]
 80076f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	330c      	adds	r3, #12
 8007706:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007708:	643a      	str	r2, [r7, #64]	; 0x40
 800770a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800770e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007710:	e841 2300 	strex	r3, r2, [r1]
 8007714:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e5      	bne.n	80076e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3314      	adds	r3, #20
 8007722:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	e853 3f00 	ldrex	r3, [r3]
 800772a:	61fb      	str	r3, [r7, #28]
   return(result);
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	f023 0301 	bic.w	r3, r3, #1
 8007732:	64bb      	str	r3, [r7, #72]	; 0x48
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3314      	adds	r3, #20
 800773a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800773c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800773e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e5      	bne.n	800771c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007754:	2b01      	cmp	r3, #1
 8007756:	d119      	bne.n	800778c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	330c      	adds	r3, #12
 800775e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	e853 3f00 	ldrex	r3, [r3]
 8007766:	60bb      	str	r3, [r7, #8]
   return(result);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	f023 0310 	bic.w	r3, r3, #16
 800776e:	647b      	str	r3, [r7, #68]	; 0x44
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	330c      	adds	r3, #12
 8007776:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007778:	61ba      	str	r2, [r7, #24]
 800777a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777c:	6979      	ldr	r1, [r7, #20]
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	e841 2300 	strex	r3, r2, [r1]
 8007784:	613b      	str	r3, [r7, #16]
   return(result);
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1e5      	bne.n	8007758 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2220      	movs	r2, #32
 8007790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	631a      	str	r2, [r3, #48]	; 0x30
}
 800779a:	bf00      	nop
 800779c:	3754      	adds	r7, #84	; 0x54
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b084      	sub	sp, #16
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f7ff ff77 	bl	80076b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077c6:	bf00      	nop
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b085      	sub	sp, #20
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b21      	cmp	r3, #33	; 0x21
 80077e0:	d13e      	bne.n	8007860 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ea:	d114      	bne.n	8007816 <UART_Transmit_IT+0x48>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d110      	bne.n	8007816 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a1b      	ldr	r3, [r3, #32]
 80077f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007808:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	1c9a      	adds	r2, r3, #2
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	621a      	str	r2, [r3, #32]
 8007814:	e008      	b.n	8007828 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	1c59      	adds	r1, r3, #1
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	6211      	str	r1, [r2, #32]
 8007820:	781a      	ldrb	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800782c:	b29b      	uxth	r3, r3
 800782e:	3b01      	subs	r3, #1
 8007830:	b29b      	uxth	r3, r3
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	4619      	mov	r1, r3
 8007836:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10f      	bne.n	800785c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68da      	ldr	r2, [r3, #12]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800784a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68da      	ldr	r2, [r3, #12]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800785a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	e000      	b.n	8007862 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007860:	2302      	movs	r3, #2
  }
}
 8007862:	4618      	mov	r0, r3
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68da      	ldr	r2, [r3, #12]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007884:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2220      	movs	r2, #32
 800788a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff fefc 	bl	800768c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b08c      	sub	sp, #48	; 0x30
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b22      	cmp	r3, #34	; 0x22
 80078b0:	f040 80ab 	bne.w	8007a0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078bc:	d117      	bne.n	80078ee <UART_Receive_IT+0x50>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d113      	bne.n	80078ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078dc:	b29a      	uxth	r2, r3
 80078de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e6:	1c9a      	adds	r2, r3, #2
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	629a      	str	r2, [r3, #40]	; 0x28
 80078ec:	e026      	b.n	800793c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80078f4:	2300      	movs	r3, #0
 80078f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007900:	d007      	beq.n	8007912 <UART_Receive_IT+0x74>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10a      	bne.n	8007920 <UART_Receive_IT+0x82>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d106      	bne.n	8007920 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	b2da      	uxtb	r2, r3
 800791a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	e008      	b.n	8007932 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	b2db      	uxtb	r3, r3
 8007928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800792c:	b2da      	uxtb	r2, r3
 800792e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007930:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007936:	1c5a      	adds	r2, r3, #1
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007940:	b29b      	uxth	r3, r3
 8007942:	3b01      	subs	r3, #1
 8007944:	b29b      	uxth	r3, r3
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	4619      	mov	r1, r3
 800794a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800794c:	2b00      	cmp	r3, #0
 800794e:	d15a      	bne.n	8007a06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68da      	ldr	r2, [r3, #12]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 0220 	bic.w	r2, r2, #32
 800795e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800796e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	695a      	ldr	r2, [r3, #20]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0201 	bic.w	r2, r2, #1
 800797e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2220      	movs	r2, #32
 8007984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	2b01      	cmp	r3, #1
 800798e:	d135      	bne.n	80079fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	330c      	adds	r3, #12
 800799c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	613b      	str	r3, [r7, #16]
   return(result);
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f023 0310 	bic.w	r3, r3, #16
 80079ac:	627b      	str	r3, [r7, #36]	; 0x24
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	330c      	adds	r3, #12
 80079b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079b6:	623a      	str	r2, [r7, #32]
 80079b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	69f9      	ldr	r1, [r7, #28]
 80079bc:	6a3a      	ldr	r2, [r7, #32]
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e5      	bne.n	8007996 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0310 	and.w	r3, r3, #16
 80079d4:	2b10      	cmp	r3, #16
 80079d6:	d10a      	bne.n	80079ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079d8:	2300      	movs	r3, #0
 80079da:	60fb      	str	r3, [r7, #12]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	60fb      	str	r3, [r7, #12]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff fe67 	bl	80076c8 <HAL_UARTEx_RxEventCallback>
 80079fa:	e002      	b.n	8007a02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff fe4f 	bl	80076a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	e002      	b.n	8007a0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	e000      	b.n	8007a0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007a0a:	2302      	movs	r3, #2
  }
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3730      	adds	r7, #48	; 0x30
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a18:	b0c0      	sub	sp, #256	; 0x100
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a30:	68d9      	ldr	r1, [r3, #12]
 8007a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	ea40 0301 	orr.w	r3, r0, r1
 8007a3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a42:	689a      	ldr	r2, [r3, #8]
 8007a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	431a      	orrs	r2, r3
 8007a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a6c:	f021 010c 	bic.w	r1, r1, #12
 8007a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a7a:	430b      	orrs	r3, r1
 8007a7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a8e:	6999      	ldr	r1, [r3, #24]
 8007a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	ea40 0301 	orr.w	r3, r0, r1
 8007a9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	4b8f      	ldr	r3, [pc, #572]	; (8007ce0 <UART_SetConfig+0x2cc>)
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d005      	beq.n	8007ab4 <UART_SetConfig+0xa0>
 8007aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	4b8d      	ldr	r3, [pc, #564]	; (8007ce4 <UART_SetConfig+0x2d0>)
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d104      	bne.n	8007abe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ab4:	f7fd fffc 	bl	8005ab0 <HAL_RCC_GetPCLK2Freq>
 8007ab8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007abc:	e003      	b.n	8007ac6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007abe:	f7fd ffe3 	bl	8005a88 <HAL_RCC_GetPCLK1Freq>
 8007ac2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ad0:	f040 810c 	bne.w	8007cec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ade:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007ae2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007ae6:	4622      	mov	r2, r4
 8007ae8:	462b      	mov	r3, r5
 8007aea:	1891      	adds	r1, r2, r2
 8007aec:	65b9      	str	r1, [r7, #88]	; 0x58
 8007aee:	415b      	adcs	r3, r3
 8007af0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007af2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007af6:	4621      	mov	r1, r4
 8007af8:	eb12 0801 	adds.w	r8, r2, r1
 8007afc:	4629      	mov	r1, r5
 8007afe:	eb43 0901 	adc.w	r9, r3, r1
 8007b02:	f04f 0200 	mov.w	r2, #0
 8007b06:	f04f 0300 	mov.w	r3, #0
 8007b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b16:	4690      	mov	r8, r2
 8007b18:	4699      	mov	r9, r3
 8007b1a:	4623      	mov	r3, r4
 8007b1c:	eb18 0303 	adds.w	r3, r8, r3
 8007b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b24:	462b      	mov	r3, r5
 8007b26:	eb49 0303 	adc.w	r3, r9, r3
 8007b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b42:	460b      	mov	r3, r1
 8007b44:	18db      	adds	r3, r3, r3
 8007b46:	653b      	str	r3, [r7, #80]	; 0x50
 8007b48:	4613      	mov	r3, r2
 8007b4a:	eb42 0303 	adc.w	r3, r2, r3
 8007b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8007b50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007b58:	f7f8 fb92 	bl	8000280 <__aeabi_uldivmod>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4b61      	ldr	r3, [pc, #388]	; (8007ce8 <UART_SetConfig+0x2d4>)
 8007b62:	fba3 2302 	umull	r2, r3, r3, r2
 8007b66:	095b      	lsrs	r3, r3, #5
 8007b68:	011c      	lsls	r4, r3, #4
 8007b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007b78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	464b      	mov	r3, r9
 8007b80:	1891      	adds	r1, r2, r2
 8007b82:	64b9      	str	r1, [r7, #72]	; 0x48
 8007b84:	415b      	adcs	r3, r3
 8007b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007b8c:	4641      	mov	r1, r8
 8007b8e:	eb12 0a01 	adds.w	sl, r2, r1
 8007b92:	4649      	mov	r1, r9
 8007b94:	eb43 0b01 	adc.w	fp, r3, r1
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	f04f 0300 	mov.w	r3, #0
 8007ba0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ba4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bac:	4692      	mov	sl, r2
 8007bae:	469b      	mov	fp, r3
 8007bb0:	4643      	mov	r3, r8
 8007bb2:	eb1a 0303 	adds.w	r3, sl, r3
 8007bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bba:	464b      	mov	r3, r9
 8007bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8007bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007bd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	18db      	adds	r3, r3, r3
 8007bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8007bde:	4613      	mov	r3, r2
 8007be0:	eb42 0303 	adc.w	r3, r2, r3
 8007be4:	647b      	str	r3, [r7, #68]	; 0x44
 8007be6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007bea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007bee:	f7f8 fb47 	bl	8000280 <__aeabi_uldivmod>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	4b3b      	ldr	r3, [pc, #236]	; (8007ce8 <UART_SetConfig+0x2d4>)
 8007bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8007bfe:	095b      	lsrs	r3, r3, #5
 8007c00:	2264      	movs	r2, #100	; 0x64
 8007c02:	fb02 f303 	mul.w	r3, r2, r3
 8007c06:	1acb      	subs	r3, r1, r3
 8007c08:	00db      	lsls	r3, r3, #3
 8007c0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c0e:	4b36      	ldr	r3, [pc, #216]	; (8007ce8 <UART_SetConfig+0x2d4>)
 8007c10:	fba3 2302 	umull	r2, r3, r3, r2
 8007c14:	095b      	lsrs	r3, r3, #5
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c1c:	441c      	add	r4, r3
 8007c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c30:	4642      	mov	r2, r8
 8007c32:	464b      	mov	r3, r9
 8007c34:	1891      	adds	r1, r2, r2
 8007c36:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c38:	415b      	adcs	r3, r3
 8007c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c40:	4641      	mov	r1, r8
 8007c42:	1851      	adds	r1, r2, r1
 8007c44:	6339      	str	r1, [r7, #48]	; 0x30
 8007c46:	4649      	mov	r1, r9
 8007c48:	414b      	adcs	r3, r1
 8007c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c4c:	f04f 0200 	mov.w	r2, #0
 8007c50:	f04f 0300 	mov.w	r3, #0
 8007c54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007c58:	4659      	mov	r1, fp
 8007c5a:	00cb      	lsls	r3, r1, #3
 8007c5c:	4651      	mov	r1, sl
 8007c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c62:	4651      	mov	r1, sl
 8007c64:	00ca      	lsls	r2, r1, #3
 8007c66:	4610      	mov	r0, r2
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	4642      	mov	r2, r8
 8007c6e:	189b      	adds	r3, r3, r2
 8007c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c74:	464b      	mov	r3, r9
 8007c76:	460a      	mov	r2, r1
 8007c78:	eb42 0303 	adc.w	r3, r2, r3
 8007c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007c90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007c94:	460b      	mov	r3, r1
 8007c96:	18db      	adds	r3, r3, r3
 8007c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	eb42 0303 	adc.w	r3, r2, r3
 8007ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ca6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007caa:	f7f8 fae9 	bl	8000280 <__aeabi_uldivmod>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4b0d      	ldr	r3, [pc, #52]	; (8007ce8 <UART_SetConfig+0x2d4>)
 8007cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8007cb8:	095b      	lsrs	r3, r3, #5
 8007cba:	2164      	movs	r1, #100	; 0x64
 8007cbc:	fb01 f303 	mul.w	r3, r1, r3
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	00db      	lsls	r3, r3, #3
 8007cc4:	3332      	adds	r3, #50	; 0x32
 8007cc6:	4a08      	ldr	r2, [pc, #32]	; (8007ce8 <UART_SetConfig+0x2d4>)
 8007cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ccc:	095b      	lsrs	r3, r3, #5
 8007cce:	f003 0207 	and.w	r2, r3, #7
 8007cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4422      	add	r2, r4
 8007cda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007cdc:	e105      	b.n	8007eea <UART_SetConfig+0x4d6>
 8007cde:	bf00      	nop
 8007ce0:	40011000 	.word	0x40011000
 8007ce4:	40011400 	.word	0x40011400
 8007ce8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007cf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007cfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007cfe:	4642      	mov	r2, r8
 8007d00:	464b      	mov	r3, r9
 8007d02:	1891      	adds	r1, r2, r2
 8007d04:	6239      	str	r1, [r7, #32]
 8007d06:	415b      	adcs	r3, r3
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
 8007d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d0e:	4641      	mov	r1, r8
 8007d10:	1854      	adds	r4, r2, r1
 8007d12:	4649      	mov	r1, r9
 8007d14:	eb43 0501 	adc.w	r5, r3, r1
 8007d18:	f04f 0200 	mov.w	r2, #0
 8007d1c:	f04f 0300 	mov.w	r3, #0
 8007d20:	00eb      	lsls	r3, r5, #3
 8007d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d26:	00e2      	lsls	r2, r4, #3
 8007d28:	4614      	mov	r4, r2
 8007d2a:	461d      	mov	r5, r3
 8007d2c:	4643      	mov	r3, r8
 8007d2e:	18e3      	adds	r3, r4, r3
 8007d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d34:	464b      	mov	r3, r9
 8007d36:	eb45 0303 	adc.w	r3, r5, r3
 8007d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d4e:	f04f 0200 	mov.w	r2, #0
 8007d52:	f04f 0300 	mov.w	r3, #0
 8007d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	008b      	lsls	r3, r1, #2
 8007d5e:	4621      	mov	r1, r4
 8007d60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d64:	4621      	mov	r1, r4
 8007d66:	008a      	lsls	r2, r1, #2
 8007d68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d6c:	f7f8 fa88 	bl	8000280 <__aeabi_uldivmod>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4b60      	ldr	r3, [pc, #384]	; (8007ef8 <UART_SetConfig+0x4e4>)
 8007d76:	fba3 2302 	umull	r2, r3, r3, r2
 8007d7a:	095b      	lsrs	r3, r3, #5
 8007d7c:	011c      	lsls	r4, r3, #4
 8007d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d82:	2200      	movs	r2, #0
 8007d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007d8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007d90:	4642      	mov	r2, r8
 8007d92:	464b      	mov	r3, r9
 8007d94:	1891      	adds	r1, r2, r2
 8007d96:	61b9      	str	r1, [r7, #24]
 8007d98:	415b      	adcs	r3, r3
 8007d9a:	61fb      	str	r3, [r7, #28]
 8007d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007da0:	4641      	mov	r1, r8
 8007da2:	1851      	adds	r1, r2, r1
 8007da4:	6139      	str	r1, [r7, #16]
 8007da6:	4649      	mov	r1, r9
 8007da8:	414b      	adcs	r3, r1
 8007daa:	617b      	str	r3, [r7, #20]
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	f04f 0300 	mov.w	r3, #0
 8007db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007db8:	4659      	mov	r1, fp
 8007dba:	00cb      	lsls	r3, r1, #3
 8007dbc:	4651      	mov	r1, sl
 8007dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dc2:	4651      	mov	r1, sl
 8007dc4:	00ca      	lsls	r2, r1, #3
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4603      	mov	r3, r0
 8007dcc:	4642      	mov	r2, r8
 8007dce:	189b      	adds	r3, r3, r2
 8007dd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007dd4:	464b      	mov	r3, r9
 8007dd6:	460a      	mov	r2, r1
 8007dd8:	eb42 0303 	adc.w	r3, r2, r3
 8007ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007dea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007df8:	4649      	mov	r1, r9
 8007dfa:	008b      	lsls	r3, r1, #2
 8007dfc:	4641      	mov	r1, r8
 8007dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e02:	4641      	mov	r1, r8
 8007e04:	008a      	lsls	r2, r1, #2
 8007e06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e0a:	f7f8 fa39 	bl	8000280 <__aeabi_uldivmod>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	4b39      	ldr	r3, [pc, #228]	; (8007ef8 <UART_SetConfig+0x4e4>)
 8007e14:	fba3 1302 	umull	r1, r3, r3, r2
 8007e18:	095b      	lsrs	r3, r3, #5
 8007e1a:	2164      	movs	r1, #100	; 0x64
 8007e1c:	fb01 f303 	mul.w	r3, r1, r3
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	011b      	lsls	r3, r3, #4
 8007e24:	3332      	adds	r3, #50	; 0x32
 8007e26:	4a34      	ldr	r2, [pc, #208]	; (8007ef8 <UART_SetConfig+0x4e4>)
 8007e28:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2c:	095b      	lsrs	r3, r3, #5
 8007e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e32:	441c      	add	r4, r3
 8007e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e38:	2200      	movs	r2, #0
 8007e3a:	673b      	str	r3, [r7, #112]	; 0x70
 8007e3c:	677a      	str	r2, [r7, #116]	; 0x74
 8007e3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e42:	4642      	mov	r2, r8
 8007e44:	464b      	mov	r3, r9
 8007e46:	1891      	adds	r1, r2, r2
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	415b      	adcs	r3, r3
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e52:	4641      	mov	r1, r8
 8007e54:	1851      	adds	r1, r2, r1
 8007e56:	6039      	str	r1, [r7, #0]
 8007e58:	4649      	mov	r1, r9
 8007e5a:	414b      	adcs	r3, r1
 8007e5c:	607b      	str	r3, [r7, #4]
 8007e5e:	f04f 0200 	mov.w	r2, #0
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e6a:	4659      	mov	r1, fp
 8007e6c:	00cb      	lsls	r3, r1, #3
 8007e6e:	4651      	mov	r1, sl
 8007e70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e74:	4651      	mov	r1, sl
 8007e76:	00ca      	lsls	r2, r1, #3
 8007e78:	4610      	mov	r0, r2
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	4642      	mov	r2, r8
 8007e80:	189b      	adds	r3, r3, r2
 8007e82:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e84:	464b      	mov	r3, r9
 8007e86:	460a      	mov	r2, r1
 8007e88:	eb42 0303 	adc.w	r3, r2, r3
 8007e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	663b      	str	r3, [r7, #96]	; 0x60
 8007e98:	667a      	str	r2, [r7, #100]	; 0x64
 8007e9a:	f04f 0200 	mov.w	r2, #0
 8007e9e:	f04f 0300 	mov.w	r3, #0
 8007ea2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007ea6:	4649      	mov	r1, r9
 8007ea8:	008b      	lsls	r3, r1, #2
 8007eaa:	4641      	mov	r1, r8
 8007eac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eb0:	4641      	mov	r1, r8
 8007eb2:	008a      	lsls	r2, r1, #2
 8007eb4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007eb8:	f7f8 f9e2 	bl	8000280 <__aeabi_uldivmod>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4b0d      	ldr	r3, [pc, #52]	; (8007ef8 <UART_SetConfig+0x4e4>)
 8007ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ec6:	095b      	lsrs	r3, r3, #5
 8007ec8:	2164      	movs	r1, #100	; 0x64
 8007eca:	fb01 f303 	mul.w	r3, r1, r3
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	011b      	lsls	r3, r3, #4
 8007ed2:	3332      	adds	r3, #50	; 0x32
 8007ed4:	4a08      	ldr	r2, [pc, #32]	; (8007ef8 <UART_SetConfig+0x4e4>)
 8007ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eda:	095b      	lsrs	r3, r3, #5
 8007edc:	f003 020f 	and.w	r2, r3, #15
 8007ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4422      	add	r2, r4
 8007ee8:	609a      	str	r2, [r3, #8]
}
 8007eea:	bf00      	nop
 8007eec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ef6:	bf00      	nop
 8007ef8:	51eb851f 	.word	0x51eb851f

08007efc <__errno>:
 8007efc:	4b01      	ldr	r3, [pc, #4]	; (8007f04 <__errno+0x8>)
 8007efe:	6818      	ldr	r0, [r3, #0]
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	20000014 	.word	0x20000014

08007f08 <__libc_init_array>:
 8007f08:	b570      	push	{r4, r5, r6, lr}
 8007f0a:	4d0d      	ldr	r5, [pc, #52]	; (8007f40 <__libc_init_array+0x38>)
 8007f0c:	4c0d      	ldr	r4, [pc, #52]	; (8007f44 <__libc_init_array+0x3c>)
 8007f0e:	1b64      	subs	r4, r4, r5
 8007f10:	10a4      	asrs	r4, r4, #2
 8007f12:	2600      	movs	r6, #0
 8007f14:	42a6      	cmp	r6, r4
 8007f16:	d109      	bne.n	8007f2c <__libc_init_array+0x24>
 8007f18:	4d0b      	ldr	r5, [pc, #44]	; (8007f48 <__libc_init_array+0x40>)
 8007f1a:	4c0c      	ldr	r4, [pc, #48]	; (8007f4c <__libc_init_array+0x44>)
 8007f1c:	f000 fc8e 	bl	800883c <_init>
 8007f20:	1b64      	subs	r4, r4, r5
 8007f22:	10a4      	asrs	r4, r4, #2
 8007f24:	2600      	movs	r6, #0
 8007f26:	42a6      	cmp	r6, r4
 8007f28:	d105      	bne.n	8007f36 <__libc_init_array+0x2e>
 8007f2a:	bd70      	pop	{r4, r5, r6, pc}
 8007f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f30:	4798      	blx	r3
 8007f32:	3601      	adds	r6, #1
 8007f34:	e7ee      	b.n	8007f14 <__libc_init_array+0xc>
 8007f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f3a:	4798      	blx	r3
 8007f3c:	3601      	adds	r6, #1
 8007f3e:	e7f2      	b.n	8007f26 <__libc_init_array+0x1e>
 8007f40:	08009040 	.word	0x08009040
 8007f44:	08009040 	.word	0x08009040
 8007f48:	08009040 	.word	0x08009040
 8007f4c:	08009044 	.word	0x08009044

08007f50 <memset>:
 8007f50:	4402      	add	r2, r0
 8007f52:	4603      	mov	r3, r0
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d100      	bne.n	8007f5a <memset+0xa>
 8007f58:	4770      	bx	lr
 8007f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f5e:	e7f9      	b.n	8007f54 <memset+0x4>

08007f60 <siprintf>:
 8007f60:	b40e      	push	{r1, r2, r3}
 8007f62:	b500      	push	{lr}
 8007f64:	b09c      	sub	sp, #112	; 0x70
 8007f66:	ab1d      	add	r3, sp, #116	; 0x74
 8007f68:	9002      	str	r0, [sp, #8]
 8007f6a:	9006      	str	r0, [sp, #24]
 8007f6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f70:	4809      	ldr	r0, [pc, #36]	; (8007f98 <siprintf+0x38>)
 8007f72:	9107      	str	r1, [sp, #28]
 8007f74:	9104      	str	r1, [sp, #16]
 8007f76:	4909      	ldr	r1, [pc, #36]	; (8007f9c <siprintf+0x3c>)
 8007f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f7c:	9105      	str	r1, [sp, #20]
 8007f7e:	6800      	ldr	r0, [r0, #0]
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	a902      	add	r1, sp, #8
 8007f84:	f000 f868 	bl	8008058 <_svfiprintf_r>
 8007f88:	9b02      	ldr	r3, [sp, #8]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	701a      	strb	r2, [r3, #0]
 8007f8e:	b01c      	add	sp, #112	; 0x70
 8007f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f94:	b003      	add	sp, #12
 8007f96:	4770      	bx	lr
 8007f98:	20000014 	.word	0x20000014
 8007f9c:	ffff0208 	.word	0xffff0208

08007fa0 <__ssputs_r>:
 8007fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa4:	688e      	ldr	r6, [r1, #8]
 8007fa6:	429e      	cmp	r6, r3
 8007fa8:	4682      	mov	sl, r0
 8007faa:	460c      	mov	r4, r1
 8007fac:	4690      	mov	r8, r2
 8007fae:	461f      	mov	r7, r3
 8007fb0:	d838      	bhi.n	8008024 <__ssputs_r+0x84>
 8007fb2:	898a      	ldrh	r2, [r1, #12]
 8007fb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fb8:	d032      	beq.n	8008020 <__ssputs_r+0x80>
 8007fba:	6825      	ldr	r5, [r4, #0]
 8007fbc:	6909      	ldr	r1, [r1, #16]
 8007fbe:	eba5 0901 	sub.w	r9, r5, r1
 8007fc2:	6965      	ldr	r5, [r4, #20]
 8007fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fcc:	3301      	adds	r3, #1
 8007fce:	444b      	add	r3, r9
 8007fd0:	106d      	asrs	r5, r5, #1
 8007fd2:	429d      	cmp	r5, r3
 8007fd4:	bf38      	it	cc
 8007fd6:	461d      	movcc	r5, r3
 8007fd8:	0553      	lsls	r3, r2, #21
 8007fda:	d531      	bpl.n	8008040 <__ssputs_r+0xa0>
 8007fdc:	4629      	mov	r1, r5
 8007fde:	f000 fb63 	bl	80086a8 <_malloc_r>
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	b950      	cbnz	r0, 8007ffc <__ssputs_r+0x5c>
 8007fe6:	230c      	movs	r3, #12
 8007fe8:	f8ca 3000 	str.w	r3, [sl]
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ff2:	81a3      	strh	r3, [r4, #12]
 8007ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ffc:	6921      	ldr	r1, [r4, #16]
 8007ffe:	464a      	mov	r2, r9
 8008000:	f000 fabe 	bl	8008580 <memcpy>
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800800a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800800e:	81a3      	strh	r3, [r4, #12]
 8008010:	6126      	str	r6, [r4, #16]
 8008012:	6165      	str	r5, [r4, #20]
 8008014:	444e      	add	r6, r9
 8008016:	eba5 0509 	sub.w	r5, r5, r9
 800801a:	6026      	str	r6, [r4, #0]
 800801c:	60a5      	str	r5, [r4, #8]
 800801e:	463e      	mov	r6, r7
 8008020:	42be      	cmp	r6, r7
 8008022:	d900      	bls.n	8008026 <__ssputs_r+0x86>
 8008024:	463e      	mov	r6, r7
 8008026:	6820      	ldr	r0, [r4, #0]
 8008028:	4632      	mov	r2, r6
 800802a:	4641      	mov	r1, r8
 800802c:	f000 fab6 	bl	800859c <memmove>
 8008030:	68a3      	ldr	r3, [r4, #8]
 8008032:	1b9b      	subs	r3, r3, r6
 8008034:	60a3      	str	r3, [r4, #8]
 8008036:	6823      	ldr	r3, [r4, #0]
 8008038:	4433      	add	r3, r6
 800803a:	6023      	str	r3, [r4, #0]
 800803c:	2000      	movs	r0, #0
 800803e:	e7db      	b.n	8007ff8 <__ssputs_r+0x58>
 8008040:	462a      	mov	r2, r5
 8008042:	f000 fba5 	bl	8008790 <_realloc_r>
 8008046:	4606      	mov	r6, r0
 8008048:	2800      	cmp	r0, #0
 800804a:	d1e1      	bne.n	8008010 <__ssputs_r+0x70>
 800804c:	6921      	ldr	r1, [r4, #16]
 800804e:	4650      	mov	r0, sl
 8008050:	f000 fabe 	bl	80085d0 <_free_r>
 8008054:	e7c7      	b.n	8007fe6 <__ssputs_r+0x46>
	...

08008058 <_svfiprintf_r>:
 8008058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805c:	4698      	mov	r8, r3
 800805e:	898b      	ldrh	r3, [r1, #12]
 8008060:	061b      	lsls	r3, r3, #24
 8008062:	b09d      	sub	sp, #116	; 0x74
 8008064:	4607      	mov	r7, r0
 8008066:	460d      	mov	r5, r1
 8008068:	4614      	mov	r4, r2
 800806a:	d50e      	bpl.n	800808a <_svfiprintf_r+0x32>
 800806c:	690b      	ldr	r3, [r1, #16]
 800806e:	b963      	cbnz	r3, 800808a <_svfiprintf_r+0x32>
 8008070:	2140      	movs	r1, #64	; 0x40
 8008072:	f000 fb19 	bl	80086a8 <_malloc_r>
 8008076:	6028      	str	r0, [r5, #0]
 8008078:	6128      	str	r0, [r5, #16]
 800807a:	b920      	cbnz	r0, 8008086 <_svfiprintf_r+0x2e>
 800807c:	230c      	movs	r3, #12
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008084:	e0d1      	b.n	800822a <_svfiprintf_r+0x1d2>
 8008086:	2340      	movs	r3, #64	; 0x40
 8008088:	616b      	str	r3, [r5, #20]
 800808a:	2300      	movs	r3, #0
 800808c:	9309      	str	r3, [sp, #36]	; 0x24
 800808e:	2320      	movs	r3, #32
 8008090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008094:	f8cd 800c 	str.w	r8, [sp, #12]
 8008098:	2330      	movs	r3, #48	; 0x30
 800809a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008244 <_svfiprintf_r+0x1ec>
 800809e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080a2:	f04f 0901 	mov.w	r9, #1
 80080a6:	4623      	mov	r3, r4
 80080a8:	469a      	mov	sl, r3
 80080aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080ae:	b10a      	cbz	r2, 80080b4 <_svfiprintf_r+0x5c>
 80080b0:	2a25      	cmp	r2, #37	; 0x25
 80080b2:	d1f9      	bne.n	80080a8 <_svfiprintf_r+0x50>
 80080b4:	ebba 0b04 	subs.w	fp, sl, r4
 80080b8:	d00b      	beq.n	80080d2 <_svfiprintf_r+0x7a>
 80080ba:	465b      	mov	r3, fp
 80080bc:	4622      	mov	r2, r4
 80080be:	4629      	mov	r1, r5
 80080c0:	4638      	mov	r0, r7
 80080c2:	f7ff ff6d 	bl	8007fa0 <__ssputs_r>
 80080c6:	3001      	adds	r0, #1
 80080c8:	f000 80aa 	beq.w	8008220 <_svfiprintf_r+0x1c8>
 80080cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080ce:	445a      	add	r2, fp
 80080d0:	9209      	str	r2, [sp, #36]	; 0x24
 80080d2:	f89a 3000 	ldrb.w	r3, [sl]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 80a2 	beq.w	8008220 <_svfiprintf_r+0x1c8>
 80080dc:	2300      	movs	r3, #0
 80080de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080e6:	f10a 0a01 	add.w	sl, sl, #1
 80080ea:	9304      	str	r3, [sp, #16]
 80080ec:	9307      	str	r3, [sp, #28]
 80080ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080f2:	931a      	str	r3, [sp, #104]	; 0x68
 80080f4:	4654      	mov	r4, sl
 80080f6:	2205      	movs	r2, #5
 80080f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080fc:	4851      	ldr	r0, [pc, #324]	; (8008244 <_svfiprintf_r+0x1ec>)
 80080fe:	f7f8 f86f 	bl	80001e0 <memchr>
 8008102:	9a04      	ldr	r2, [sp, #16]
 8008104:	b9d8      	cbnz	r0, 800813e <_svfiprintf_r+0xe6>
 8008106:	06d0      	lsls	r0, r2, #27
 8008108:	bf44      	itt	mi
 800810a:	2320      	movmi	r3, #32
 800810c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008110:	0711      	lsls	r1, r2, #28
 8008112:	bf44      	itt	mi
 8008114:	232b      	movmi	r3, #43	; 0x2b
 8008116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800811a:	f89a 3000 	ldrb.w	r3, [sl]
 800811e:	2b2a      	cmp	r3, #42	; 0x2a
 8008120:	d015      	beq.n	800814e <_svfiprintf_r+0xf6>
 8008122:	9a07      	ldr	r2, [sp, #28]
 8008124:	4654      	mov	r4, sl
 8008126:	2000      	movs	r0, #0
 8008128:	f04f 0c0a 	mov.w	ip, #10
 800812c:	4621      	mov	r1, r4
 800812e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008132:	3b30      	subs	r3, #48	; 0x30
 8008134:	2b09      	cmp	r3, #9
 8008136:	d94e      	bls.n	80081d6 <_svfiprintf_r+0x17e>
 8008138:	b1b0      	cbz	r0, 8008168 <_svfiprintf_r+0x110>
 800813a:	9207      	str	r2, [sp, #28]
 800813c:	e014      	b.n	8008168 <_svfiprintf_r+0x110>
 800813e:	eba0 0308 	sub.w	r3, r0, r8
 8008142:	fa09 f303 	lsl.w	r3, r9, r3
 8008146:	4313      	orrs	r3, r2
 8008148:	9304      	str	r3, [sp, #16]
 800814a:	46a2      	mov	sl, r4
 800814c:	e7d2      	b.n	80080f4 <_svfiprintf_r+0x9c>
 800814e:	9b03      	ldr	r3, [sp, #12]
 8008150:	1d19      	adds	r1, r3, #4
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	9103      	str	r1, [sp, #12]
 8008156:	2b00      	cmp	r3, #0
 8008158:	bfbb      	ittet	lt
 800815a:	425b      	neglt	r3, r3
 800815c:	f042 0202 	orrlt.w	r2, r2, #2
 8008160:	9307      	strge	r3, [sp, #28]
 8008162:	9307      	strlt	r3, [sp, #28]
 8008164:	bfb8      	it	lt
 8008166:	9204      	strlt	r2, [sp, #16]
 8008168:	7823      	ldrb	r3, [r4, #0]
 800816a:	2b2e      	cmp	r3, #46	; 0x2e
 800816c:	d10c      	bne.n	8008188 <_svfiprintf_r+0x130>
 800816e:	7863      	ldrb	r3, [r4, #1]
 8008170:	2b2a      	cmp	r3, #42	; 0x2a
 8008172:	d135      	bne.n	80081e0 <_svfiprintf_r+0x188>
 8008174:	9b03      	ldr	r3, [sp, #12]
 8008176:	1d1a      	adds	r2, r3, #4
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	9203      	str	r2, [sp, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	bfb8      	it	lt
 8008180:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008184:	3402      	adds	r4, #2
 8008186:	9305      	str	r3, [sp, #20]
 8008188:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008254 <_svfiprintf_r+0x1fc>
 800818c:	7821      	ldrb	r1, [r4, #0]
 800818e:	2203      	movs	r2, #3
 8008190:	4650      	mov	r0, sl
 8008192:	f7f8 f825 	bl	80001e0 <memchr>
 8008196:	b140      	cbz	r0, 80081aa <_svfiprintf_r+0x152>
 8008198:	2340      	movs	r3, #64	; 0x40
 800819a:	eba0 000a 	sub.w	r0, r0, sl
 800819e:	fa03 f000 	lsl.w	r0, r3, r0
 80081a2:	9b04      	ldr	r3, [sp, #16]
 80081a4:	4303      	orrs	r3, r0
 80081a6:	3401      	adds	r4, #1
 80081a8:	9304      	str	r3, [sp, #16]
 80081aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ae:	4826      	ldr	r0, [pc, #152]	; (8008248 <_svfiprintf_r+0x1f0>)
 80081b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081b4:	2206      	movs	r2, #6
 80081b6:	f7f8 f813 	bl	80001e0 <memchr>
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d038      	beq.n	8008230 <_svfiprintf_r+0x1d8>
 80081be:	4b23      	ldr	r3, [pc, #140]	; (800824c <_svfiprintf_r+0x1f4>)
 80081c0:	bb1b      	cbnz	r3, 800820a <_svfiprintf_r+0x1b2>
 80081c2:	9b03      	ldr	r3, [sp, #12]
 80081c4:	3307      	adds	r3, #7
 80081c6:	f023 0307 	bic.w	r3, r3, #7
 80081ca:	3308      	adds	r3, #8
 80081cc:	9303      	str	r3, [sp, #12]
 80081ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d0:	4433      	add	r3, r6
 80081d2:	9309      	str	r3, [sp, #36]	; 0x24
 80081d4:	e767      	b.n	80080a6 <_svfiprintf_r+0x4e>
 80081d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80081da:	460c      	mov	r4, r1
 80081dc:	2001      	movs	r0, #1
 80081de:	e7a5      	b.n	800812c <_svfiprintf_r+0xd4>
 80081e0:	2300      	movs	r3, #0
 80081e2:	3401      	adds	r4, #1
 80081e4:	9305      	str	r3, [sp, #20]
 80081e6:	4619      	mov	r1, r3
 80081e8:	f04f 0c0a 	mov.w	ip, #10
 80081ec:	4620      	mov	r0, r4
 80081ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081f2:	3a30      	subs	r2, #48	; 0x30
 80081f4:	2a09      	cmp	r2, #9
 80081f6:	d903      	bls.n	8008200 <_svfiprintf_r+0x1a8>
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d0c5      	beq.n	8008188 <_svfiprintf_r+0x130>
 80081fc:	9105      	str	r1, [sp, #20]
 80081fe:	e7c3      	b.n	8008188 <_svfiprintf_r+0x130>
 8008200:	fb0c 2101 	mla	r1, ip, r1, r2
 8008204:	4604      	mov	r4, r0
 8008206:	2301      	movs	r3, #1
 8008208:	e7f0      	b.n	80081ec <_svfiprintf_r+0x194>
 800820a:	ab03      	add	r3, sp, #12
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	462a      	mov	r2, r5
 8008210:	4b0f      	ldr	r3, [pc, #60]	; (8008250 <_svfiprintf_r+0x1f8>)
 8008212:	a904      	add	r1, sp, #16
 8008214:	4638      	mov	r0, r7
 8008216:	f3af 8000 	nop.w
 800821a:	1c42      	adds	r2, r0, #1
 800821c:	4606      	mov	r6, r0
 800821e:	d1d6      	bne.n	80081ce <_svfiprintf_r+0x176>
 8008220:	89ab      	ldrh	r3, [r5, #12]
 8008222:	065b      	lsls	r3, r3, #25
 8008224:	f53f af2c 	bmi.w	8008080 <_svfiprintf_r+0x28>
 8008228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800822a:	b01d      	add	sp, #116	; 0x74
 800822c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008230:	ab03      	add	r3, sp, #12
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	462a      	mov	r2, r5
 8008236:	4b06      	ldr	r3, [pc, #24]	; (8008250 <_svfiprintf_r+0x1f8>)
 8008238:	a904      	add	r1, sp, #16
 800823a:	4638      	mov	r0, r7
 800823c:	f000 f87a 	bl	8008334 <_printf_i>
 8008240:	e7eb      	b.n	800821a <_svfiprintf_r+0x1c2>
 8008242:	bf00      	nop
 8008244:	08009004 	.word	0x08009004
 8008248:	0800900e 	.word	0x0800900e
 800824c:	00000000 	.word	0x00000000
 8008250:	08007fa1 	.word	0x08007fa1
 8008254:	0800900a 	.word	0x0800900a

08008258 <_printf_common>:
 8008258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800825c:	4616      	mov	r6, r2
 800825e:	4699      	mov	r9, r3
 8008260:	688a      	ldr	r2, [r1, #8]
 8008262:	690b      	ldr	r3, [r1, #16]
 8008264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008268:	4293      	cmp	r3, r2
 800826a:	bfb8      	it	lt
 800826c:	4613      	movlt	r3, r2
 800826e:	6033      	str	r3, [r6, #0]
 8008270:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008274:	4607      	mov	r7, r0
 8008276:	460c      	mov	r4, r1
 8008278:	b10a      	cbz	r2, 800827e <_printf_common+0x26>
 800827a:	3301      	adds	r3, #1
 800827c:	6033      	str	r3, [r6, #0]
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	0699      	lsls	r1, r3, #26
 8008282:	bf42      	ittt	mi
 8008284:	6833      	ldrmi	r3, [r6, #0]
 8008286:	3302      	addmi	r3, #2
 8008288:	6033      	strmi	r3, [r6, #0]
 800828a:	6825      	ldr	r5, [r4, #0]
 800828c:	f015 0506 	ands.w	r5, r5, #6
 8008290:	d106      	bne.n	80082a0 <_printf_common+0x48>
 8008292:	f104 0a19 	add.w	sl, r4, #25
 8008296:	68e3      	ldr	r3, [r4, #12]
 8008298:	6832      	ldr	r2, [r6, #0]
 800829a:	1a9b      	subs	r3, r3, r2
 800829c:	42ab      	cmp	r3, r5
 800829e:	dc26      	bgt.n	80082ee <_printf_common+0x96>
 80082a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082a4:	1e13      	subs	r3, r2, #0
 80082a6:	6822      	ldr	r2, [r4, #0]
 80082a8:	bf18      	it	ne
 80082aa:	2301      	movne	r3, #1
 80082ac:	0692      	lsls	r2, r2, #26
 80082ae:	d42b      	bmi.n	8008308 <_printf_common+0xb0>
 80082b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082b4:	4649      	mov	r1, r9
 80082b6:	4638      	mov	r0, r7
 80082b8:	47c0      	blx	r8
 80082ba:	3001      	adds	r0, #1
 80082bc:	d01e      	beq.n	80082fc <_printf_common+0xa4>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	68e5      	ldr	r5, [r4, #12]
 80082c2:	6832      	ldr	r2, [r6, #0]
 80082c4:	f003 0306 	and.w	r3, r3, #6
 80082c8:	2b04      	cmp	r3, #4
 80082ca:	bf08      	it	eq
 80082cc:	1aad      	subeq	r5, r5, r2
 80082ce:	68a3      	ldr	r3, [r4, #8]
 80082d0:	6922      	ldr	r2, [r4, #16]
 80082d2:	bf0c      	ite	eq
 80082d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082d8:	2500      	movne	r5, #0
 80082da:	4293      	cmp	r3, r2
 80082dc:	bfc4      	itt	gt
 80082de:	1a9b      	subgt	r3, r3, r2
 80082e0:	18ed      	addgt	r5, r5, r3
 80082e2:	2600      	movs	r6, #0
 80082e4:	341a      	adds	r4, #26
 80082e6:	42b5      	cmp	r5, r6
 80082e8:	d11a      	bne.n	8008320 <_printf_common+0xc8>
 80082ea:	2000      	movs	r0, #0
 80082ec:	e008      	b.n	8008300 <_printf_common+0xa8>
 80082ee:	2301      	movs	r3, #1
 80082f0:	4652      	mov	r2, sl
 80082f2:	4649      	mov	r1, r9
 80082f4:	4638      	mov	r0, r7
 80082f6:	47c0      	blx	r8
 80082f8:	3001      	adds	r0, #1
 80082fa:	d103      	bne.n	8008304 <_printf_common+0xac>
 80082fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008304:	3501      	adds	r5, #1
 8008306:	e7c6      	b.n	8008296 <_printf_common+0x3e>
 8008308:	18e1      	adds	r1, r4, r3
 800830a:	1c5a      	adds	r2, r3, #1
 800830c:	2030      	movs	r0, #48	; 0x30
 800830e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008312:	4422      	add	r2, r4
 8008314:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008318:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800831c:	3302      	adds	r3, #2
 800831e:	e7c7      	b.n	80082b0 <_printf_common+0x58>
 8008320:	2301      	movs	r3, #1
 8008322:	4622      	mov	r2, r4
 8008324:	4649      	mov	r1, r9
 8008326:	4638      	mov	r0, r7
 8008328:	47c0      	blx	r8
 800832a:	3001      	adds	r0, #1
 800832c:	d0e6      	beq.n	80082fc <_printf_common+0xa4>
 800832e:	3601      	adds	r6, #1
 8008330:	e7d9      	b.n	80082e6 <_printf_common+0x8e>
	...

08008334 <_printf_i>:
 8008334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008338:	7e0f      	ldrb	r7, [r1, #24]
 800833a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800833c:	2f78      	cmp	r7, #120	; 0x78
 800833e:	4691      	mov	r9, r2
 8008340:	4680      	mov	r8, r0
 8008342:	460c      	mov	r4, r1
 8008344:	469a      	mov	sl, r3
 8008346:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800834a:	d807      	bhi.n	800835c <_printf_i+0x28>
 800834c:	2f62      	cmp	r7, #98	; 0x62
 800834e:	d80a      	bhi.n	8008366 <_printf_i+0x32>
 8008350:	2f00      	cmp	r7, #0
 8008352:	f000 80d8 	beq.w	8008506 <_printf_i+0x1d2>
 8008356:	2f58      	cmp	r7, #88	; 0x58
 8008358:	f000 80a3 	beq.w	80084a2 <_printf_i+0x16e>
 800835c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008364:	e03a      	b.n	80083dc <_printf_i+0xa8>
 8008366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800836a:	2b15      	cmp	r3, #21
 800836c:	d8f6      	bhi.n	800835c <_printf_i+0x28>
 800836e:	a101      	add	r1, pc, #4	; (adr r1, 8008374 <_printf_i+0x40>)
 8008370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008374:	080083cd 	.word	0x080083cd
 8008378:	080083e1 	.word	0x080083e1
 800837c:	0800835d 	.word	0x0800835d
 8008380:	0800835d 	.word	0x0800835d
 8008384:	0800835d 	.word	0x0800835d
 8008388:	0800835d 	.word	0x0800835d
 800838c:	080083e1 	.word	0x080083e1
 8008390:	0800835d 	.word	0x0800835d
 8008394:	0800835d 	.word	0x0800835d
 8008398:	0800835d 	.word	0x0800835d
 800839c:	0800835d 	.word	0x0800835d
 80083a0:	080084ed 	.word	0x080084ed
 80083a4:	08008411 	.word	0x08008411
 80083a8:	080084cf 	.word	0x080084cf
 80083ac:	0800835d 	.word	0x0800835d
 80083b0:	0800835d 	.word	0x0800835d
 80083b4:	0800850f 	.word	0x0800850f
 80083b8:	0800835d 	.word	0x0800835d
 80083bc:	08008411 	.word	0x08008411
 80083c0:	0800835d 	.word	0x0800835d
 80083c4:	0800835d 	.word	0x0800835d
 80083c8:	080084d7 	.word	0x080084d7
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	1d1a      	adds	r2, r3, #4
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	602a      	str	r2, [r5, #0]
 80083d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083dc:	2301      	movs	r3, #1
 80083de:	e0a3      	b.n	8008528 <_printf_i+0x1f4>
 80083e0:	6820      	ldr	r0, [r4, #0]
 80083e2:	6829      	ldr	r1, [r5, #0]
 80083e4:	0606      	lsls	r6, r0, #24
 80083e6:	f101 0304 	add.w	r3, r1, #4
 80083ea:	d50a      	bpl.n	8008402 <_printf_i+0xce>
 80083ec:	680e      	ldr	r6, [r1, #0]
 80083ee:	602b      	str	r3, [r5, #0]
 80083f0:	2e00      	cmp	r6, #0
 80083f2:	da03      	bge.n	80083fc <_printf_i+0xc8>
 80083f4:	232d      	movs	r3, #45	; 0x2d
 80083f6:	4276      	negs	r6, r6
 80083f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083fc:	485e      	ldr	r0, [pc, #376]	; (8008578 <_printf_i+0x244>)
 80083fe:	230a      	movs	r3, #10
 8008400:	e019      	b.n	8008436 <_printf_i+0x102>
 8008402:	680e      	ldr	r6, [r1, #0]
 8008404:	602b      	str	r3, [r5, #0]
 8008406:	f010 0f40 	tst.w	r0, #64	; 0x40
 800840a:	bf18      	it	ne
 800840c:	b236      	sxthne	r6, r6
 800840e:	e7ef      	b.n	80083f0 <_printf_i+0xbc>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	6820      	ldr	r0, [r4, #0]
 8008414:	1d19      	adds	r1, r3, #4
 8008416:	6029      	str	r1, [r5, #0]
 8008418:	0601      	lsls	r1, r0, #24
 800841a:	d501      	bpl.n	8008420 <_printf_i+0xec>
 800841c:	681e      	ldr	r6, [r3, #0]
 800841e:	e002      	b.n	8008426 <_printf_i+0xf2>
 8008420:	0646      	lsls	r6, r0, #25
 8008422:	d5fb      	bpl.n	800841c <_printf_i+0xe8>
 8008424:	881e      	ldrh	r6, [r3, #0]
 8008426:	4854      	ldr	r0, [pc, #336]	; (8008578 <_printf_i+0x244>)
 8008428:	2f6f      	cmp	r7, #111	; 0x6f
 800842a:	bf0c      	ite	eq
 800842c:	2308      	moveq	r3, #8
 800842e:	230a      	movne	r3, #10
 8008430:	2100      	movs	r1, #0
 8008432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008436:	6865      	ldr	r5, [r4, #4]
 8008438:	60a5      	str	r5, [r4, #8]
 800843a:	2d00      	cmp	r5, #0
 800843c:	bfa2      	ittt	ge
 800843e:	6821      	ldrge	r1, [r4, #0]
 8008440:	f021 0104 	bicge.w	r1, r1, #4
 8008444:	6021      	strge	r1, [r4, #0]
 8008446:	b90e      	cbnz	r6, 800844c <_printf_i+0x118>
 8008448:	2d00      	cmp	r5, #0
 800844a:	d04d      	beq.n	80084e8 <_printf_i+0x1b4>
 800844c:	4615      	mov	r5, r2
 800844e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008452:	fb03 6711 	mls	r7, r3, r1, r6
 8008456:	5dc7      	ldrb	r7, [r0, r7]
 8008458:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800845c:	4637      	mov	r7, r6
 800845e:	42bb      	cmp	r3, r7
 8008460:	460e      	mov	r6, r1
 8008462:	d9f4      	bls.n	800844e <_printf_i+0x11a>
 8008464:	2b08      	cmp	r3, #8
 8008466:	d10b      	bne.n	8008480 <_printf_i+0x14c>
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	07de      	lsls	r6, r3, #31
 800846c:	d508      	bpl.n	8008480 <_printf_i+0x14c>
 800846e:	6923      	ldr	r3, [r4, #16]
 8008470:	6861      	ldr	r1, [r4, #4]
 8008472:	4299      	cmp	r1, r3
 8008474:	bfde      	ittt	le
 8008476:	2330      	movle	r3, #48	; 0x30
 8008478:	f805 3c01 	strble.w	r3, [r5, #-1]
 800847c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008480:	1b52      	subs	r2, r2, r5
 8008482:	6122      	str	r2, [r4, #16]
 8008484:	f8cd a000 	str.w	sl, [sp]
 8008488:	464b      	mov	r3, r9
 800848a:	aa03      	add	r2, sp, #12
 800848c:	4621      	mov	r1, r4
 800848e:	4640      	mov	r0, r8
 8008490:	f7ff fee2 	bl	8008258 <_printf_common>
 8008494:	3001      	adds	r0, #1
 8008496:	d14c      	bne.n	8008532 <_printf_i+0x1fe>
 8008498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800849c:	b004      	add	sp, #16
 800849e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a2:	4835      	ldr	r0, [pc, #212]	; (8008578 <_printf_i+0x244>)
 80084a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80084a8:	6829      	ldr	r1, [r5, #0]
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80084b0:	6029      	str	r1, [r5, #0]
 80084b2:	061d      	lsls	r5, r3, #24
 80084b4:	d514      	bpl.n	80084e0 <_printf_i+0x1ac>
 80084b6:	07df      	lsls	r7, r3, #31
 80084b8:	bf44      	itt	mi
 80084ba:	f043 0320 	orrmi.w	r3, r3, #32
 80084be:	6023      	strmi	r3, [r4, #0]
 80084c0:	b91e      	cbnz	r6, 80084ca <_printf_i+0x196>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	f023 0320 	bic.w	r3, r3, #32
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	2310      	movs	r3, #16
 80084cc:	e7b0      	b.n	8008430 <_printf_i+0xfc>
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	f043 0320 	orr.w	r3, r3, #32
 80084d4:	6023      	str	r3, [r4, #0]
 80084d6:	2378      	movs	r3, #120	; 0x78
 80084d8:	4828      	ldr	r0, [pc, #160]	; (800857c <_printf_i+0x248>)
 80084da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084de:	e7e3      	b.n	80084a8 <_printf_i+0x174>
 80084e0:	0659      	lsls	r1, r3, #25
 80084e2:	bf48      	it	mi
 80084e4:	b2b6      	uxthmi	r6, r6
 80084e6:	e7e6      	b.n	80084b6 <_printf_i+0x182>
 80084e8:	4615      	mov	r5, r2
 80084ea:	e7bb      	b.n	8008464 <_printf_i+0x130>
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	6826      	ldr	r6, [r4, #0]
 80084f0:	6961      	ldr	r1, [r4, #20]
 80084f2:	1d18      	adds	r0, r3, #4
 80084f4:	6028      	str	r0, [r5, #0]
 80084f6:	0635      	lsls	r5, r6, #24
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	d501      	bpl.n	8008500 <_printf_i+0x1cc>
 80084fc:	6019      	str	r1, [r3, #0]
 80084fe:	e002      	b.n	8008506 <_printf_i+0x1d2>
 8008500:	0670      	lsls	r0, r6, #25
 8008502:	d5fb      	bpl.n	80084fc <_printf_i+0x1c8>
 8008504:	8019      	strh	r1, [r3, #0]
 8008506:	2300      	movs	r3, #0
 8008508:	6123      	str	r3, [r4, #16]
 800850a:	4615      	mov	r5, r2
 800850c:	e7ba      	b.n	8008484 <_printf_i+0x150>
 800850e:	682b      	ldr	r3, [r5, #0]
 8008510:	1d1a      	adds	r2, r3, #4
 8008512:	602a      	str	r2, [r5, #0]
 8008514:	681d      	ldr	r5, [r3, #0]
 8008516:	6862      	ldr	r2, [r4, #4]
 8008518:	2100      	movs	r1, #0
 800851a:	4628      	mov	r0, r5
 800851c:	f7f7 fe60 	bl	80001e0 <memchr>
 8008520:	b108      	cbz	r0, 8008526 <_printf_i+0x1f2>
 8008522:	1b40      	subs	r0, r0, r5
 8008524:	6060      	str	r0, [r4, #4]
 8008526:	6863      	ldr	r3, [r4, #4]
 8008528:	6123      	str	r3, [r4, #16]
 800852a:	2300      	movs	r3, #0
 800852c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008530:	e7a8      	b.n	8008484 <_printf_i+0x150>
 8008532:	6923      	ldr	r3, [r4, #16]
 8008534:	462a      	mov	r2, r5
 8008536:	4649      	mov	r1, r9
 8008538:	4640      	mov	r0, r8
 800853a:	47d0      	blx	sl
 800853c:	3001      	adds	r0, #1
 800853e:	d0ab      	beq.n	8008498 <_printf_i+0x164>
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	079b      	lsls	r3, r3, #30
 8008544:	d413      	bmi.n	800856e <_printf_i+0x23a>
 8008546:	68e0      	ldr	r0, [r4, #12]
 8008548:	9b03      	ldr	r3, [sp, #12]
 800854a:	4298      	cmp	r0, r3
 800854c:	bfb8      	it	lt
 800854e:	4618      	movlt	r0, r3
 8008550:	e7a4      	b.n	800849c <_printf_i+0x168>
 8008552:	2301      	movs	r3, #1
 8008554:	4632      	mov	r2, r6
 8008556:	4649      	mov	r1, r9
 8008558:	4640      	mov	r0, r8
 800855a:	47d0      	blx	sl
 800855c:	3001      	adds	r0, #1
 800855e:	d09b      	beq.n	8008498 <_printf_i+0x164>
 8008560:	3501      	adds	r5, #1
 8008562:	68e3      	ldr	r3, [r4, #12]
 8008564:	9903      	ldr	r1, [sp, #12]
 8008566:	1a5b      	subs	r3, r3, r1
 8008568:	42ab      	cmp	r3, r5
 800856a:	dcf2      	bgt.n	8008552 <_printf_i+0x21e>
 800856c:	e7eb      	b.n	8008546 <_printf_i+0x212>
 800856e:	2500      	movs	r5, #0
 8008570:	f104 0619 	add.w	r6, r4, #25
 8008574:	e7f5      	b.n	8008562 <_printf_i+0x22e>
 8008576:	bf00      	nop
 8008578:	08009015 	.word	0x08009015
 800857c:	08009026 	.word	0x08009026

08008580 <memcpy>:
 8008580:	440a      	add	r2, r1
 8008582:	4291      	cmp	r1, r2
 8008584:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008588:	d100      	bne.n	800858c <memcpy+0xc>
 800858a:	4770      	bx	lr
 800858c:	b510      	push	{r4, lr}
 800858e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008596:	4291      	cmp	r1, r2
 8008598:	d1f9      	bne.n	800858e <memcpy+0xe>
 800859a:	bd10      	pop	{r4, pc}

0800859c <memmove>:
 800859c:	4288      	cmp	r0, r1
 800859e:	b510      	push	{r4, lr}
 80085a0:	eb01 0402 	add.w	r4, r1, r2
 80085a4:	d902      	bls.n	80085ac <memmove+0x10>
 80085a6:	4284      	cmp	r4, r0
 80085a8:	4623      	mov	r3, r4
 80085aa:	d807      	bhi.n	80085bc <memmove+0x20>
 80085ac:	1e43      	subs	r3, r0, #1
 80085ae:	42a1      	cmp	r1, r4
 80085b0:	d008      	beq.n	80085c4 <memmove+0x28>
 80085b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085ba:	e7f8      	b.n	80085ae <memmove+0x12>
 80085bc:	4402      	add	r2, r0
 80085be:	4601      	mov	r1, r0
 80085c0:	428a      	cmp	r2, r1
 80085c2:	d100      	bne.n	80085c6 <memmove+0x2a>
 80085c4:	bd10      	pop	{r4, pc}
 80085c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085ce:	e7f7      	b.n	80085c0 <memmove+0x24>

080085d0 <_free_r>:
 80085d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085d2:	2900      	cmp	r1, #0
 80085d4:	d044      	beq.n	8008660 <_free_r+0x90>
 80085d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085da:	9001      	str	r0, [sp, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f1a1 0404 	sub.w	r4, r1, #4
 80085e2:	bfb8      	it	lt
 80085e4:	18e4      	addlt	r4, r4, r3
 80085e6:	f000 f913 	bl	8008810 <__malloc_lock>
 80085ea:	4a1e      	ldr	r2, [pc, #120]	; (8008664 <_free_r+0x94>)
 80085ec:	9801      	ldr	r0, [sp, #4]
 80085ee:	6813      	ldr	r3, [r2, #0]
 80085f0:	b933      	cbnz	r3, 8008600 <_free_r+0x30>
 80085f2:	6063      	str	r3, [r4, #4]
 80085f4:	6014      	str	r4, [r2, #0]
 80085f6:	b003      	add	sp, #12
 80085f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085fc:	f000 b90e 	b.w	800881c <__malloc_unlock>
 8008600:	42a3      	cmp	r3, r4
 8008602:	d908      	bls.n	8008616 <_free_r+0x46>
 8008604:	6825      	ldr	r5, [r4, #0]
 8008606:	1961      	adds	r1, r4, r5
 8008608:	428b      	cmp	r3, r1
 800860a:	bf01      	itttt	eq
 800860c:	6819      	ldreq	r1, [r3, #0]
 800860e:	685b      	ldreq	r3, [r3, #4]
 8008610:	1949      	addeq	r1, r1, r5
 8008612:	6021      	streq	r1, [r4, #0]
 8008614:	e7ed      	b.n	80085f2 <_free_r+0x22>
 8008616:	461a      	mov	r2, r3
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	b10b      	cbz	r3, 8008620 <_free_r+0x50>
 800861c:	42a3      	cmp	r3, r4
 800861e:	d9fa      	bls.n	8008616 <_free_r+0x46>
 8008620:	6811      	ldr	r1, [r2, #0]
 8008622:	1855      	adds	r5, r2, r1
 8008624:	42a5      	cmp	r5, r4
 8008626:	d10b      	bne.n	8008640 <_free_r+0x70>
 8008628:	6824      	ldr	r4, [r4, #0]
 800862a:	4421      	add	r1, r4
 800862c:	1854      	adds	r4, r2, r1
 800862e:	42a3      	cmp	r3, r4
 8008630:	6011      	str	r1, [r2, #0]
 8008632:	d1e0      	bne.n	80085f6 <_free_r+0x26>
 8008634:	681c      	ldr	r4, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	6053      	str	r3, [r2, #4]
 800863a:	4421      	add	r1, r4
 800863c:	6011      	str	r1, [r2, #0]
 800863e:	e7da      	b.n	80085f6 <_free_r+0x26>
 8008640:	d902      	bls.n	8008648 <_free_r+0x78>
 8008642:	230c      	movs	r3, #12
 8008644:	6003      	str	r3, [r0, #0]
 8008646:	e7d6      	b.n	80085f6 <_free_r+0x26>
 8008648:	6825      	ldr	r5, [r4, #0]
 800864a:	1961      	adds	r1, r4, r5
 800864c:	428b      	cmp	r3, r1
 800864e:	bf04      	itt	eq
 8008650:	6819      	ldreq	r1, [r3, #0]
 8008652:	685b      	ldreq	r3, [r3, #4]
 8008654:	6063      	str	r3, [r4, #4]
 8008656:	bf04      	itt	eq
 8008658:	1949      	addeq	r1, r1, r5
 800865a:	6021      	streq	r1, [r4, #0]
 800865c:	6054      	str	r4, [r2, #4]
 800865e:	e7ca      	b.n	80085f6 <_free_r+0x26>
 8008660:	b003      	add	sp, #12
 8008662:	bd30      	pop	{r4, r5, pc}
 8008664:	200006fc 	.word	0x200006fc

08008668 <sbrk_aligned>:
 8008668:	b570      	push	{r4, r5, r6, lr}
 800866a:	4e0e      	ldr	r6, [pc, #56]	; (80086a4 <sbrk_aligned+0x3c>)
 800866c:	460c      	mov	r4, r1
 800866e:	6831      	ldr	r1, [r6, #0]
 8008670:	4605      	mov	r5, r0
 8008672:	b911      	cbnz	r1, 800867a <sbrk_aligned+0x12>
 8008674:	f000 f8bc 	bl	80087f0 <_sbrk_r>
 8008678:	6030      	str	r0, [r6, #0]
 800867a:	4621      	mov	r1, r4
 800867c:	4628      	mov	r0, r5
 800867e:	f000 f8b7 	bl	80087f0 <_sbrk_r>
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	d00a      	beq.n	800869c <sbrk_aligned+0x34>
 8008686:	1cc4      	adds	r4, r0, #3
 8008688:	f024 0403 	bic.w	r4, r4, #3
 800868c:	42a0      	cmp	r0, r4
 800868e:	d007      	beq.n	80086a0 <sbrk_aligned+0x38>
 8008690:	1a21      	subs	r1, r4, r0
 8008692:	4628      	mov	r0, r5
 8008694:	f000 f8ac 	bl	80087f0 <_sbrk_r>
 8008698:	3001      	adds	r0, #1
 800869a:	d101      	bne.n	80086a0 <sbrk_aligned+0x38>
 800869c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80086a0:	4620      	mov	r0, r4
 80086a2:	bd70      	pop	{r4, r5, r6, pc}
 80086a4:	20000700 	.word	0x20000700

080086a8 <_malloc_r>:
 80086a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ac:	1ccd      	adds	r5, r1, #3
 80086ae:	f025 0503 	bic.w	r5, r5, #3
 80086b2:	3508      	adds	r5, #8
 80086b4:	2d0c      	cmp	r5, #12
 80086b6:	bf38      	it	cc
 80086b8:	250c      	movcc	r5, #12
 80086ba:	2d00      	cmp	r5, #0
 80086bc:	4607      	mov	r7, r0
 80086be:	db01      	blt.n	80086c4 <_malloc_r+0x1c>
 80086c0:	42a9      	cmp	r1, r5
 80086c2:	d905      	bls.n	80086d0 <_malloc_r+0x28>
 80086c4:	230c      	movs	r3, #12
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	2600      	movs	r6, #0
 80086ca:	4630      	mov	r0, r6
 80086cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d0:	4e2e      	ldr	r6, [pc, #184]	; (800878c <_malloc_r+0xe4>)
 80086d2:	f000 f89d 	bl	8008810 <__malloc_lock>
 80086d6:	6833      	ldr	r3, [r6, #0]
 80086d8:	461c      	mov	r4, r3
 80086da:	bb34      	cbnz	r4, 800872a <_malloc_r+0x82>
 80086dc:	4629      	mov	r1, r5
 80086de:	4638      	mov	r0, r7
 80086e0:	f7ff ffc2 	bl	8008668 <sbrk_aligned>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	4604      	mov	r4, r0
 80086e8:	d14d      	bne.n	8008786 <_malloc_r+0xde>
 80086ea:	6834      	ldr	r4, [r6, #0]
 80086ec:	4626      	mov	r6, r4
 80086ee:	2e00      	cmp	r6, #0
 80086f0:	d140      	bne.n	8008774 <_malloc_r+0xcc>
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	4631      	mov	r1, r6
 80086f6:	4638      	mov	r0, r7
 80086f8:	eb04 0803 	add.w	r8, r4, r3
 80086fc:	f000 f878 	bl	80087f0 <_sbrk_r>
 8008700:	4580      	cmp	r8, r0
 8008702:	d13a      	bne.n	800877a <_malloc_r+0xd2>
 8008704:	6821      	ldr	r1, [r4, #0]
 8008706:	3503      	adds	r5, #3
 8008708:	1a6d      	subs	r5, r5, r1
 800870a:	f025 0503 	bic.w	r5, r5, #3
 800870e:	3508      	adds	r5, #8
 8008710:	2d0c      	cmp	r5, #12
 8008712:	bf38      	it	cc
 8008714:	250c      	movcc	r5, #12
 8008716:	4629      	mov	r1, r5
 8008718:	4638      	mov	r0, r7
 800871a:	f7ff ffa5 	bl	8008668 <sbrk_aligned>
 800871e:	3001      	adds	r0, #1
 8008720:	d02b      	beq.n	800877a <_malloc_r+0xd2>
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	442b      	add	r3, r5
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	e00e      	b.n	8008748 <_malloc_r+0xa0>
 800872a:	6822      	ldr	r2, [r4, #0]
 800872c:	1b52      	subs	r2, r2, r5
 800872e:	d41e      	bmi.n	800876e <_malloc_r+0xc6>
 8008730:	2a0b      	cmp	r2, #11
 8008732:	d916      	bls.n	8008762 <_malloc_r+0xba>
 8008734:	1961      	adds	r1, r4, r5
 8008736:	42a3      	cmp	r3, r4
 8008738:	6025      	str	r5, [r4, #0]
 800873a:	bf18      	it	ne
 800873c:	6059      	strne	r1, [r3, #4]
 800873e:	6863      	ldr	r3, [r4, #4]
 8008740:	bf08      	it	eq
 8008742:	6031      	streq	r1, [r6, #0]
 8008744:	5162      	str	r2, [r4, r5]
 8008746:	604b      	str	r3, [r1, #4]
 8008748:	4638      	mov	r0, r7
 800874a:	f104 060b 	add.w	r6, r4, #11
 800874e:	f000 f865 	bl	800881c <__malloc_unlock>
 8008752:	f026 0607 	bic.w	r6, r6, #7
 8008756:	1d23      	adds	r3, r4, #4
 8008758:	1af2      	subs	r2, r6, r3
 800875a:	d0b6      	beq.n	80086ca <_malloc_r+0x22>
 800875c:	1b9b      	subs	r3, r3, r6
 800875e:	50a3      	str	r3, [r4, r2]
 8008760:	e7b3      	b.n	80086ca <_malloc_r+0x22>
 8008762:	6862      	ldr	r2, [r4, #4]
 8008764:	42a3      	cmp	r3, r4
 8008766:	bf0c      	ite	eq
 8008768:	6032      	streq	r2, [r6, #0]
 800876a:	605a      	strne	r2, [r3, #4]
 800876c:	e7ec      	b.n	8008748 <_malloc_r+0xa0>
 800876e:	4623      	mov	r3, r4
 8008770:	6864      	ldr	r4, [r4, #4]
 8008772:	e7b2      	b.n	80086da <_malloc_r+0x32>
 8008774:	4634      	mov	r4, r6
 8008776:	6876      	ldr	r6, [r6, #4]
 8008778:	e7b9      	b.n	80086ee <_malloc_r+0x46>
 800877a:	230c      	movs	r3, #12
 800877c:	603b      	str	r3, [r7, #0]
 800877e:	4638      	mov	r0, r7
 8008780:	f000 f84c 	bl	800881c <__malloc_unlock>
 8008784:	e7a1      	b.n	80086ca <_malloc_r+0x22>
 8008786:	6025      	str	r5, [r4, #0]
 8008788:	e7de      	b.n	8008748 <_malloc_r+0xa0>
 800878a:	bf00      	nop
 800878c:	200006fc 	.word	0x200006fc

08008790 <_realloc_r>:
 8008790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008794:	4680      	mov	r8, r0
 8008796:	4614      	mov	r4, r2
 8008798:	460e      	mov	r6, r1
 800879a:	b921      	cbnz	r1, 80087a6 <_realloc_r+0x16>
 800879c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087a0:	4611      	mov	r1, r2
 80087a2:	f7ff bf81 	b.w	80086a8 <_malloc_r>
 80087a6:	b92a      	cbnz	r2, 80087b4 <_realloc_r+0x24>
 80087a8:	f7ff ff12 	bl	80085d0 <_free_r>
 80087ac:	4625      	mov	r5, r4
 80087ae:	4628      	mov	r0, r5
 80087b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087b4:	f000 f838 	bl	8008828 <_malloc_usable_size_r>
 80087b8:	4284      	cmp	r4, r0
 80087ba:	4607      	mov	r7, r0
 80087bc:	d802      	bhi.n	80087c4 <_realloc_r+0x34>
 80087be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087c2:	d812      	bhi.n	80087ea <_realloc_r+0x5a>
 80087c4:	4621      	mov	r1, r4
 80087c6:	4640      	mov	r0, r8
 80087c8:	f7ff ff6e 	bl	80086a8 <_malloc_r>
 80087cc:	4605      	mov	r5, r0
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d0ed      	beq.n	80087ae <_realloc_r+0x1e>
 80087d2:	42bc      	cmp	r4, r7
 80087d4:	4622      	mov	r2, r4
 80087d6:	4631      	mov	r1, r6
 80087d8:	bf28      	it	cs
 80087da:	463a      	movcs	r2, r7
 80087dc:	f7ff fed0 	bl	8008580 <memcpy>
 80087e0:	4631      	mov	r1, r6
 80087e2:	4640      	mov	r0, r8
 80087e4:	f7ff fef4 	bl	80085d0 <_free_r>
 80087e8:	e7e1      	b.n	80087ae <_realloc_r+0x1e>
 80087ea:	4635      	mov	r5, r6
 80087ec:	e7df      	b.n	80087ae <_realloc_r+0x1e>
	...

080087f0 <_sbrk_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4d06      	ldr	r5, [pc, #24]	; (800880c <_sbrk_r+0x1c>)
 80087f4:	2300      	movs	r3, #0
 80087f6:	4604      	mov	r4, r0
 80087f8:	4608      	mov	r0, r1
 80087fa:	602b      	str	r3, [r5, #0]
 80087fc:	f7f9 f9da 	bl	8001bb4 <_sbrk>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	d102      	bne.n	800880a <_sbrk_r+0x1a>
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	b103      	cbz	r3, 800880a <_sbrk_r+0x1a>
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	20000704 	.word	0x20000704

08008810 <__malloc_lock>:
 8008810:	4801      	ldr	r0, [pc, #4]	; (8008818 <__malloc_lock+0x8>)
 8008812:	f000 b811 	b.w	8008838 <__retarget_lock_acquire_recursive>
 8008816:	bf00      	nop
 8008818:	20000708 	.word	0x20000708

0800881c <__malloc_unlock>:
 800881c:	4801      	ldr	r0, [pc, #4]	; (8008824 <__malloc_unlock+0x8>)
 800881e:	f000 b80c 	b.w	800883a <__retarget_lock_release_recursive>
 8008822:	bf00      	nop
 8008824:	20000708 	.word	0x20000708

08008828 <_malloc_usable_size_r>:
 8008828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800882c:	1f18      	subs	r0, r3, #4
 800882e:	2b00      	cmp	r3, #0
 8008830:	bfbc      	itt	lt
 8008832:	580b      	ldrlt	r3, [r1, r0]
 8008834:	18c0      	addlt	r0, r0, r3
 8008836:	4770      	bx	lr

08008838 <__retarget_lock_acquire_recursive>:
 8008838:	4770      	bx	lr

0800883a <__retarget_lock_release_recursive>:
 800883a:	4770      	bx	lr

0800883c <_init>:
 800883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883e:	bf00      	nop
 8008840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008842:	bc08      	pop	{r3}
 8008844:	469e      	mov	lr, r3
 8008846:	4770      	bx	lr

08008848 <_fini>:
 8008848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884a:	bf00      	nop
 800884c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884e:	bc08      	pop	{r3}
 8008850:	469e      	mov	lr, r3
 8008852:	4770      	bx	lr
